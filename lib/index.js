!function(t,e){"object"==typeof exports&&"object"==typeof module?module.exports=e():"function"==typeof define&&define.amd?define([],e):"object"==typeof exports?exports.HTool=e():t.HTool=e()}(self,(function(){return(()=>{var t={6745:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.Animation=void 0;var r=n(4417),i=r.glob.performance&&r.glob.performance.now?function(){return r.glob.performance.now()}:function(){return(new Date).getTime()},o=function(){function t(e,n){this.id=t.animIdCounter++,this.frame={time:0,timeDiff:0,lastTime:i(),frameRate:0},this.func=e,this.setLayers(n)}return t.prototype.setLayers=function(t){var e=[];return e=t?t.length>0?t:[t]:[],this.layers=e,this},t.prototype.getLayers=function(){return this.layers},t.prototype.addLayer=function(t){var e,n=this.layers,r=n.length;for(e=0;e<r;e++)if(n[e]._id===t._id)return!1;return this.layers.push(t),!0},t.prototype.isRunning=function(){var e,n=t.animations,r=n.length;for(e=0;e<r;e++)if(n[e].id===this.id)return!0;return!1},t.prototype.start=function(){return this.stop(),this.frame.timeDiff=0,this.frame.lastTime=i(),t._addAnimation(this),this},t.prototype.stop=function(){return t._removeAnimation(this),this},t.prototype._updateFrameObject=function(t){this.frame.timeDiff=t-this.frame.lastTime,this.frame.lastTime=t,this.frame.time+=this.frame.timeDiff,this.frame.frameRate=1e3/this.frame.timeDiff},t._addAnimation=function(t){this.animations.push(t),this._handleAnimation()},t._removeAnimation=function(t){var e,n=t.id,r=this.animations,i=r.length;for(e=0;e<i;e++)if(r[e].id===n){this.animations.splice(e,1);break}},t._runFrames=function(){var t,e,n,r,o,a,s,h,u={},c=this.animations;for(r=0;r<c.length;r++)if(e=(t=c[r]).layers,n=t.func,t._updateFrameObject(i()),a=e.length,!n||!1!==n.call(t,t.frame))for(o=0;o<a;o++)void 0!==(s=e[o])._id&&(u[s._id]=s);for(h in u)u.hasOwnProperty(h)&&u[h].draw()},t._animationLoop=function(){var e=t;e.animations.length?(e._runFrames(),requestAnimationFrame(e._animationLoop)):e.animRunning=!1},t._handleAnimation=function(){this.animRunning||(this.animRunning=!0,requestAnimationFrame(this._animationLoop))},t.animations=[],t.animIdCounter=0,t.animRunning=!1,t}();e.Animation=o},4842:function(t,e,n){"use strict";var r,i=this&&this.__extends||(r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])})(t,e)},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});Object.defineProperty(e,"__esModule",{value:!0}),e.HitCanvas=e.SceneCanvas=e.Canvas=void 0;var o,a=n(8588),s=n(3442),h=n(4417),u=n(1455),c=n(3774);var l=function(){function t(t){this.pixelRatio=1,this.width=0,this.height=0,this.isCache=!1;var e=(t||{}).pixelRatio||h.Konva.pixelRatio||function(){if(o)return o;var t=a.Util.createCanvasElement().getContext("2d");return o=(h.Konva._global.devicePixelRatio||1)/(t.webkitBackingStorePixelRatio||t.mozBackingStorePixelRatio||t.msBackingStorePixelRatio||t.oBackingStorePixelRatio||t.backingStorePixelRatio||1)}();this.pixelRatio=e,this._canvas=a.Util.createCanvasElement(),this._canvas.style.padding="0",this._canvas.style.margin="0",this._canvas.style.border="0",this._canvas.style.background="transparent",this._canvas.style.position="absolute",this._canvas.style.top="0",this._canvas.style.left="0"}return t.prototype.getContext=function(){return this.context},t.prototype.getPixelRatio=function(){return this.pixelRatio},t.prototype.setPixelRatio=function(t){var e=this.pixelRatio;this.pixelRatio=t,this.setSize(this.getWidth()/e,this.getHeight()/e)},t.prototype.setWidth=function(t){this.width=this._canvas.width=t*this.pixelRatio,this._canvas.style.width=t+"px";var e=this.pixelRatio;this.getContext()._context.scale(e,e)},t.prototype.setHeight=function(t){this.height=this._canvas.height=t*this.pixelRatio,this._canvas.style.height=t+"px";var e=this.pixelRatio;this.getContext()._context.scale(e,e)},t.prototype.getWidth=function(){return this.width},t.prototype.getHeight=function(){return this.height},t.prototype.setSize=function(t,e){this.setWidth(t||0),this.setHeight(e||0)},t.prototype.toDataURL=function(t,e){try{return this._canvas.toDataURL(t,e)}catch(t){try{return this._canvas.toDataURL()}catch(t){return a.Util.error("Unable to get data URL. "+t.message+" For more info read https://konvajs.org/docs/posts/Tainted_Canvas.html."),""}}},t}();e.Canvas=l,u.Factory.addGetterSetter(l,"pixelRatio",void 0,c.getNumberValidator());var f=function(t){function e(e){void 0===e&&(e={width:0,height:0});var n=t.call(this,e)||this;return n.context=new s.SceneContext(n),n.setSize(e.width,e.height),n}return i(e,t),e}(l);e.SceneCanvas=f;var p=function(t){function e(e){void 0===e&&(e={width:0,height:0});var n=t.call(this,e)||this;return n.hitCanvas=!0,n.context=new s.HitContext(n),n.setSize(e.width,e.height),n}return i(e,t),e}(l);e.HitCanvas=p},8783:function(t,e,n){"use strict";var r,i=this&&this.__extends||(r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])})(t,e)},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});Object.defineProperty(e,"__esModule",{value:!0}),e.Container=void 0;var o=n(8588),a=n(1455),s=n(7939),h=n(3774),u=function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.children=new o.Collection,e}return i(e,t),e.prototype.getChildren=function(t){if(!t)return this.children;var e=new o.Collection;return this.children.each((function(n){t(n)&&e.push(n)})),e},e.prototype.hasChildren=function(){return this.getChildren().length>0},e.prototype.removeChildren=function(){for(var t,e=0;e<this.children.length;e++)(t=this.children[e]).parent=null,t.index=0,t.remove();return this.children=new o.Collection,this},e.prototype.destroyChildren=function(){for(var t,e=0;e<this.children.length;e++)(t=this.children[e]).parent=null,t.index=0,t.destroy();return this.children=new o.Collection,this},e.prototype.add=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];if(arguments.length>1){for(var n=0;n<arguments.length;n++)this.add(arguments[n]);return this}var r=t[0];if(r.getParent())return r.moveTo(this),this;var i=this.children;return this._validateAdd(r),r._clearCaches(),r.index=i.length,r.parent=this,i.push(r),this._fire("add",{child:r}),this},e.prototype.destroy=function(){return this.hasChildren()&&this.destroyChildren(),t.prototype.destroy.call(this),this},e.prototype.find=function(t){return this._generalFind(t,!1)},e.prototype.get=function(t){return o.Util.warn("collection.get() method is deprecated. Please use collection.find() instead."),this.find(t)},e.prototype.findOne=function(t){var e=this._generalFind(t,!0);return e.length>0?e[0]:void 0},e.prototype._generalFind=function(t,e){var n=[];return this._descendants((function(r){var i=r._isMatch(t);return i&&n.push(r),!(!i||!e)})),o.Collection.toCollection(n)},e.prototype._descendants=function(t){for(var e=0;e<this.children.length;e++){var n=this.children[e];if(t(n))return!0;if(n.hasChildren()&&n._descendants(t))return!0}return!1},e.prototype.toObject=function(){var t=s.Node.prototype.toObject.call(this);t.children=[];for(var e=this.getChildren(),n=e.length,r=0;r<n;r++){var i=e[r];t.children.push(i.toObject())}return t},e.prototype.isAncestorOf=function(t){for(var e=t.getParent();e;){if(e._id===this._id)return!0;e=e.getParent()}return!1},e.prototype.clone=function(t){var e=s.Node.prototype.clone.call(this,t);return this.getChildren().each((function(t){e.add(t.clone())})),e},e.prototype.getAllIntersections=function(t){var e=[];return this.find("Shape").each((function(n){n.isVisible()&&n.intersects(t)&&e.push(n)})),e},e.prototype._setChildrenIndices=function(){this.children.each((function(t,e){t.index=e}))},e.prototype.drawScene=function(t,e){var n=this.getLayer(),r=t||n&&n.getCanvas(),i=r&&r.getContext(),o=this._getCanvasCache(),a=o&&o.scene,s=r&&r.isCache;if(!this.isVisible()&&!s)return this;if(a){i.save();var h=this.getAbsoluteTransform(e).getMatrix();i.transform(h[0],h[1],h[2],h[3],h[4],h[5]),this._drawCachedSceneCanvas(i),i.restore()}else this._drawChildren("drawScene",r,e);return this},e.prototype.drawHit=function(t,e){if(!this.shouldDrawHit(e))return this;var n=this.getLayer(),r=t||n&&n.hitCanvas,i=r&&r.getContext(),o=this._getCanvasCache();if(o&&o.hit){i.save();var a=this.getAbsoluteTransform(e).getMatrix();i.transform(a[0],a[1],a[2],a[3],a[4],a[5]),this._drawCachedHitCanvas(i),i.restore()}else this._drawChildren("drawHit",r,e);return this},e.prototype._drawChildren=function(t,e,n){var r=e&&e.getContext(),i=this.clipWidth(),o=this.clipHeight(),a=this.clipFunc(),s=i&&o||a,h=n===this;if(s){r.save();var u=this.getAbsoluteTransform(n),c=u.getMatrix();if(r.transform(c[0],c[1],c[2],c[3],c[4],c[5]),r.beginPath(),a)a.call(this,r,this);else{var l=this.clipX(),f=this.clipY();r.rect(l,f,i,o)}r.clip(),c=u.copy().invert().getMatrix(),r.transform(c[0],c[1],c[2],c[3],c[4],c[5])}var p=!h&&"source-over"!==this.globalCompositeOperation()&&"drawScene"===t;p&&(r.save(),r._applyGlobalCompositeOperation(this)),this.children.each((function(r){r[t](e,n)})),p&&r.restore(),s&&r.restore()},e.prototype.getClientRect=function(t){var e,n,r,i,o=(t=t||{}).skipTransform,a=t.relativeTo,s={x:1/0,y:1/0,width:0,height:0},h=this;this.children.each((function(o){if(o.visible()){var a=o.getClientRect({relativeTo:h,skipShadow:t.skipShadow,skipStroke:t.skipStroke});0===a.width&&0===a.height||(void 0===e?(e=a.x,n=a.y,r=a.x+a.width,i=a.y+a.height):(e=Math.min(e,a.x),n=Math.min(n,a.y),r=Math.max(r,a.x+a.width),i=Math.max(i,a.y+a.height)))}}));for(var u=this.find("Shape"),c=!1,l=0;l<u.length;l++){if(u[l]._isVisible(this)){c=!0;break}}return s=c&&void 0!==e?{x:e,y:n,width:r-e,height:i-n}:{x:0,y:0,width:0,height:0},o?s:this._transformedRect(s,a)},e}(s.Node);e.Container=u,a.Factory.addComponentsGetterSetter(u,"clip",["x","y","width","height"]),a.Factory.addGetterSetter(u,"clipX",void 0,h.getNumberValidator()),a.Factory.addGetterSetter(u,"clipY",void 0,h.getNumberValidator()),a.Factory.addGetterSetter(u,"clipWidth",void 0,h.getNumberValidator()),a.Factory.addGetterSetter(u,"clipHeight",void 0,h.getNumberValidator()),a.Factory.addGetterSetter(u,"clipFunc"),o.Collection.mapMethods(u)},3442:function(t,e,n){"use strict";var r,i=this&&this.__extends||(r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])})(t,e)},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});Object.defineProperty(e,"__esModule",{value:!0}),e.HitContext=e.SceneContext=e.Context=void 0;var o=n(8588),a=n(4417),s=["arc","arcTo","beginPath","bezierCurveTo","clearRect","clip","closePath","createLinearGradient","createPattern","createRadialGradient","drawImage","ellipse","fill","fillText","getImageData","createImageData","lineTo","moveTo","putImageData","quadraticCurveTo","rect","restore","rotate","save","scale","setLineDash","setTransform","stroke","strokeText","transform","translate"],h=function(){function t(t){this.canvas=t,this._context=t._canvas.getContext("2d"),a.Konva.enableTrace&&(this.traceArr=[],this._enableTrace())}return t.prototype.fillShape=function(t){t.fillEnabled()&&this._fill(t)},t.prototype._fill=function(t){},t.prototype.strokeShape=function(t){t.hasStroke()&&this._stroke(t)},t.prototype._stroke=function(t){},t.prototype.fillStrokeShape=function(t){t.attrs.fillAfterStrokeEnabled?(this.strokeShape(t),this.fillShape(t)):(this.fillShape(t),this.strokeShape(t))},t.prototype.getTrace=function(t){var e,n,r,i,a=this.traceArr,s=a.length,h="";for(e=0;e<s;e++)(r=(n=a[e]).method)?(i=n.args,h+=r,t?h+="()":o.Util._isArray(i[0])?h+="(["+i.join(",")+"])":h+="("+i.join(",")+")"):(h+=n.property,t||(h+="="+n.val)),h+=";";return h},t.prototype.clearTrace=function(){this.traceArr=[]},t.prototype._trace=function(t){var e=this.traceArr;e.push(t),e.length>=100&&e.shift()},t.prototype.reset=function(){var t=this.getCanvas().getPixelRatio();this.setTransform(1*t,0,0,1*t,0,0)},t.prototype.getCanvas=function(){return this.canvas},t.prototype.clear=function(t){var e=this.getCanvas();t?this.clearRect(t.x||0,t.y||0,t.width||0,t.height||0):this.clearRect(0,0,e.getWidth()/e.pixelRatio,e.getHeight()/e.pixelRatio)},t.prototype._applyLineCap=function(t){var e=t.getLineCap();e&&this.setAttr("lineCap",e)},t.prototype._applyOpacity=function(t){var e=t.getAbsoluteOpacity();1!==e&&this.setAttr("globalAlpha",e)},t.prototype._applyLineJoin=function(t){var e=t.attrs.lineJoin;e&&this.setAttr("lineJoin",e)},t.prototype.setAttr=function(t,e){this._context[t]=e},t.prototype.arc=function(t,e,n,r,i,o){this._context.arc(t,e,n,r,i,o)},t.prototype.arcTo=function(t,e,n,r,i){this._context.arcTo(t,e,n,r,i)},t.prototype.beginPath=function(){this._context.beginPath()},t.prototype.bezierCurveTo=function(t,e,n,r,i,o){this._context.bezierCurveTo(t,e,n,r,i,o)},t.prototype.clearRect=function(t,e,n,r){this._context.clearRect(t,e,n,r)},t.prototype.clip=function(){this._context.clip()},t.prototype.closePath=function(){this._context.closePath()},t.prototype.createImageData=function(t,e){var n=arguments;return 2===n.length?this._context.createImageData(t,e):1===n.length?this._context.createImageData(t):void 0},t.prototype.createLinearGradient=function(t,e,n,r){return this._context.createLinearGradient(t,e,n,r)},t.prototype.createPattern=function(t,e){return this._context.createPattern(t,e)},t.prototype.createRadialGradient=function(t,e,n,r,i,o){return this._context.createRadialGradient(t,e,n,r,i,o)},t.prototype.drawImage=function(t,e,n,r,i,o,a,s,h){var u=arguments,c=this._context;3===u.length?c.drawImage(t,e,n):5===u.length?c.drawImage(t,e,n,r,i):9===u.length&&c.drawImage(t,e,n,r,i,o,a,s,h)},t.prototype.ellipse=function(t,e,n,r,i,o,a,s){this._context.ellipse(t,e,n,r,i,o,a,s)},t.prototype.isPointInPath=function(t,e){return this._context.isPointInPath(t,e)},t.prototype.fill=function(){this._context.fill()},t.prototype.fillRect=function(t,e,n,r){this._context.fillRect(t,e,n,r)},t.prototype.strokeRect=function(t,e,n,r){this._context.strokeRect(t,e,n,r)},t.prototype.fillText=function(t,e,n){this._context.fillText(t,e,n)},t.prototype.measureText=function(t){return this._context.measureText(t)},t.prototype.getImageData=function(t,e,n,r){return this._context.getImageData(t,e,n,r)},t.prototype.lineTo=function(t,e){this._context.lineTo(t,e)},t.prototype.moveTo=function(t,e){this._context.moveTo(t,e)},t.prototype.rect=function(t,e,n,r){this._context.rect(t,e,n,r)},t.prototype.putImageData=function(t,e,n){this._context.putImageData(t,e,n)},t.prototype.quadraticCurveTo=function(t,e,n,r){this._context.quadraticCurveTo(t,e,n,r)},t.prototype.restore=function(){this._context.restore()},t.prototype.rotate=function(t){this._context.rotate(t)},t.prototype.save=function(){this._context.save()},t.prototype.scale=function(t,e){this._context.scale(t,e)},t.prototype.setLineDash=function(t){this._context.setLineDash?this._context.setLineDash(t):"mozDash"in this._context?this._context.mozDash=t:"webkitLineDash"in this._context&&(this._context.webkitLineDash=t)},t.prototype.getLineDash=function(){return this._context.getLineDash()},t.prototype.setTransform=function(t,e,n,r,i,o){this._context.setTransform(t,e,n,r,i,o)},t.prototype.stroke=function(){this._context.stroke()},t.prototype.strokeText=function(t,e,n,r){this._context.strokeText(t,e,n,r)},t.prototype.transform=function(t,e,n,r,i,o){this._context.transform(t,e,n,r,i,o)},t.prototype.translate=function(t,e){this._context.translate(t,e)},t.prototype._enableTrace=function(){var t,e,n=this,r=s.length,i=o.Util._simplifyArray,a=this.setAttr,h=function(t){var r,o=n[t];n[t]=function(){return e=i(Array.prototype.slice.call(arguments,0)),r=o.apply(n,arguments),n._trace({method:t,args:e}),r}};for(t=0;t<r;t++)h(s[t]);n.setAttr=function(){a.apply(n,arguments);var t=arguments[0],e=arguments[1];"shadowOffsetX"!==t&&"shadowOffsetY"!==t&&"shadowBlur"!==t||(e/=this.canvas.getPixelRatio()),n._trace({property:t,val:e})}},t.prototype._applyGlobalCompositeOperation=function(t){var e=t.getGlobalCompositeOperation();"source-over"!==e&&this.setAttr("globalCompositeOperation",e)},t}();e.Context=h,["fillStyle","strokeStyle","shadowColor","shadowBlur","shadowOffsetX","shadowOffsetY","lineCap","lineDashOffset","lineJoin","lineWidth","miterLimit","font","textAlign","textBaseline","globalAlpha","globalCompositeOperation","imageSmoothingEnabled"].forEach((function(t){Object.defineProperty(h.prototype,t,{get:function(){return this._context[t]},set:function(e){this._context[t]=e}})}));var u=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return i(e,t),e.prototype._fillColor=function(t){var e=t.fill();this.setAttr("fillStyle",e),t._fillFunc(this)},e.prototype._fillPattern=function(t){var e=t.getFillPatternX(),n=t.getFillPatternY(),r=a.Konva.getAngle(t.getFillPatternRotation()),i=t.getFillPatternOffsetX(),o=t.getFillPatternOffsetY();t.getFillPatternScaleX(),t.getFillPatternScaleY();(e||n)&&this.translate(e||0,n||0),r&&this.rotate(r),(i||o)&&this.translate(-1*i,-1*o),this.setAttr("fillStyle",t._getFillPattern()),t._fillFunc(this)},e.prototype._fillLinearGradient=function(t){var e=t._getLinearGradient();e&&(this.setAttr("fillStyle",e),t._fillFunc(this))},e.prototype._fillRadialGradient=function(t){var e=t._getRadialGradient();e&&(this.setAttr("fillStyle",e),t._fillFunc(this))},e.prototype._fill=function(t){var e=t.fill(),n=t.getFillPriority();if(e&&"color"===n)this._fillColor(t);else{var r=t.getFillPatternImage();if(r&&"pattern"===n)this._fillPattern(t);else{var i=t.getFillLinearGradientColorStops();if(i&&"linear-gradient"===n)this._fillLinearGradient(t);else{var o=t.getFillRadialGradientColorStops();o&&"radial-gradient"===n?this._fillRadialGradient(t):e?this._fillColor(t):r?this._fillPattern(t):i?this._fillLinearGradient(t):o&&this._fillRadialGradient(t)}}}},e.prototype._strokeLinearGradient=function(t){var e=t.getStrokeLinearGradientStartPoint(),n=t.getStrokeLinearGradientEndPoint(),r=t.getStrokeLinearGradientColorStops(),i=this.createLinearGradient(e.x,e.y,n.x,n.y);if(r){for(var o=0;o<r.length;o+=2)i.addColorStop(r[o],r[o+1]);this.setAttr("strokeStyle",i)}},e.prototype._stroke=function(t){var e=t.dash(),n=t.getStrokeScaleEnabled();if(t.hasStroke()){if(!n){this.save();var r=this.getCanvas().getPixelRatio();this.setTransform(r,0,0,r,0,0)}this._applyLineCap(t),e&&t.dashEnabled()&&(this.setLineDash(e),this.setAttr("lineDashOffset",t.dashOffset())),this.setAttr("lineWidth",t.strokeWidth()),t.getShadowForStrokeEnabled()||this.setAttr("shadowColor","rgba(0,0,0,0)"),t.getStrokeLinearGradientColorStops()?this._strokeLinearGradient(t):this.setAttr("strokeStyle",t.stroke()),t._strokeFunc(this),n||this.restore()}},e.prototype._applyShadow=function(t){var e=o.Util,n=e.get(t.getShadowRGBA(),"black"),r=e.get(t.getShadowBlur(),5),i=e.get(t.getShadowOffset(),{x:0,y:0}),a=t.getAbsoluteScale(),s=this.canvas.getPixelRatio(),h=a.x*s,u=a.y*s;this.setAttr("shadowColor",n),this.setAttr("shadowBlur",r*Math.min(Math.abs(h),Math.abs(u))),this.setAttr("shadowOffsetX",i.x*h),this.setAttr("shadowOffsetY",i.y*u)},e}(h);e.SceneContext=u;var c=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return i(e,t),e.prototype._fill=function(t){this.save(),this.setAttr("fillStyle",t.colorKey),t._fillFuncHit(this),this.restore()},e.prototype.strokeShape=function(t){t.hasHitStroke()&&this._stroke(t)},e.prototype._stroke=function(t){if(t.hasHitStroke()){var e=t.getStrokeScaleEnabled();if(!e){this.save();var n=this.getCanvas().getPixelRatio();this.setTransform(n,0,0,n,0,0)}this._applyLineCap(t);var r=t.hitStrokeWidth(),i="auto"===r?t.strokeWidth():r;this.setAttr("lineWidth",i),this.setAttr("strokeStyle",t.colorKey),t._strokeFuncHit(this),e||this.restore()}},e}(h);e.HitContext=c},210:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.DD=void 0;var r=n(4417),i=n(8588);e.DD={get isDragging(){var t=!1;return e.DD._dragElements.forEach((function(e){"dragging"===e.dragStatus&&(t=!0)})),t},justDragged:!1,get node(){var t;return e.DD._dragElements.forEach((function(e){t=e.node})),t},_dragElements:new Map,_drag:function(t){var n=[];e.DD._dragElements.forEach((function(e,r){var o=e.node,a=o.getStage();a.setPointersPositions(t),void 0===e.pointerId&&(e.pointerId=i.Util._getFirstPointerId(t));var s=a._changedPointerPositions.find((function(t){return t.id===e.pointerId}));if(s){if("dragging"!==e.dragStatus){var h=o.dragDistance();if(Math.max(Math.abs(s.x-e.startPointerPos.x),Math.abs(s.y-e.startPointerPos.y))<h)return;if(o.startDrag({evt:t}),!o.isDragging())return}o._setDragPosition(t,e),n.push(o)}})),n.forEach((function(e){e.fire("dragmove",{type:"dragmove",target:e,evt:t},!0)}))},_endDragBefore:function(t){e.DD._dragElements.forEach((function(n,i){var o=n.node.getStage();if(t&&o.setPointersPositions(t),o._changedPointerPositions.find((function(t){return t.id===n.pointerId}))){"dragging"!==n.dragStatus&&"stopped"!==n.dragStatus||(e.DD.justDragged=!0,r.Konva.listenClickTap=!1,n.dragStatus="stopped");var a=n.node.getLayer()||n.node instanceof r.Konva.Stage&&n.node;a&&a.batchDraw()}}))},_endDragAfter:function(t){e.DD._dragElements.forEach((function(n,r){"stopped"===n.dragStatus&&n.node.fire("dragend",{type:"dragend",target:n.node,evt:t},!0),"dragging"!==n.dragStatus&&e.DD._dragElements.delete(r)}))}},r.Konva.isBrowser&&(window.addEventListener("mouseup",e.DD._endDragBefore,!0),window.addEventListener("touchend",e.DD._endDragBefore,!0),window.addEventListener("mousemove",e.DD._drag),window.addEventListener("touchmove",e.DD._drag),window.addEventListener("mouseup",e.DD._endDragAfter,!1),window.addEventListener("touchend",e.DD._endDragAfter,!1))},1455:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.Factory=void 0;var r=n(8588),i=n(3774),o="get",a="set";e.Factory={addGetterSetter:function(t,n,r,i,o){e.Factory.addGetter(t,n,r),e.Factory.addSetter(t,n,i,o),e.Factory.addOverloadedGetterSetter(t,n)},addGetter:function(t,e,n){var i=o+r.Util._capitalize(e);t.prototype[i]=t.prototype[i]||function(){var t=this.attrs[e];return void 0===t?n:t}},addSetter:function(t,n,i,o){var s=a+r.Util._capitalize(n);t.prototype[s]||e.Factory.overWriteSetter(t,n,i,o)},overWriteSetter:function(t,e,n,i){var o=a+r.Util._capitalize(e);t.prototype[o]=function(t){return n&&null!=t&&(t=n.call(this,t,e)),this._setAttr(e,t),i&&i.call(this),this}},addComponentsGetterSetter:function(t,n,s,h,u){var c,l,f=s.length,p=r.Util._capitalize,d=o+p(n),g=a+p(n);t.prototype[d]=function(){var t={};for(c=0;c<f;c++)t[l=s[c]]=this.getAttr(n+p(l));return t};var v=i.getComponentValidator(s);t.prototype[g]=function(t){var e,r=this.attrs[n];for(e in h&&(t=h.call(this,t)),v&&v.call(this,t,n),t)t.hasOwnProperty(e)&&this._setAttr(n+p(e),t[e]);return this._fireChangeEvent(n,r,t),u&&u.call(this),this},e.Factory.addOverloadedGetterSetter(t,n)},addOverloadedGetterSetter:function(t,e){var n=r.Util._capitalize(e),i=a+n,s=o+n;t.prototype[e]=function(){return arguments.length?(this[i](arguments[0]),this):this[s]()}},addDeprecatedGetterSetter:function(t,n,i,a){r.Util.error("Adding deprecated "+n);var s=o+r.Util._capitalize(n),h=n+" property is deprecated and will be removed soon. Look at Konva change log for more information.";t.prototype[s]=function(){r.Util.error(h);var t=this.attrs[n];return void 0===t?i:t},e.Factory.addSetter(t,n,a,(function(){r.Util.error(h)})),e.Factory.addOverloadedGetterSetter(t,n)},backCompat:function(t,e){r.Util.each(e,(function(e,n){var i=t.prototype[n],s=o+r.Util._capitalize(e),h=a+r.Util._capitalize(e);function u(){i.apply(this,arguments),r.Util.error('"'+e+'" method is deprecated and will be removed soon. Use ""'+n+'" instead.')}t.prototype[e]=u,t.prototype[s]=u,t.prototype[h]=u}))},afterSetFilter:function(){this._filterUpToDate=!1}}},3980:function(t,e,n){"use strict";var r,i=this&&this.__extends||(r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])})(t,e)},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});Object.defineProperty(e,"__esModule",{value:!0}),e.FastLayer=void 0;var o=n(8588),a=n(4415),s=n(4417),h=function(t){function e(e){var n=t.call(this,e)||this;return n.listening(!1),o.Util.warn('Konva.Fast layer is deprecated. Please use "new Konva.Layer({ listening: false })" instead.'),n}return i(e,t),e}(a.Layer);e.FastLayer=h,h.prototype.nodeType="FastLayer",s._registerNode(h),o.Collection.mapMethods(h)},4417:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e._registerNode=e._NODES_REGISTRY=e.Konva=e.glob=e._parseUA=void 0;var r=Math.PI/180;var i=function(t){var e=t.indexOf("msie ");if(e>0)return parseInt(t.substring(e+5,t.indexOf(".",e)),10);if(t.indexOf("trident/")>0){var n=t.indexOf("rv:");return parseInt(t.substring(n+3,t.indexOf(".",n)),10)}var r=t.indexOf("edge/");return r>0&&parseInt(t.substring(r+5,t.indexOf(".",r)),10)};e._parseUA=function(t){var e=t.toLowerCase(),n=/(chrome)[ /]([\w.]+)/.exec(e)||/(webkit)[ /]([\w.]+)/.exec(e)||/(opera)(?:.*version|)[ /]([\w.]+)/.exec(e)||/(msie) ([\w.]+)/.exec(e)||e.indexOf("compatible")<0&&/(mozilla)(?:.*? rv:([\w.]+)|)/.exec(e)||[],r=!!t.match(/Android|BlackBerry|iPhone|iPad|iPod|Opera Mini|IEMobile/i),o=!!t.match(/IEMobile/i);return{browser:n[1]||"",version:n[2]||"0",isIE:i(e),mobile:r,ieMobile:o}},e.glob=void 0!==n.g?n.g:"undefined"!=typeof window?window:"undefined"!=typeof WorkerGlobalScope?self:{},e.Konva={_global:e.glob,version:"7.2.5",isBrowser:"undefined"!=typeof window&&("[object Window]"==={}.toString.call(window)||"[object global]"==={}.toString.call(window)),isUnminified:/param/.test(function(t){}.toString()),dblClickWindow:400,getAngle:function(t){return e.Konva.angleDeg?t*r:t},enableTrace:!1,_pointerEventsEnabled:!1,hitOnDragEnabled:!1,captureTouchEventsEnabled:!1,listenClickTap:!1,inDblClickWindow:!1,pixelRatio:void 0,dragDistance:3,angleDeg:!0,showWarnings:!0,dragButtons:[0,1],isDragging:function(){return e.Konva.DD.isDragging},isDragReady:function(){return!!e.Konva.DD.node},UA:e._parseUA(e.glob.navigator&&e.glob.navigator.userAgent||""),document:e.glob.document,_injectGlobal:function(t){e.glob.Konva=t},_parseUA:e._parseUA},e._NODES_REGISTRY={};e._registerNode=function(t){e._NODES_REGISTRY[t.prototype.getClassName()]=t,e.Konva[t.prototype.getClassName()]=t}},8985:function(t,e,n){"use strict";var r,i=this&&this.__extends||(r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])})(t,e)},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});Object.defineProperty(e,"__esModule",{value:!0}),e.Group=void 0;var o=n(8588),a=n(8783),s=n(4417),h=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return i(e,t),e.prototype._validateAdd=function(t){var e=t.getType();"Group"!==e&&"Shape"!==e&&o.Util.throw("You may only add groups and shapes to groups.")},e}(a.Container);e.Group=h,h.prototype.nodeType="Group",s._registerNode(h),o.Collection.mapMethods(h)},4415:function(t,e,n){"use strict";var r,i=this&&this.__extends||(r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])})(t,e)},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});Object.defineProperty(e,"__esModule",{value:!0}),e.Layer=void 0;var o=n(8588),a=n(8783),s=n(7939),h=n(1455),u=n(4842),c=n(3774),l=n(7955),f=n(4417),p=[{x:0,y:0},{x:-1,y:-1},{x:1,y:-1},{x:1,y:1},{x:-1,y:1}],d=p.length,g=function(t){function e(e){var n=t.call(this,e)||this;return n.canvas=new u.SceneCanvas,n.hitCanvas=new u.HitCanvas({pixelRatio:1}),n._waitingForDraw=!1,n.on("visibleChange.konva",n._checkVisibility),n._checkVisibility(),n.on("imageSmoothingEnabledChange.konva",n._setSmoothEnabled),n._setSmoothEnabled(),n}return i(e,t),e.prototype.createPNGStream=function(){return this.canvas._canvas.createPNGStream()},e.prototype.getCanvas=function(){return this.canvas},e.prototype.getHitCanvas=function(){return this.hitCanvas},e.prototype.getContext=function(){return this.getCanvas().getContext()},e.prototype.clear=function(t){return this.getContext().clear(t),this.getHitCanvas().getContext().clear(t),this},e.prototype.setZIndex=function(e){t.prototype.setZIndex.call(this,e);var n=this.getStage();return n&&(n.content.removeChild(this.getCanvas()._canvas),e<n.children.length-1?n.content.insertBefore(this.getCanvas()._canvas,n.children[e+1].getCanvas()._canvas):n.content.appendChild(this.getCanvas()._canvas)),this},e.prototype.moveToTop=function(){s.Node.prototype.moveToTop.call(this);var t=this.getStage();return t&&(t.content.removeChild(this.getCanvas()._canvas),t.content.appendChild(this.getCanvas()._canvas)),!0},e.prototype.moveUp=function(){if(!s.Node.prototype.moveUp.call(this))return!1;var t=this.getStage();return!!t&&(t.content.removeChild(this.getCanvas()._canvas),this.index<t.children.length-1?t.content.insertBefore(this.getCanvas()._canvas,t.children[this.index+1].getCanvas()._canvas):t.content.appendChild(this.getCanvas()._canvas),!0)},e.prototype.moveDown=function(){if(s.Node.prototype.moveDown.call(this)){var t=this.getStage();if(t){var e=t.children;t.content.removeChild(this.getCanvas()._canvas),t.content.insertBefore(this.getCanvas()._canvas,e[this.index+1].getCanvas()._canvas)}return!0}return!1},e.prototype.moveToBottom=function(){if(s.Node.prototype.moveToBottom.call(this)){var t=this.getStage();if(t){var e=t.children;t.content.removeChild(this.getCanvas()._canvas),t.content.insertBefore(this.getCanvas()._canvas,e[1].getCanvas()._canvas)}return!0}return!1},e.prototype.getLayer=function(){return this},e.prototype.remove=function(){var t=this.getCanvas()._canvas;return s.Node.prototype.remove.call(this),t&&t.parentNode&&o.Util._isInDocument(t)&&t.parentNode.removeChild(t),this},e.prototype.getStage=function(){return this.parent},e.prototype.setSize=function(t){var e=t.width,n=t.height;return this.canvas.setSize(e,n),this.hitCanvas.setSize(e,n),this._setSmoothEnabled(),this},e.prototype._validateAdd=function(t){var e=t.getType();"Group"!==e&&"Shape"!==e&&o.Util.throw("You may only add groups and shapes to a layer.")},e.prototype._toKonvaCanvas=function(t){return(t=t||{}).width=t.width||this.getWidth(),t.height=t.height||this.getHeight(),t.x=void 0!==t.x?t.x:this.x(),t.y=void 0!==t.y?t.y:this.y(),s.Node.prototype._toKonvaCanvas.call(this,t)},e.prototype._checkVisibility=function(){var t=this.visible();this.canvas._canvas.style.display=t?"block":"none"},e.prototype._setSmoothEnabled=function(){this.getContext()._context.imageSmoothingEnabled=this.imageSmoothingEnabled()},e.prototype.getWidth=function(){if(this.parent)return this.parent.width()},e.prototype.setWidth=function(){o.Util.warn('Can not change width of layer. Use "stage.width(value)" function instead.')},e.prototype.getHeight=function(){if(this.parent)return this.parent.height()},e.prototype.setHeight=function(){o.Util.warn('Can not change height of layer. Use "stage.height(value)" function instead.')},e.prototype.batchDraw=function(){var t=this;return this._waitingForDraw||(this._waitingForDraw=!0,o.Util.requestAnimFrame((function(){t.draw(),t._waitingForDraw=!1}))),this},e.prototype.getIntersection=function(t,e){if(!this.isListening()||!this.isVisible())return null;for(var n=1,r=!1;;){for(var i=0;i<d;i++){var o=p[i],a=this._getIntersection({x:t.x+o.x*n,y:t.y+o.y*n}),s=a.shape;if(s&&e)return s.findAncestor(e,!0);if(s)return s;if(r=!!a.antialiased,!a.antialiased)break}if(!r)return null;n+=1}},e.prototype._getIntersection=function(t){var e=this.hitCanvas.pixelRatio,n=this.hitCanvas.context.getImageData(Math.round(t.x*e),Math.round(t.y*e),1,1).data,r=n[3];if(255===r){var i=o.Util._rgbToHex(n[0],n[1],n[2]),a=l.shapes["#"+i];return a?{shape:a}:{antialiased:!0}}return r>0?{antialiased:!0}:{}},e.prototype.drawScene=function(t,e){var n=this.getLayer(),r=t||n&&n.getCanvas();return this._fire("beforeDraw",{node:this}),this.clearBeforeDraw()&&r.getContext().clear(),a.Container.prototype.drawScene.call(this,r,e),this._fire("draw",{node:this}),this},e.prototype.drawHit=function(t,e){var n=this.getLayer(),r=t||n&&n.hitCanvas;return n&&n.clearBeforeDraw()&&n.getHitCanvas().getContext().clear(),a.Container.prototype.drawHit.call(this,r,e),this},e.prototype.enableHitGraph=function(){return this.hitGraphEnabled(!0),this},e.prototype.disableHitGraph=function(){return this.hitGraphEnabled(!1),this},e.prototype.setHitGraphEnabled=function(t){o.Util.warn("hitGraphEnabled method is deprecated. Please use layer.listening() instead."),this.listening(t)},e.prototype.getHitGraphEnabled=function(t){return o.Util.warn("hitGraphEnabled method is deprecated. Please use layer.listening() instead."),this.listening()},e.prototype.toggleHitCanvas=function(){if(this.parent){var t=this.parent;!!this.hitCanvas._canvas.parentNode?t.content.removeChild(this.hitCanvas._canvas):t.content.appendChild(this.hitCanvas._canvas)}},e}(a.Container);e.Layer=g,g.prototype.nodeType="Layer",f._registerNode(g),h.Factory.addGetterSetter(g,"imageSmoothingEnabled",!0),h.Factory.addGetterSetter(g,"clearBeforeDraw",!0),h.Factory.addGetterSetter(g,"hitGraphEnabled",!0,c.getBooleanValidator()),o.Collection.mapMethods(g)},7939:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.Node=e._removeName=e._addName=e._removeId=e.names=e.ids=void 0;var r=n(8588),i=n(1455),o=n(4842),a=n(4417),s=n(210),h=n(3774);e.ids={},e.names={};e._removeId=function(t,n){t&&e.ids[t]===n&&delete e.ids[t]};e._addName=function(t,n){n&&(e.names[n]||(e.names[n]=[]),e.names[n].push(t))};e._removeName=function(t,n){if(t){var r=e.names[t];if(r){for(var i=0;i<r.length;i++){r[i]._id===n&&r.splice(i,1)}0===r.length&&delete e.names[t]}}};var u="absoluteOpacity",c="allEventListeners",l="absoluteTransform",f="absoluteScale",p="canvas",d="listening",g="mouseenter",v="mouseleave",y="Shape",_=" ",m="stage",b="transform",x="visible",w=["xChange.konva","yChange.konva","scaleXChange.konva","scaleYChange.konva","skewXChange.konva","skewYChange.konva","rotationChange.konva","offsetXChange.konva","offsetYChange.konva","transformsEnabledChange.konva"].join(_),S=(["scaleXChange.konva","scaleYChange.konva"].join(_),new r.Collection),C=1,P=function(){function t(t){this._id=C++,this.eventListeners={},this.attrs={},this.index=0,this._allEventListeners=null,this.parent=null,this._cache=new Map,this._attachedDepsListeners=new Map,this._lastPos=null,this._batchingTransformChange=!1,this._needClearTransformCache=!1,this._filterUpToDate=!1,this._isUnderCache=!1,this.children=S,this._dragEventId=null,this._shouldFireChangeEvents=!1,this.setAttrs(t),this._shouldFireChangeEvents=!0}return t.prototype.hasChildren=function(){return!1},t.prototype.getChildren=function(){return S},t.prototype._clearCache=function(t){t!==b&&t!==l||!this._cache.get(t)?t?this._cache.delete(t):this._cache.clear():this._cache.get(t).dirty=!0},t.prototype._getCache=function(t,e){var n=this._cache.get(t);return(void 0===n||(t===b||t===l)&&!0===n.dirty)&&(n=e.call(this),this._cache.set(t,n)),n},t.prototype._calculate=function(t,e,n){var r=this;if(!this._attachedDepsListeners.get(t)){var i=e.map((function(t){return t+"Change.konva"})).join(_);this.on(i,(function(){r._clearCache(t)})),this._attachedDepsListeners.set(t,!0)}return this._getCache(t,n)},t.prototype._getCanvasCache=function(){return this._cache.get(p)},t.prototype._clearSelfAndDescendantCache=function(t,e){this._clearCache(t),e&&t===l&&this.fire("_clearTransformCache"),this.isCached()||this.children&&this.children.each((function(e){e._clearSelfAndDescendantCache(t,!0)}))},t.prototype.clearCache=function(){return this._cache.delete(p),this._clearSelfAndDescendantCache(),this},t.prototype.cache=function(t){var e=t||{},n={};void 0!==e.x&&void 0!==e.y&&void 0!==e.width&&void 0!==e.height||(n=this.getClientRect({skipTransform:!0,relativeTo:this.getParent()}));var i=Math.ceil(e.width||n.width),a=Math.ceil(e.height||n.height),s=e.pixelRatio,h=void 0===e.x?n.x:e.x,c=void 0===e.y?n.y:e.y,l=e.offset||0,d=e.drawBorder||!1;if(i&&a){i+=2*l,a+=2*l,h-=l,c-=l;var g=new o.SceneCanvas({pixelRatio:s,width:i,height:a}),v=new o.SceneCanvas({pixelRatio:s,width:0,height:0}),y=new o.HitCanvas({pixelRatio:1,width:i,height:a}),_=g.getContext(),m=y.getContext();return y.isCache=!0,g.isCache=!0,this._cache.delete("canvas"),this._filterUpToDate=!1,!1===e.imageSmoothingEnabled&&(g.getContext()._context.imageSmoothingEnabled=!1,v.getContext()._context.imageSmoothingEnabled=!1),_.save(),m.save(),_.translate(-h,-c),m.translate(-h,-c),this._isUnderCache=!0,this._clearSelfAndDescendantCache(u),this._clearSelfAndDescendantCache(f),this.drawScene(g,this),this.drawHit(y,this),this._isUnderCache=!1,_.restore(),m.restore(),d&&(_.save(),_.beginPath(),_.rect(0,0,i,a),_.closePath(),_.setAttr("strokeStyle","red"),_.setAttr("lineWidth",5),_.stroke(),_.restore()),this._cache.set(p,{scene:g,filter:v,hit:y,x:h,y:c}),this}r.Util.error("Can not cache the node. Width or height of the node equals 0. Caching is skipped.")},t.prototype.isCached=function(){return this._cache.has("canvas")},t.prototype.getClientRect=function(t){throw new Error('abstract "getClientRect" method call')},t.prototype._transformedRect=function(t,e){var n,r,i,o,a=[{x:t.x,y:t.y},{x:t.x+t.width,y:t.y},{x:t.x+t.width,y:t.y+t.height},{x:t.x,y:t.y+t.height}],s=this.getAbsoluteTransform(e);return a.forEach((function(t){var e=s.point(t);void 0===n&&(n=i=e.x,r=o=e.y),n=Math.min(n,e.x),r=Math.min(r,e.y),i=Math.max(i,e.x),o=Math.max(o,e.y)})),{x:n,y:r,width:i-n,height:o-r}},t.prototype._drawCachedSceneCanvas=function(t){t.save(),t._applyOpacity(this),t._applyGlobalCompositeOperation(this);var e=this._getCanvasCache();t.translate(e.x,e.y);var n=this._getCachedSceneCanvas(),r=n.pixelRatio;t.drawImage(n._canvas,0,0,n.width/r,n.height/r),t.restore()},t.prototype._drawCachedHitCanvas=function(t){var e=this._getCanvasCache(),n=e.hit;t.save(),t.translate(e.x,e.y),t.drawImage(n._canvas,0,0),t.restore()},t.prototype._getCachedSceneCanvas=function(){var t,e,n,i,o=this.filters(),a=this._getCanvasCache(),s=a.scene,h=a.filter,u=h.getContext();if(o){if(!this._filterUpToDate){var c=s.pixelRatio;h.setSize(s.width/s.pixelRatio,s.height/s.pixelRatio);try{for(t=o.length,u.clear(),u.drawImage(s._canvas,0,0,s.getWidth()/c,s.getHeight()/c),e=u.getImageData(0,0,h.getWidth(),h.getHeight()),n=0;n<t;n++)"function"==typeof(i=o[n])?(i.call(this,e),u.putImageData(e,0,0)):r.Util.error("Filter should be type of function, but got "+typeof i+" instead. Please check correct filters")}catch(t){r.Util.error("Unable to apply filter. "+t.message+" This post my help you https://konvajs.org/docs/posts/Tainted_Canvas.html.")}this._filterUpToDate=!0}return h}return s},t.prototype.on=function(t,e){if(this._cache&&this._cache.delete(c),3===arguments.length)return this._delegate.apply(this,arguments);var n,r,i,o,a=t.split(_),s=a.length;for(n=0;n<s;n++)i=(r=a[n].split("."))[0],o=r[1]||"",this.eventListeners[i]||(this.eventListeners[i]=[]),this.eventListeners[i].push({name:o,handler:e});return this},t.prototype.off=function(t,e){var n,r,i,o,a,s=(t||"").split(_),h=s.length;if(this._cache&&this._cache.delete(c),!t)for(r in this.eventListeners)this._off(r);for(n=0;n<h;n++)if(o=(i=s[n].split("."))[0],a=i[1],o)this.eventListeners[o]&&this._off(o,a,e);else for(r in this.eventListeners)this._off(r,a,e);return this},t.prototype.dispatchEvent=function(t){var e={target:this,type:t.type,evt:t};return this.fire(t.type,e),this},t.prototype.addEventListener=function(t,e){return this.on(t,(function(t){e.call(this,t.evt)})),this},t.prototype.removeEventListener=function(t){return this.off(t),this},t.prototype._delegate=function(t,e,n){var i=this;this.on(t,(function(t){for(var o=t.target.findAncestors(e,!0,i),a=0;a<o.length;a++)(t=r.Util.cloneObject(t)).currentTarget=o[a],n.call(o[a],t)}))},t.prototype.remove=function(){return this.isDragging()&&this.stopDrag(),s.DD._dragElements.delete(this._id),this._remove(),this},t.prototype._clearCaches=function(){this._clearSelfAndDescendantCache(l),this._clearSelfAndDescendantCache(u),this._clearSelfAndDescendantCache(f),this._clearSelfAndDescendantCache(m),this._clearSelfAndDescendantCache(x),this._clearSelfAndDescendantCache(d)},t.prototype._remove=function(){this._clearCaches();var t=this.getParent();t&&t.children&&(t.children.splice(this.index,1),t._setChildrenIndices(),this.parent=null)},t.prototype.destroy=function(){e._removeId(this.id(),this);for(var t=(this.name()||"").split(/\s/g),n=0;n<t.length;n++){var r=t[n];e._removeName(r,this._id)}return this.remove(),this},t.prototype.getAttr=function(t){var e="get"+r.Util._capitalize(t);return r.Util._isFunction(this[e])?this[e]():this.attrs[t]},t.prototype.getAncestors=function(){for(var t=this.getParent(),e=new r.Collection;t;)e.push(t),t=t.getParent();return e},t.prototype.getAttrs=function(){return this.attrs||{}},t.prototype.setAttrs=function(t){var e=this;return this._batchTransformChanges((function(){var n,i;if(!t)return e;for(n in t)"children"!==n&&(i="set"+r.Util._capitalize(n),r.Util._isFunction(e[i])?e[i](t[n]):e._setAttr(n,t[n]))})),this},t.prototype.isListening=function(){return this._getCache(d,this._isListening)},t.prototype._isListening=function(t){if(!this.listening())return!1;var e=this.getParent();return!e||e===t||this===t||e._isListening(t)},t.prototype.isVisible=function(){return this._getCache(x,this._isVisible)},t.prototype._isVisible=function(t){if(!this.visible())return!1;var e=this.getParent();return!e||e===t||this===t||e._isVisible(t)},t.prototype.shouldDrawHit=function(t,e){if(void 0===e&&(e=!1),t)return this._isVisible(t)&&this._isListening(t);var n=this.getLayer(),r=!1;s.DD._dragElements.forEach((function(t){"dragging"===t.dragStatus&&("Stage"===t.node.nodeType||t.node.getLayer()===n)&&(r=!0)}));var i=!e&&!a.Konva.hitOnDragEnabled&&r;return this.isListening()&&this.isVisible()&&!i},t.prototype.show=function(){return this.visible(!0),this},t.prototype.hide=function(){return this.visible(!1),this},t.prototype.getZIndex=function(){return this.index||0},t.prototype.getAbsoluteZIndex=function(){var t,e,n,r,i=this.getDepth(),o=this,a=0;return"Stage"!==o.nodeType&&function s(h){for(t=[],e=h.length,n=0;n<e;n++)r=h[n],a++,r.nodeType!==y&&(t=t.concat(r.getChildren().toArray())),r._id===o._id&&(n=e);t.length>0&&t[0].getDepth()<=i&&s(t)}(o.getStage().getChildren()),a},t.prototype.getDepth=function(){for(var t=0,e=this.parent;e;)t++,e=e.parent;return t},t.prototype._batchTransformChanges=function(t){this._batchingTransformChange=!0,t(),this._batchingTransformChange=!1,this._needClearTransformCache&&(this._clearCache(b),this._clearSelfAndDescendantCache(l,!0)),this._needClearTransformCache=!1},t.prototype.setPosition=function(t){var e=this;return this._batchTransformChanges((function(){e.x(t.x),e.y(t.y)})),this},t.prototype.getPosition=function(){return{x:this.x(),y:this.y()}},t.prototype.getAbsolutePosition=function(t){for(var e=!1,n=this.parent;n;){if(n.isCached()){e=!0;break}n=n.parent}e&&!t&&(t=!0);var i=this.getAbsoluteTransform(t).getMatrix(),o=new r.Transform,a=this.offset();return o.m=i.slice(),o.translate(a.x,a.y),o.getTranslation()},t.prototype.setAbsolutePosition=function(t){var e=this._clearTransform();this.attrs.x=e.x,this.attrs.y=e.y,delete e.x,delete e.y,this._clearCache(b);var n=this._getAbsoluteTransform().copy();return n.invert(),n.translate(t.x,t.y),t={x:this.attrs.x+n.getTranslation().x,y:this.attrs.y+n.getTranslation().y},this._setTransform(e),this.setPosition({x:t.x,y:t.y}),this._clearCache(b),this._clearSelfAndDescendantCache(l),this},t.prototype._setTransform=function(t){var e;for(e in t)this.attrs[e]=t[e]},t.prototype._clearTransform=function(){var t={x:this.x(),y:this.y(),rotation:this.rotation(),scaleX:this.scaleX(),scaleY:this.scaleY(),offsetX:this.offsetX(),offsetY:this.offsetY(),skewX:this.skewX(),skewY:this.skewY()};return this.attrs.x=0,this.attrs.y=0,this.attrs.rotation=0,this.attrs.scaleX=1,this.attrs.scaleY=1,this.attrs.offsetX=0,this.attrs.offsetY=0,this.attrs.skewX=0,this.attrs.skewY=0,t},t.prototype.move=function(t){var e=t.x,n=t.y,r=this.x(),i=this.y();return void 0!==e&&(r+=e),void 0!==n&&(i+=n),this.setPosition({x:r,y:i}),this},t.prototype._eachAncestorReverse=function(t,e){var n,r,i=[],o=this.getParent();if(!e||e._id!==this._id){for(i.unshift(this);o&&(!e||o._id!==e._id);)i.unshift(o),o=o.parent;for(n=i.length,r=0;r<n;r++)t(i[r])}},t.prototype.rotate=function(t){return this.rotation(this.rotation()+t),this},t.prototype.moveToTop=function(){if(!this.parent)return r.Util.warn("Node has no parent. moveToTop function is ignored."),!1;var t=this.index;return this.parent.children.splice(t,1),this.parent.children.push(this),this.parent._setChildrenIndices(),!0},t.prototype.moveUp=function(){if(!this.parent)return r.Util.warn("Node has no parent. moveUp function is ignored."),!1;var t=this.index;return t<this.parent.getChildren().length-1&&(this.parent.children.splice(t,1),this.parent.children.splice(t+1,0,this),this.parent._setChildrenIndices(),!0)},t.prototype.moveDown=function(){if(!this.parent)return r.Util.warn("Node has no parent. moveDown function is ignored."),!1;var t=this.index;return t>0&&(this.parent.children.splice(t,1),this.parent.children.splice(t-1,0,this),this.parent._setChildrenIndices(),!0)},t.prototype.moveToBottom=function(){if(!this.parent)return r.Util.warn("Node has no parent. moveToBottom function is ignored."),!1;var t=this.index;return t>0&&(this.parent.children.splice(t,1),this.parent.children.unshift(this),this.parent._setChildrenIndices(),!0)},t.prototype.setZIndex=function(t){if(!this.parent)return r.Util.warn("Node has no parent. zIndex parameter is ignored."),this;(t<0||t>=this.parent.children.length)&&r.Util.warn("Unexpected value "+t+" for zIndex property. zIndex is just index of a node in children of its parent. Expected value is from 0 to "+(this.parent.children.length-1)+".");var e=this.index;return this.parent.children.splice(e,1),this.parent.children.splice(t,0,this),this.parent._setChildrenIndices(),this},t.prototype.getAbsoluteOpacity=function(){return this._getCache(u,this._getAbsoluteOpacity)},t.prototype._getAbsoluteOpacity=function(){var t=this.opacity(),e=this.getParent();return e&&!e._isUnderCache&&(t*=e.getAbsoluteOpacity()),t},t.prototype.moveTo=function(t){return this.getParent()!==t&&(this._remove(),t.add(this)),this},t.prototype.toObject=function(){var t,e,n,i,o={},a=this.getAttrs();for(t in o.attrs={},a)e=a[t],r.Util.isObject(e)&&!r.Util._isPlainObject(e)&&!r.Util._isArray(e)||(n="function"==typeof this[t]&&this[t],delete a[t],i=n?n.call(this):null,a[t]=e,i!==e&&(o.attrs[t]=e));return o.className=this.getClassName(),r.Util._prepareToStringify(o)},t.prototype.toJSON=function(){return JSON.stringify(this.toObject())},t.prototype.getParent=function(){return this.parent},t.prototype.findAncestors=function(t,e,n){var r=[];e&&this._isMatch(t)&&r.push(this);for(var i=this.parent;i;){if(i===n)return r;i._isMatch(t)&&r.push(i),i=i.parent}return r},t.prototype.isAncestorOf=function(t){return!1},t.prototype.findAncestor=function(t,e,n){return this.findAncestors(t,e,n)[0]},t.prototype._isMatch=function(t){if(!t)return!1;if("function"==typeof t)return t(this);var e,n,i=t.replace(/ /g,"").split(","),o=i.length;for(e=0;e<o;e++)if(n=i[e],r.Util.isValidSelector(n)||(r.Util.warn('Selector "'+n+'" is invalid. Allowed selectors examples are "#foo", ".bar" or "Group".'),r.Util.warn('If you have a custom shape with such className, please change it to start with upper letter like "Triangle".'),r.Util.warn("Konva is awesome, right?")),"#"===n.charAt(0)){if(this.id()===n.slice(1))return!0}else if("."===n.charAt(0)){if(this.hasName(n.slice(1)))return!0}else if(this.className===n||this.nodeType===n)return!0;return!1},t.prototype.getLayer=function(){var t=this.getParent();return t?t.getLayer():null},t.prototype.getStage=function(){return this._getCache(m,this._getStage)},t.prototype._getStage=function(){var t=this.getParent();return t?t.getStage():void 0},t.prototype.fire=function(t,e,n){return void 0===e&&(e={}),e.target=e.target||this,n?this._fireAndBubble(t,e):this._fire(t,e),this},t.prototype.getAbsoluteTransform=function(t){return t?this._getAbsoluteTransform(t):this._getCache(l,this._getAbsoluteTransform)},t.prototype._getAbsoluteTransform=function(t){var e;if(t)return e=new r.Transform,this._eachAncestorReverse((function(t){var n=t.transformsEnabled();"all"===n?e.multiply(t.getTransform()):"position"===n&&e.translate(t.x()-t.offsetX(),t.y()-t.offsetY())}),t),e;e=this._cache.get(l)||new r.Transform,this.parent?this.parent.getAbsoluteTransform().copyInto(e):e.reset();var n=this.transformsEnabled();if("all"===n)e.multiply(this.getTransform());else if("position"===n){var i=this.attrs.x||0,o=this.attrs.y||0,a=this.attrs.offsetX||0,s=this.attrs.offsetY||0;e.translate(i-a,o-s)}return e.dirty=!1,e},t.prototype.getAbsoluteScale=function(t){for(var e=this;e;)e._isUnderCache&&(t=e),e=e.getParent();var n=this.getAbsoluteTransform(t).decompose();return{x:n.scaleX,y:n.scaleY}},t.prototype.getAbsoluteRotation=function(){return this.getAbsoluteTransform().decompose().rotation},t.prototype.getTransform=function(){return this._getCache(b,this._getTransform)},t.prototype._getTransform=function(){var t,e,n=this._cache.get(b)||new r.Transform;n.reset();var i=this.x(),o=this.y(),s=a.Konva.getAngle(this.rotation()),h=null!==(t=this.attrs.scaleX)&&void 0!==t?t:1,u=null!==(e=this.attrs.scaleY)&&void 0!==e?e:1,c=this.attrs.skewX||0,l=this.attrs.skewY||0,f=this.attrs.offsetX||0,p=this.attrs.offsetY||0;return 0===i&&0===o||n.translate(i,o),0!==s&&n.rotate(s),0===c&&0===l||n.skew(c,l),1===h&&1===u||n.scale(h,u),0===f&&0===p||n.translate(-1*f,-1*p),n.dirty=!1,n},t.prototype.clone=function(t){var e,n,i,o,a,s=r.Util.cloneObject(this.attrs);for(e in t)s[e]=t[e];var h=new this.constructor(s);for(e in this.eventListeners)for(i=(n=this.eventListeners[e]).length,o=0;o<i;o++)(a=n[o]).name.indexOf("konva")<0&&(h.eventListeners[e]||(h.eventListeners[e]=[]),h.eventListeners[e].push(a));return h},t.prototype._toKonvaCanvas=function(t){t=t||{};var e=this.getClientRect(),n=this.getStage(),r=void 0!==t.x?t.x:e.x,i=void 0!==t.y?t.y:e.y,a=t.pixelRatio||1,s=new o.SceneCanvas({width:t.width||e.width||(n?n.width():0),height:t.height||e.height||(n?n.height():0),pixelRatio:a}),h=s.getContext();return h.save(),(r||i)&&h.translate(-1*r,-1*i),this.drawScene(s),h.restore(),s},t.prototype.toCanvas=function(t){return this._toKonvaCanvas(t)._canvas},t.prototype.toDataURL=function(t){var e=(t=t||{}).mimeType||null,n=t.quality||null,r=this._toKonvaCanvas(t).toDataURL(e,n);return t.callback&&t.callback(r),r},t.prototype.toImage=function(t){if(!t||!t.callback)throw"callback required for toImage method config argument";var e=t.callback;delete t.callback,r.Util._urlToImage(this.toDataURL(t),(function(t){e(t)}))},t.prototype.setSize=function(t){return this.width(t.width),this.height(t.height),this},t.prototype.getSize=function(){return{width:this.width(),height:this.height()}},t.prototype.getClassName=function(){return this.className||this.nodeType},t.prototype.getType=function(){return this.nodeType},t.prototype.getDragDistance=function(){return void 0!==this.attrs.dragDistance?this.attrs.dragDistance:this.parent?this.parent.getDragDistance():a.Konva.dragDistance},t.prototype._off=function(t,e,n){var r,i,o,a=this.eventListeners[t];for(r=0;r<a.length;r++)if(i=a[r].name,o=a[r].handler,!("konva"===i&&"konva"!==e||e&&i!==e||n&&n!==o)){if(a.splice(r,1),0===a.length){delete this.eventListeners[t];break}r--}},t.prototype._fireChangeEvent=function(t,e,n){this._fire(t+"Change",{oldVal:e,newVal:n})},t.prototype.setId=function(t){var n=this.id();return e._removeId(n,this),function(t,n){n&&(e.ids[n]=t)}(this,t),this._setAttr("id",t),this},t.prototype.setName=function(t){var n,r,i=(this.name()||"").split(/\s/g),o=(t||"").split(/\s/g);for(r=0;r<i.length;r++)n=i[r],-1===o.indexOf(n)&&n&&e._removeName(n,this._id);for(r=0;r<o.length;r++)n=o[r],-1===i.indexOf(n)&&n&&e._addName(this,n);return this._setAttr("name",t),this},t.prototype.addName=function(t){if(!this.hasName(t)){var e=this.name(),n=e?e+" "+t:t;this.setName(n)}return this},t.prototype.hasName=function(t){if(!t)return!1;var e=this.name();return!!e&&-1!==(e||"").split(/\s/g).indexOf(t)},t.prototype.removeName=function(t){var e=(this.name()||"").split(/\s/g),n=e.indexOf(t);return-1!==n&&(e.splice(n,1),this.setName(e.join(" "))),this},t.prototype.setAttr=function(t,e){var n=this["set"+r.Util._capitalize(t)];return r.Util._isFunction(n)?n.call(this,e):this._setAttr(t,e),this},t.prototype._setAttr=function(t,e,n){void 0===n&&(n=!1);var i=this.attrs[t];(i!==e||r.Util.isObject(e))&&(null==e?delete this.attrs[t]:this.attrs[t]=e,this._shouldFireChangeEvents&&this._fireChangeEvent(t,i,e))},t.prototype._setComponentAttr=function(t,e,n){var r;void 0!==n&&((r=this.attrs[t])||(this.attrs[t]=this.getAttr(t)),this.attrs[t][e]=n,this._fireChangeEvent(t,r,n))},t.prototype._fireAndBubble=function(t,e,n){if(e&&this.nodeType===y&&(e.target=this),!((t===g||t===v)&&(n&&(this===n||this.isAncestorOf&&this.isAncestorOf(n))||"Stage"===this.nodeType&&!n))){this._fire(t,e);var r=(t===g||t===v)&&n&&n.isAncestorOf&&n.isAncestorOf(this)&&!n.isAncestorOf(this.parent);(e&&!e.cancelBubble||!e)&&this.parent&&this.parent.isListening()&&!r&&(n&&n.parent?this._fireAndBubble.call(this.parent,t,e,n):this._fireAndBubble.call(this.parent,t,e))}},t.prototype._getProtoListeners=function(t){var e=this._cache.get(c);if(!e){e={};for(var n=Object.getPrototypeOf(this);n;)if(n.eventListeners){for(var r in n.eventListeners){var i=n.eventListeners[r],o=e[r]||[];e[r]=i.concat(o)}n=Object.getPrototypeOf(n)}else n=Object.getPrototypeOf(n);this._cache.set(c,e)}return e[t]},t.prototype._fire=function(t,e){(e=e||{}).currentTarget=this,e.type=t;var n=this._getProtoListeners(t);if(n)for(var r=0;r<n.length;r++)n[r].handler.call(this,e);var i=this.eventListeners[t];if(i)for(r=0;r<i.length;r++)i[r].handler.call(this,e)},t.prototype.draw=function(){return this.drawScene(),this.drawHit(),this},t.prototype._createDragElement=function(t){var e=t?t.pointerId:void 0,n=this.getStage(),r=this.getAbsolutePosition(),i=n._getPointerById(e)||n._changedPointerPositions[0]||r;s.DD._dragElements.set(this._id,{node:this,startPointerPos:i,offset:{x:i.x-r.x,y:i.y-r.y},dragStatus:"ready",pointerId:e})},t.prototype.startDrag=function(t,e){void 0===e&&(e=!0),s.DD._dragElements.has(this._id)||this._createDragElement(t),s.DD._dragElements.get(this._id).dragStatus="dragging",this.fire("dragstart",{type:"dragstart",target:this,evt:t&&t.evt},e)},t.prototype._setDragPosition=function(t,e){var n=this.getStage()._getPointerById(e.pointerId);if(n){var i={x:n.x-e.offset.x,y:n.y-e.offset.y},o=this.dragBoundFunc();if(void 0!==o){var a=o.call(this,i,t);a?i=a:r.Util.warn("dragBoundFunc did not return any value. That is unexpected behavior. You must return new absolute position from dragBoundFunc.")}this._lastPos&&this._lastPos.x===i.x&&this._lastPos.y===i.y||(this.setAbsolutePosition(i),this.getLayer()?this.getLayer().batchDraw():this.getStage()&&this.getStage().batchDraw()),this._lastPos=i}},t.prototype.stopDrag=function(t){var e=s.DD._dragElements.get(this._id);e&&(e.dragStatus="stopped"),s.DD._endDragBefore(t),s.DD._endDragAfter(t)},t.prototype.setDraggable=function(t){this._setAttr("draggable",t),this._dragChange()},t.prototype.isDragging=function(){var t=s.DD._dragElements.get(this._id);return!!t&&"dragging"===t.dragStatus},t.prototype._listenDrag=function(){this._dragCleanup(),this.on("mousedown.konva touchstart.konva",(function(t){var e=this;if((!(void 0!==t.evt.button)||a.Konva.dragButtons.indexOf(t.evt.button)>=0)&&!this.isDragging()){var n=!1;s.DD._dragElements.forEach((function(t){e.isAncestorOf(t.node)&&(n=!0)})),n||this._createDragElement(t)}}))},t.prototype._dragChange=function(){if(this.attrs.draggable)this._listenDrag();else{if(this._dragCleanup(),!this.getStage())return;var t=s.DD._dragElements.get(this._id),e=t&&"dragging"===t.dragStatus,n=t&&"ready"===t.dragStatus;e?this.stopDrag():n&&s.DD._dragElements.delete(this._id)}},t.prototype._dragCleanup=function(){this.off("mousedown.konva"),this.off("touchstart.konva")},t.create=function(t,e){return r.Util._isString(t)&&(t=JSON.parse(t)),this._createNode(t,e)},t._createNode=function(e,n){var i,o,s,h=t.prototype.getClassName.call(e),u=e.children;if(n&&(e.attrs.container=n),a._NODES_REGISTRY[h]||(r.Util.warn('Can not find a node with class name "'+h+'". Fallback to "Shape".'),h="Shape"),i=new(0,a._NODES_REGISTRY[h])(e.attrs),u)for(o=u.length,s=0;s<o;s++)i.add(t._createNode(u[s]));return i},t}();e.Node=P,P.prototype.nodeType="Node",P.prototype._attrsAffectingSize=[],P.prototype.eventListeners={},P.prototype.on.call(P.prototype,w,(function(){this._batchingTransformChange?this._needClearTransformCache=!0:(this._clearCache(b),this._clearSelfAndDescendantCache(l))})),P.prototype.on.call(P.prototype,"visibleChange.konva",(function(){this._clearSelfAndDescendantCache(x)})),P.prototype.on.call(P.prototype,"listeningChange.konva",(function(){this._clearSelfAndDescendantCache(d)})),P.prototype.on.call(P.prototype,"opacityChange.konva",(function(){this._clearSelfAndDescendantCache(u)}));var k=i.Factory.addGetterSetter;k(P,"zIndex"),k(P,"absolutePosition"),k(P,"position"),k(P,"x",0,h.getNumberValidator()),k(P,"y",0,h.getNumberValidator()),k(P,"globalCompositeOperation","source-over",h.getStringValidator()),k(P,"opacity",1,h.getNumberValidator()),k(P,"name","",h.getStringValidator()),k(P,"id","",h.getStringValidator()),k(P,"rotation",0,h.getNumberValidator()),i.Factory.addComponentsGetterSetter(P,"scale",["x","y"]),k(P,"scaleX",1,h.getNumberValidator()),k(P,"scaleY",1,h.getNumberValidator()),i.Factory.addComponentsGetterSetter(P,"skew",["x","y"]),k(P,"skewX",0,h.getNumberValidator()),k(P,"skewY",0,h.getNumberValidator()),i.Factory.addComponentsGetterSetter(P,"offset",["x","y"]),k(P,"offsetX",0,h.getNumberValidator()),k(P,"offsetY",0,h.getNumberValidator()),k(P,"dragDistance",null,h.getNumberValidator()),k(P,"width",0,h.getNumberValidator()),k(P,"height",0,h.getNumberValidator()),k(P,"listening",!0,h.getBooleanValidator()),k(P,"preventDefault",!0,h.getBooleanValidator()),k(P,"filters",null,(function(t){return this._filterUpToDate=!1,t})),k(P,"visible",!0,h.getBooleanValidator()),k(P,"transformsEnabled","all",h.getStringValidator()),k(P,"size"),k(P,"dragBoundFunc"),k(P,"draggable",!1,h.getBooleanValidator()),i.Factory.backCompat(P,{rotateDeg:"rotate",setRotationDeg:"setRotation",getRotationDeg:"getRotation"}),r.Collection.mapMethods(P)},8479:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.releaseCapture=e.setPointerCapture=e.hasPointerCapture=e.createEvent=e.getCapturedShape=void 0;var r=n(4417),i=new Map,o=void 0!==r.Konva._global.PointerEvent;function a(t){return{evt:t,pointerId:t.pointerId}}function s(t,e){var n=i.get(t);if(n){var r=n.getStage();r&&r.content,i.delete(t),o&&n._fire("lostpointercapture",a(new PointerEvent("lostpointercapture")))}}e.getCapturedShape=function(t){return i.get(t)},e.createEvent=a,e.hasPointerCapture=function(t,e){return i.get(t)===e},e.setPointerCapture=function(t,e){s(t),e.getStage()&&(i.set(t,e),o&&e._fire("gotpointercapture",a(new PointerEvent("gotpointercapture"))))},e.releaseCapture=s},7955:function(t,e,n){"use strict";var r,i=this&&this.__extends||(r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])})(t,e)},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});Object.defineProperty(e,"__esModule",{value:!0}),e.Shape=e.shapes=void 0;var o,a=n(8588),s=n(1455),h=n(7939),u=n(3774),c=n(4417),l=n(8479),f="hasShadow",p="shadowRGBA",d="patternImage",g="linearGradient",v="radialGradient";function y(){return o||(o=a.Util.createCanvasElement().getContext("2d"))}e.shapes={};var _=function(t){function n(n){for(var r,i=t.call(this,n)||this;!(r=a.Util.getRandomColor())||r in e.shapes;);return i.colorKey=r,e.shapes[r]=i,i}return i(n,t),n.prototype.getContext=function(){return this.getLayer().getContext()},n.prototype.getCanvas=function(){return this.getLayer().getCanvas()},n.prototype.getSceneFunc=function(){return this.attrs.sceneFunc||this._sceneFunc},n.prototype.getHitFunc=function(){return this.attrs.hitFunc||this._hitFunc},n.prototype.hasShadow=function(){return this._getCache(f,this._hasShadow)},n.prototype._hasShadow=function(){return this.shadowEnabled()&&0!==this.shadowOpacity()&&!!(this.shadowColor()||this.shadowBlur()||this.shadowOffsetX()||this.shadowOffsetY())},n.prototype._getFillPattern=function(){return this._getCache(d,this.__getFillPattern)},n.prototype.__getFillPattern=function(){if(this.fillPatternImage()){var t=y().createPattern(this.fillPatternImage(),this.fillPatternRepeat()||"repeat");return t&&t.setTransform&&t.setTransform({a:this.fillPatternScaleX(),b:0,c:0,d:this.fillPatternScaleY(),e:0,f:0}),t}},n.prototype._getLinearGradient=function(){return this._getCache(g,this.__getLinearGradient)},n.prototype.__getLinearGradient=function(){var t=this.fillLinearGradientColorStops();if(t){for(var e=y(),n=this.fillLinearGradientStartPoint(),r=this.fillLinearGradientEndPoint(),i=e.createLinearGradient(n.x,n.y,r.x,r.y),o=0;o<t.length;o+=2)i.addColorStop(t[o],t[o+1]);return i}},n.prototype._getRadialGradient=function(){return this._getCache(v,this.__getRadialGradient)},n.prototype.__getRadialGradient=function(){var t=this.fillRadialGradientColorStops();if(t){for(var e=y(),n=this.fillRadialGradientStartPoint(),r=this.fillRadialGradientEndPoint(),i=e.createRadialGradient(n.x,n.y,this.fillRadialGradientStartRadius(),r.x,r.y,this.fillRadialGradientEndRadius()),o=0;o<t.length;o+=2)i.addColorStop(t[o],t[o+1]);return i}},n.prototype.getShadowRGBA=function(){return this._getCache(p,this._getShadowRGBA)},n.prototype._getShadowRGBA=function(){if(this.hasShadow()){var t=a.Util.colorToRGBA(this.shadowColor());return"rgba("+t.r+","+t.g+","+t.b+","+t.a*(this.shadowOpacity()||1)+")"}},n.prototype.hasFill=function(){var t=this;return this._calculate("hasFill",["fillEnabled","fill","fillPatternImage","fillLinearGradientColorStops","fillRadialGradientColorStops"],(function(){return t.fillEnabled()&&!!(t.fill()||t.fillPatternImage()||t.fillLinearGradientColorStops()||t.fillRadialGradientColorStops())}))},n.prototype.hasStroke=function(){var t=this;return this._calculate("hasStroke",["strokeEnabled","strokeWidth","stroke","strokeLinearGradientColorStops"],(function(){return t.strokeEnabled()&&t.strokeWidth()&&!(!t.stroke()&&!t.strokeLinearGradientColorStops())}))},n.prototype.hasHitStroke=function(){var t=this.hitStrokeWidth();return"auto"===t?this.hasStroke():this.strokeEnabled()&&!!t},n.prototype.intersects=function(t){var e=this.getStage().bufferHitCanvas;return e.getContext().clear(),this.drawHit(e,null,!0),e.context.getImageData(Math.round(t.x),Math.round(t.y),1,1).data[3]>0},n.prototype.destroy=function(){return h.Node.prototype.destroy.call(this),delete e.shapes[this.colorKey],delete this.colorKey,this},n.prototype._useBufferCanvas=function(t){var e;if(!this.getStage())return!1;if(!(null===(e=this.attrs.perfectDrawEnabled)||void 0===e||e))return!1;var n=t||this.hasFill(),r=this.hasStroke(),i=1!==this.getAbsoluteOpacity();if(n&&r&&i)return!0;var o=this.hasShadow(),a=this.shadowForStrokeEnabled();return!!(n&&r&&o&&a)},n.prototype.setStrokeHitEnabled=function(t){a.Util.warn("strokeHitEnabled property is deprecated. Please use hitStrokeWidth instead."),t?this.hitStrokeWidth("auto"):this.hitStrokeWidth(0)},n.prototype.getStrokeHitEnabled=function(){return 0!==this.hitStrokeWidth()},n.prototype.getSelfRect=function(){var t=this.size();return{x:this._centroid?-t.width/2:0,y:this._centroid?-t.height/2:0,width:t.width,height:t.height}},n.prototype.getClientRect=function(t){void 0===t&&(t={});var e=t.skipTransform,n=t.relativeTo,r=this.getSelfRect(),i=!t.skipStroke&&this.hasStroke()&&this.strokeWidth()||0,o=r.width+i,a=r.height+i,s=!t.skipShadow&&this.hasShadow(),h=s?this.shadowOffsetX():0,u=s?this.shadowOffsetY():0,c=o+Math.abs(h),l=a+Math.abs(u),f=s&&this.shadowBlur()||0,p=c+2*f,d=l+2*f,g=0;Math.round(i/2)!==i/2&&(g=1);var v={width:p+g,height:d+g,x:-Math.round(i/2+f)+Math.min(h,0)+r.x,y:-Math.round(i/2+f)+Math.min(u,0)+r.y};return e?v:this._transformedRect(v,n)},n.prototype.drawScene=function(t,e){var n,r,i=this.getLayer(),o=t||i.getCanvas(),a=o.getContext(),s=this._getCanvasCache(),h=this.getSceneFunc(),u=this.hasShadow(),c=o.isCache,l=o.isCache,f=e===this;if(!this.isVisible()&&!c)return this;if(s){a.save();var p=this.getAbsoluteTransform(e).getMatrix();return a.transform(p[0],p[1],p[2],p[3],p[4],p[5]),this._drawCachedSceneCanvas(a),a.restore(),this}if(!h)return this;if(a.save(),this._useBufferCanvas()&&!l){(r=(n=this.getStage().bufferCanvas).getContext()).clear(),r.save(),r._applyLineJoin(this);var d=this.getAbsoluteTransform(e).getMatrix();r.transform(d[0],d[1],d[2],d[3],d[4],d[5]),h.call(this,r,this),r.restore();var g=n.pixelRatio;u&&a._applyShadow(this),a._applyOpacity(this),a._applyGlobalCompositeOperation(this),a.drawImage(n._canvas,0,0,n.width/g,n.height/g)}else{if(a._applyLineJoin(this),!f){d=this.getAbsoluteTransform(e).getMatrix();a.transform(d[0],d[1],d[2],d[3],d[4],d[5]),a._applyOpacity(this),a._applyGlobalCompositeOperation(this)}u&&a._applyShadow(this),h.call(this,a,this)}return a.restore(),this},n.prototype.drawHit=function(t,e,n){if(void 0===n&&(n=!1),!this.shouldDrawHit(e,n))return this;var r=this.getLayer(),i=t||r.hitCanvas,o=i&&i.getContext(),s=this.hitFunc()||this.sceneFunc(),h=this._getCanvasCache(),u=h&&h.hit;if(this.colorKey||(console.log(this),a.Util.warn("Looks like your canvas has a destroyed shape in it. Do not reuse shape after you destroyed it. See the shape in logs above. If you want to reuse shape you should call remove() instead of destroy()")),u){o.save();var c=this.getAbsoluteTransform(e).getMatrix();return o.transform(c[0],c[1],c[2],c[3],c[4],c[5]),this._drawCachedHitCanvas(o),o.restore(),this}if(!s)return this;if(o.save(),o._applyLineJoin(this),!(this===e)){var l=this.getAbsoluteTransform(e).getMatrix();o.transform(l[0],l[1],l[2],l[3],l[4],l[5])}return s.call(this,o,this),o.restore(),this},n.prototype.drawHitFromCache=function(t){void 0===t&&(t=0);var e,n,r,i,o,s=this._getCanvasCache(),h=this._getCachedSceneCanvas(),u=s.hit,c=u.getContext(),l=u.getWidth(),f=u.getHeight();c.clear(),c.drawImage(h._canvas,0,0,l,f);try{for(r=(n=(e=c.getImageData(0,0,l,f)).data).length,i=a.Util._hexToRgb(this.colorKey),o=0;o<r;o+=4)n[o+3]>t?(n[o]=i.r,n[o+1]=i.g,n[o+2]=i.b,n[o+3]=255):n[o+3]=0;c.putImageData(e,0,0)}catch(t){a.Util.error("Unable to draw hit graph from cached scene canvas. "+t.message)}return this},n.prototype.hasPointerCapture=function(t){return l.hasPointerCapture(t,this)},n.prototype.setPointerCapture=function(t){l.setPointerCapture(t,this)},n.prototype.releaseCapture=function(t){l.releaseCapture(t,this)},n}(h.Node);e.Shape=_,_.prototype._fillFunc=function(t){t.fill()},_.prototype._strokeFunc=function(t){t.stroke()},_.prototype._fillFuncHit=function(t){t.fill()},_.prototype._strokeFuncHit=function(t){t.stroke()},_.prototype._centroid=!1,_.prototype.nodeType="Shape",c._registerNode(_),_.prototype.eventListeners={},_.prototype.on.call(_.prototype,"shadowColorChange.konva shadowBlurChange.konva shadowOffsetChange.konva shadowOpacityChange.konva shadowEnabledChange.konva",(function(){this._clearCache(f)})),_.prototype.on.call(_.prototype,"shadowColorChange.konva shadowOpacityChange.konva shadowEnabledChange.konva",(function(){this._clearCache(p)})),_.prototype.on.call(_.prototype,"fillPriorityChange.konva fillPatternImageChange.konva fillPatternRepeatChange.konva fillPatternScaleXChange.konva fillPatternScaleYChange.konva",(function(){this._clearCache(d)})),_.prototype.on.call(_.prototype,"fillPriorityChange.konva fillLinearGradientColorStopsChange.konva fillLinearGradientStartPointXChange.konva fillLinearGradientStartPointYChange.konva fillLinearGradientEndPointXChange.konva fillLinearGradientEndPointYChange.konva",(function(){this._clearCache(g)})),_.prototype.on.call(_.prototype,"fillPriorityChange.konva fillRadialGradientColorStopsChange.konva fillRadialGradientStartPointXChange.konva fillRadialGradientStartPointYChange.konva fillRadialGradientEndPointXChange.konva fillRadialGradientEndPointYChange.konva fillRadialGradientStartRadiusChange.konva fillRadialGradientEndRadiusChange.konva",(function(){this._clearCache(v)})),s.Factory.addGetterSetter(_,"stroke",void 0,u.getStringOrGradientValidator()),s.Factory.addGetterSetter(_,"strokeWidth",2,u.getNumberValidator()),s.Factory.addGetterSetter(_,"fillAfterStrokeEnabled",!1),s.Factory.addGetterSetter(_,"hitStrokeWidth","auto",u.getNumberOrAutoValidator()),s.Factory.addGetterSetter(_,"strokeHitEnabled",!0,u.getBooleanValidator()),s.Factory.addGetterSetter(_,"perfectDrawEnabled",!0,u.getBooleanValidator()),s.Factory.addGetterSetter(_,"shadowForStrokeEnabled",!0,u.getBooleanValidator()),s.Factory.addGetterSetter(_,"lineJoin"),s.Factory.addGetterSetter(_,"lineCap"),s.Factory.addGetterSetter(_,"sceneFunc"),s.Factory.addGetterSetter(_,"hitFunc"),s.Factory.addGetterSetter(_,"dash"),s.Factory.addGetterSetter(_,"dashOffset",0,u.getNumberValidator()),s.Factory.addGetterSetter(_,"shadowColor",void 0,u.getStringValidator()),s.Factory.addGetterSetter(_,"shadowBlur",0,u.getNumberValidator()),s.Factory.addGetterSetter(_,"shadowOpacity",1,u.getNumberValidator()),s.Factory.addComponentsGetterSetter(_,"shadowOffset",["x","y"]),s.Factory.addGetterSetter(_,"shadowOffsetX",0,u.getNumberValidator()),s.Factory.addGetterSetter(_,"shadowOffsetY",0,u.getNumberValidator()),s.Factory.addGetterSetter(_,"fillPatternImage"),s.Factory.addGetterSetter(_,"fill",void 0,u.getStringOrGradientValidator()),s.Factory.addGetterSetter(_,"fillPatternX",0,u.getNumberValidator()),s.Factory.addGetterSetter(_,"fillPatternY",0,u.getNumberValidator()),s.Factory.addGetterSetter(_,"fillLinearGradientColorStops"),s.Factory.addGetterSetter(_,"strokeLinearGradientColorStops"),s.Factory.addGetterSetter(_,"fillRadialGradientStartRadius",0),s.Factory.addGetterSetter(_,"fillRadialGradientEndRadius",0),s.Factory.addGetterSetter(_,"fillRadialGradientColorStops"),s.Factory.addGetterSetter(_,"fillPatternRepeat","repeat"),s.Factory.addGetterSetter(_,"fillEnabled",!0),s.Factory.addGetterSetter(_,"strokeEnabled",!0),s.Factory.addGetterSetter(_,"shadowEnabled",!0),s.Factory.addGetterSetter(_,"dashEnabled",!0),s.Factory.addGetterSetter(_,"strokeScaleEnabled",!0),s.Factory.addGetterSetter(_,"fillPriority","color"),s.Factory.addComponentsGetterSetter(_,"fillPatternOffset",["x","y"]),s.Factory.addGetterSetter(_,"fillPatternOffsetX",0,u.getNumberValidator()),s.Factory.addGetterSetter(_,"fillPatternOffsetY",0,u.getNumberValidator()),s.Factory.addComponentsGetterSetter(_,"fillPatternScale",["x","y"]),s.Factory.addGetterSetter(_,"fillPatternScaleX",1,u.getNumberValidator()),s.Factory.addGetterSetter(_,"fillPatternScaleY",1,u.getNumberValidator()),s.Factory.addComponentsGetterSetter(_,"fillLinearGradientStartPoint",["x","y"]),s.Factory.addComponentsGetterSetter(_,"strokeLinearGradientStartPoint",["x","y"]),s.Factory.addGetterSetter(_,"fillLinearGradientStartPointX",0),s.Factory.addGetterSetter(_,"strokeLinearGradientStartPointX",0),s.Factory.addGetterSetter(_,"fillLinearGradientStartPointY",0),s.Factory.addGetterSetter(_,"strokeLinearGradientStartPointY",0),s.Factory.addComponentsGetterSetter(_,"fillLinearGradientEndPoint",["x","y"]),s.Factory.addComponentsGetterSetter(_,"strokeLinearGradientEndPoint",["x","y"]),s.Factory.addGetterSetter(_,"fillLinearGradientEndPointX",0),s.Factory.addGetterSetter(_,"strokeLinearGradientEndPointX",0),s.Factory.addGetterSetter(_,"fillLinearGradientEndPointY",0),s.Factory.addGetterSetter(_,"strokeLinearGradientEndPointY",0),s.Factory.addComponentsGetterSetter(_,"fillRadialGradientStartPoint",["x","y"]),s.Factory.addGetterSetter(_,"fillRadialGradientStartPointX",0),s.Factory.addGetterSetter(_,"fillRadialGradientStartPointY",0),s.Factory.addComponentsGetterSetter(_,"fillRadialGradientEndPoint",["x","y"]),s.Factory.addGetterSetter(_,"fillRadialGradientEndPointX",0),s.Factory.addGetterSetter(_,"fillRadialGradientEndPointY",0),s.Factory.addGetterSetter(_,"fillPatternRotation",0),s.Factory.backCompat(_,{dashArray:"dash",getDashArray:"getDash",setDashArray:"getDash",drawFunc:"sceneFunc",getDrawFunc:"getSceneFunc",setDrawFunc:"setSceneFunc",drawHitFunc:"hitFunc",getDrawHitFunc:"getHitFunc",setDrawHitFunc:"setHitFunc"}),a.Collection.mapMethods(_)},8342:function(t,e,n){"use strict";var r,i=this&&this.__extends||(r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])})(t,e)},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});Object.defineProperty(e,"__esModule",{value:!0}),e.Stage=e.stages=void 0;var o=n(8588),a=n(1455),s=n(8783),h=n(4417),u=n(4842),c=n(210),l=n(4417),f=n(8479),p="mouseout",d="mouseleave",g="mouseover",v="mouseenter",y="mousemove",_="mousedown",m="mouseup",b="pointermove",x="pointerdown",w="pointerup",S="contextmenu",C="click",P="dblclick",k="touchstart",O="touchend",A="dbltap",T="touchmove",M="wheel",F=[v,_,y,m,d,k,T,O,g,M,S,x,b,w,"pointercancel","lostpointercapture"],R=F.length;function E(t,e){t.content.addEventListener(e,(function(n){t["_"+e](n)}),!1)}function D(t){return void 0===t&&(t={}),(t.clipFunc||t.clipWidth||t.clipHeight)&&o.Util.warn("Stage does not support clipping. Please use clip for Layers or Groups."),t}e.stages=[];var G=function(t){function n(n){var r=t.call(this,D(n))||this;return r._pointerPositions=[],r._changedPointerPositions=[],r._buildDOM(),r._bindContentEvents(),e.stages.push(r),r.on("widthChange.konva heightChange.konva",r._resizeDOM),r.on("visibleChange.konva",r._checkVisibility),r.on("clipWidthChange.konva clipHeightChange.konva clipFuncChange.konva",(function(){D(r.attrs)})),r._checkVisibility(),r}return i(n,t),n.prototype._validateAdd=function(t){var e="Layer"===t.getType(),n="FastLayer"===t.getType();e||n||o.Util.throw("You may only add layers to the stage.")},n.prototype._checkVisibility=function(){if(this.content){var t=this.visible()?"":"none";this.content.style.display=t}},n.prototype.setContainer=function(t){if("string"==typeof t){if("."===t.charAt(0)){var e=t.slice(1);t=document.getElementsByClassName(e)[0]}else{var n;n="#"!==t.charAt(0)?t:t.slice(1),t=document.getElementById(n)}if(!t)throw"Can not find container in document with id "+n}return this._setAttr("container",t),this.content&&(this.content.parentElement&&this.content.parentElement.removeChild(this.content),t.appendChild(this.content)),this},n.prototype.shouldDrawHit=function(){return!0},n.prototype.clear=function(){var t,e=this.children,n=e.length;for(t=0;t<n;t++)e[t].clear();return this},n.prototype.clone=function(t){return t||(t={}),t.container=document.createElement("div"),s.Container.prototype.clone.call(this,t)},n.prototype.destroy=function(){t.prototype.destroy.call(this);var n=this.content;n&&o.Util._isInDocument(n)&&this.container().removeChild(n);var r=e.stages.indexOf(this);return r>-1&&e.stages.splice(r,1),this},n.prototype.getPointerPosition=function(){var t=this._pointerPositions[0]||this._changedPointerPositions[0];return t?{x:t.x,y:t.y}:(o.Util.warn("Pointer position is missing and not registered by the stage. Looks like it is outside of the stage container. You can set it manually from event: stage.setPointersPositions(event);"),null)},n.prototype._getPointerById=function(t){return this._pointerPositions.find((function(e){return e.id===t}))},n.prototype.getPointersPositions=function(){return this._pointerPositions},n.prototype.getStage=function(){return this},n.prototype.getContent=function(){return this.content},n.prototype._toKonvaCanvas=function(t){(t=t||{}).x=t.x||0,t.y=t.y||0,t.width=t.width||this.width(),t.height=t.height||this.height();var e=new u.SceneCanvas({width:t.width,height:t.height,pixelRatio:t.pixelRatio||1}),n=e.getContext()._context,r=this.children;return(t.x||t.y)&&n.translate(-1*t.x,-1*t.y),r.each((function(e){if(e.isVisible()){var r=e._toKonvaCanvas(t);n.drawImage(r._canvas,t.x,t.y,r.getWidth()/r.getPixelRatio(),r.getHeight()/r.getPixelRatio())}})),e},n.prototype.getIntersection=function(t,e){if(!t)return null;var n,r,i=this.children;for(n=i.length-1;n>=0;n--)if(r=i[n].getIntersection(t,e))return r;return null},n.prototype._resizeDOM=function(){var t=this.width(),e=this.height();this.content&&(this.content.style.width=t+"px",this.content.style.height=e+"px"),this.bufferCanvas.setSize(t,e),this.bufferHitCanvas.setSize(t,e),this.children.each((function(n){n.setSize({width:t,height:e}),n.draw()}))},n.prototype.add=function(e){if(arguments.length>1){for(var n=0;n<arguments.length;n++)this.add(arguments[n]);return this}t.prototype.add.call(this,e);var r=this.children.length;return r>5&&o.Util.warn("The stage has "+r+" layers. Recommended maximum number of layers is 3-5. Adding more layers into the stage may drop the performance. Rethink your tree structure, you can use Konva.Group."),e.setSize({width:this.width(),height:this.height()}),e.draw(),h.Konva.isBrowser&&this.content.appendChild(e.canvas._canvas),this},n.prototype.getParent=function(){return null},n.prototype.getLayer=function(){return null},n.prototype.hasPointerCapture=function(t){return f.hasPointerCapture(t,this)},n.prototype.setPointerCapture=function(t){f.setPointerCapture(t,this)},n.prototype.releaseCapture=function(t){f.releaseCapture(t,this)},n.prototype.getLayers=function(){return this.getChildren()},n.prototype._bindContentEvents=function(){if(h.Konva.isBrowser)for(var t=0;t<R;t++)E(this,F[t])},n.prototype._mouseenter=function(t){this.setPointersPositions(t),this._fire(v,{evt:t,target:this,currentTarget:this})},n.prototype._mouseover=function(t){this.setPointersPositions(t),this._fire("contentMouseover",{evt:t}),this._fire(g,{evt:t,target:this,currentTarget:this})},n.prototype._mouseleave=function(t){var e;this.setPointersPositions(t);var n=(null===(e=this.targetShape)||void 0===e?void 0:e.getStage())?this.targetShape:null,r=!c.DD.isDragging||h.Konva.hitOnDragEnabled;n&&r?(n._fireAndBubble(p,{evt:t}),n._fireAndBubble(d,{evt:t}),this._fire(d,{evt:t,target:this,currentTarget:this}),this.targetShape=null):r&&(this._fire(d,{evt:t,target:this,currentTarget:this}),this._fire(p,{evt:t,target:this,currentTarget:this})),this.pointerPos=void 0,this._pointerPositions=[],this._fire("contentMouseout",{evt:t})},n.prototype._mousemove=function(t){var e;if(h.Konva.UA.ieMobile)return this._touchmove(t);this.setPointersPositions(t);var n,r=o.Util._getFirstPointerId(t),i=(null===(e=this.targetShape)||void 0===e?void 0:e.getStage())?this.targetShape:null,a=!c.DD.isDragging||h.Konva.hitOnDragEnabled;if(a){if((n=this.getIntersection(this.getPointerPosition()))&&n.isListening())a&&i!==n?(i&&(i._fireAndBubble(p,{evt:t,pointerId:r},n),i._fireAndBubble(d,{evt:t,pointerId:r},n)),n._fireAndBubble(g,{evt:t,pointerId:r},i),n._fireAndBubble(v,{evt:t,pointerId:r},i),n._fireAndBubble(y,{evt:t,pointerId:r}),this.targetShape=n):n._fireAndBubble(y,{evt:t,pointerId:r});else i&&a&&(i._fireAndBubble(p,{evt:t,pointerId:r}),i._fireAndBubble(d,{evt:t,pointerId:r}),this._fire(g,{evt:t,target:this,currentTarget:this,pointerId:r}),this.targetShape=null),this._fire(y,{evt:t,target:this,currentTarget:this,pointerId:r});this._fire("contentMousemove",{evt:t})}t.cancelable&&t.preventDefault()},n.prototype._mousedown=function(t){if(h.Konva.UA.ieMobile)return this._touchstart(t);this.setPointersPositions(t);var e=o.Util._getFirstPointerId(t),n=this.getIntersection(this.getPointerPosition());c.DD.justDragged=!1,h.Konva.listenClickTap=!0,n&&n.isListening()?(this.clickStartShape=n,n._fireAndBubble(_,{evt:t,pointerId:e})):this._fire(_,{evt:t,target:this,currentTarget:this,pointerId:e}),this._fire("contentMousedown",{evt:t})},n.prototype._mouseup=function(t){if(h.Konva.UA.ieMobile)return this._touchend(t);this.setPointersPositions(t);var e=o.Util._getFirstPointerId(t),n=this.getIntersection(this.getPointerPosition()),r=this.clickStartShape,i=this.clickEndShape,a=!1;h.Konva.inDblClickWindow?(a=!0,clearTimeout(this.dblTimeout)):c.DD.justDragged||(h.Konva.inDblClickWindow=!0,clearTimeout(this.dblTimeout)),this.dblTimeout=setTimeout((function(){h.Konva.inDblClickWindow=!1}),h.Konva.dblClickWindow),n&&n.isListening()?(this.clickEndShape=n,n._fireAndBubble(m,{evt:t,pointerId:e}),h.Konva.listenClickTap&&r&&r._id===n._id&&(n._fireAndBubble(C,{evt:t,pointerId:e}),a&&i&&i===n&&n._fireAndBubble(P,{evt:t,pointerId:e}))):(this.clickEndShape=null,this._fire(m,{evt:t,target:this,currentTarget:this,pointerId:e}),h.Konva.listenClickTap&&this._fire(C,{evt:t,target:this,currentTarget:this,pointerId:e}),a&&this._fire(P,{evt:t,target:this,currentTarget:this,pointerId:e})),this._fire("contentMouseup",{evt:t}),h.Konva.listenClickTap&&(this._fire("contentClick",{evt:t}),a&&this._fire("contentDblclick",{evt:t})),h.Konva.listenClickTap=!1,t.cancelable&&t.preventDefault()},n.prototype._contextmenu=function(t){this.setPointersPositions(t);var e=this.getIntersection(this.getPointerPosition());e&&e.isListening()?e._fireAndBubble(S,{evt:t}):this._fire(S,{evt:t,target:this,currentTarget:this}),this._fire("contentContextmenu",{evt:t})},n.prototype._touchstart=function(t){var e=this;this.setPointersPositions(t);var n=!1;this._changedPointerPositions.forEach((function(r){var i=e.getIntersection(r);h.Konva.listenClickTap=!0,c.DD.justDragged=!1,i&&i.isListening()&&(h.Konva.captureTouchEventsEnabled&&i.setPointerCapture(r.id),e.tapStartShape=i,i._fireAndBubble(k,{evt:t,pointerId:r.id},e),n=!0,i.isListening()&&i.preventDefault()&&t.cancelable&&t.preventDefault())})),n||this._fire(k,{evt:t,target:this,currentTarget:this,pointerId:this._changedPointerPositions[0].id}),this._fire("contentTouchstart",{evt:t})},n.prototype._touchmove=function(t){var e=this;if(this.setPointersPositions(t),!c.DD.isDragging||h.Konva.hitOnDragEnabled){var n=!1,r={};this._changedPointerPositions.forEach((function(i){var o=f.getCapturedShape(i.id)||e.getIntersection(i);o&&o.isListening()&&(r[o._id]||(r[o._id]=!0,o._fireAndBubble(T,{evt:t,pointerId:i.id}),n=!0,o.isListening()&&o.preventDefault()&&t.cancelable&&t.preventDefault()))})),n||this._fire(T,{evt:t,target:this,currentTarget:this,pointerId:this._changedPointerPositions[0].id}),this._fire("contentTouchmove",{evt:t})}c.DD.isDragging&&c.DD.node.preventDefault()&&t.cancelable&&t.preventDefault()},n.prototype._touchend=function(t){var e=this;this.setPointersPositions(t);var n=this.tapEndShape,r=!1;h.Konva.inDblClickWindow?(r=!0,clearTimeout(this.dblTimeout)):c.DD.justDragged||(h.Konva.inDblClickWindow=!0,clearTimeout(this.dblTimeout)),this.dblTimeout=setTimeout((function(){h.Konva.inDblClickWindow=!1}),h.Konva.dblClickWindow);var i=!1,o={},a=!1,s=!1;this._changedPointerPositions.forEach((function(u){var c=f.getCapturedShape(u.id)||e.getIntersection(u);c&&c.releaseCapture(u.id),c&&c.isListening()&&(o[c._id]||(o[c._id]=!0,e.tapEndShape=c,c._fireAndBubble(O,{evt:t,pointerId:u.id}),i=!0,h.Konva.listenClickTap&&c===e.tapStartShape&&(a=!0,c._fireAndBubble("tap",{evt:t,pointerId:u.id}),r&&n&&n===c&&(s=!0,c._fireAndBubble(A,{evt:t,pointerId:u.id}))),c.isListening()&&c.preventDefault()&&t.cancelable&&t.preventDefault()))})),i||this._fire(O,{evt:t,target:this,currentTarget:this,pointerId:this._changedPointerPositions[0].id}),h.Konva.listenClickTap&&!a&&(this.tapEndShape=null,this._fire("tap",{evt:t,target:this,currentTarget:this,pointerId:this._changedPointerPositions[0].id})),r&&!s&&this._fire(A,{evt:t,target:this,currentTarget:this,pointerId:this._changedPointerPositions[0].id}),this._fire("contentTouchend",{evt:t}),h.Konva.listenClickTap&&(this._fire("contentTap",{evt:t}),r&&this._fire("contentDbltap",{evt:t})),this.preventDefault()&&t.cancelable&&t.preventDefault(),h.Konva.listenClickTap=!1},n.prototype._wheel=function(t){this.setPointersPositions(t);var e=this.getIntersection(this.getPointerPosition());e&&e.isListening()?e._fireAndBubble(M,{evt:t}):this._fire(M,{evt:t,target:this,currentTarget:this}),this._fire("contentWheel",{evt:t})},n.prototype._pointerdown=function(t){if(h.Konva._pointerEventsEnabled){this.setPointersPositions(t);var e=f.getCapturedShape(t.pointerId)||this.getIntersection(this.getPointerPosition());e&&e._fireAndBubble(x,f.createEvent(t))}},n.prototype._pointermove=function(t){if(h.Konva._pointerEventsEnabled){this.setPointersPositions(t);var e=f.getCapturedShape(t.pointerId)||this.getIntersection(this.getPointerPosition());e&&e._fireAndBubble(b,f.createEvent(t))}},n.prototype._pointerup=function(t){if(h.Konva._pointerEventsEnabled){this.setPointersPositions(t);var e=f.getCapturedShape(t.pointerId)||this.getIntersection(this.getPointerPosition());e&&e._fireAndBubble(w,f.createEvent(t)),f.releaseCapture(t.pointerId)}},n.prototype._pointercancel=function(t){if(h.Konva._pointerEventsEnabled){this.setPointersPositions(t);var e=f.getCapturedShape(t.pointerId)||this.getIntersection(this.getPointerPosition());e&&e._fireAndBubble(w,f.createEvent(t)),f.releaseCapture(t.pointerId)}},n.prototype._lostpointercapture=function(t){f.releaseCapture(t.pointerId)},n.prototype.setPointersPositions=function(t){var e=this,n=this._getContentPosition(),r=null,i=null;void 0!==(t=t||window.event).touches?(this._pointerPositions=[],this._changedPointerPositions=[],o.Collection.prototype.each.call(t.touches,(function(t){e._pointerPositions.push({id:t.identifier,x:(t.clientX-n.left)/n.scaleX,y:(t.clientY-n.top)/n.scaleY})})),o.Collection.prototype.each.call(t.changedTouches||t.touches,(function(t){e._changedPointerPositions.push({id:t.identifier,x:(t.clientX-n.left)/n.scaleX,y:(t.clientY-n.top)/n.scaleY})}))):(r=(t.clientX-n.left)/n.scaleX,i=(t.clientY-n.top)/n.scaleY,this.pointerPos={x:r,y:i},this._pointerPositions=[{x:r,y:i,id:o.Util._getFirstPointerId(t)}],this._changedPointerPositions=[{x:r,y:i,id:o.Util._getFirstPointerId(t)}])},n.prototype._setPointerPosition=function(t){o.Util.warn('Method _setPointerPosition is deprecated. Use "stage.setPointersPositions(event)" instead.'),this.setPointersPositions(t)},n.prototype._getContentPosition=function(){if(!this.content||!this.content.getBoundingClientRect)return{top:0,left:0,scaleX:1,scaleY:1};var t=this.content.getBoundingClientRect();return{top:t.top,left:t.left,scaleX:t.width/this.content.clientWidth||1,scaleY:t.height/this.content.clientHeight||1}},n.prototype._buildDOM=function(){if(this.bufferCanvas=new u.SceneCanvas({width:this.width(),height:this.height()}),this.bufferHitCanvas=new u.HitCanvas({pixelRatio:1,width:this.width(),height:this.height()}),h.Konva.isBrowser){var t=this.container();if(!t)throw"Stage has no container. A container is required.";t.innerHTML="",this.content=document.createElement("div"),this.content.style.position="relative",this.content.style.userSelect="none",this.content.className="konvajs-content",this.content.setAttribute("role","presentation"),t.appendChild(this.content),this._resizeDOM()}},n.prototype.cache=function(){return o.Util.warn("Cache function is not allowed for stage. You may use cache only for layers, groups and shapes."),this},n.prototype.clearCache=function(){return this},n.prototype.batchDraw=function(){return this.children.each((function(t){t.batchDraw()})),this},n}(s.Container);e.Stage=G,G.prototype.nodeType="Stage",l._registerNode(G),a.Factory.addGetterSetter(G,"container")},8017:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.Easings=e.Tween=void 0;var r=n(8588),i=n(6745),o=n(7939),a=n(4417),s={node:1,duration:1,easing:1,onFinish:1,yoyo:1},h=0,u=["fill","stroke","shadowColor"],c=function(){function t(t,e,n,r,i,o,a){this.prop=t,this.propFunc=e,this.begin=r,this._pos=r,this.duration=o,this._change=0,this.prevPos=0,this.yoyo=a,this._time=0,this._position=0,this._startTime=0,this._finish=0,this.func=n,this._change=i-this.begin,this.pause()}return t.prototype.fire=function(t){var e=this[t];e&&e()},t.prototype.setTime=function(t){t>this.duration?this.yoyo?(this._time=this.duration,this.reverse()):this.finish():t<0?this.yoyo?(this._time=0,this.play()):this.reset():(this._time=t,this.update())},t.prototype.getTime=function(){return this._time},t.prototype.setPosition=function(t){this.prevPos=this._pos,this.propFunc(t),this._pos=t},t.prototype.getPosition=function(t){return void 0===t&&(t=this._time),this.func(t,this.begin,this._change,this.duration)},t.prototype.play=function(){this.state=2,this._startTime=this.getTimer()-this._time,this.onEnterFrame(),this.fire("onPlay")},t.prototype.reverse=function(){this.state=3,this._time=this.duration-this._time,this._startTime=this.getTimer()-this._time,this.onEnterFrame(),this.fire("onReverse")},t.prototype.seek=function(t){this.pause(),this._time=t,this.update(),this.fire("onSeek")},t.prototype.reset=function(){this.pause(),this._time=0,this.update(),this.fire("onReset")},t.prototype.finish=function(){this.pause(),this._time=this.duration,this.update(),this.fire("onFinish")},t.prototype.update=function(){this.setPosition(this.getPosition(this._time)),this.fire("onUpdate")},t.prototype.onEnterFrame=function(){var t=this.getTimer()-this._startTime;2===this.state?this.setTime(t):3===this.state&&this.setTime(this.duration-t)},t.prototype.pause=function(){this.state=1,this.fire("onPause")},t.prototype.getTimer=function(){return(new Date).getTime()},t}(),l=function(){function t(n){var o,u,l=this,f=n.node,p=f._id,d=n.easing||e.Easings.Linear,g=!!n.yoyo;o=void 0===n.duration?.3:0===n.duration?.001:n.duration,this.node=f,this._id=h++;var v=f.getLayer()||(f instanceof a.Konva.Stage?f.getLayers():null);for(u in v||r.Util.error("Tween constructor have `node` that is not in a layer. Please add node into layer first."),this.anim=new i.Animation((function(){l.tween.onEnterFrame()}),v),this.tween=new c(u,(function(t){l._tweenFunc(t)}),d,0,1,1e3*o,g),this._addListeners(),t.attrs[p]||(t.attrs[p]={}),t.attrs[p][this._id]||(t.attrs[p][this._id]={}),t.tweens[p]||(t.tweens[p]={}),n)void 0===s[u]&&this._addAttr(u,n[u]);this.reset(),this.onFinish=n.onFinish,this.onReset=n.onReset,this.onUpdate=n.onUpdate}return t.prototype._addAttr=function(e,n){var i,o,a,s,h,c,l,f,p=this.node,d=p._id;if((a=t.tweens[d][e])&&delete t.attrs[d][a][e],i=p.getAttr(e),r.Util._isArray(n))if(o=[],h=Math.max(n.length,i.length),"points"===e&&n.length!==i.length&&(n.length>i.length?(l=i,i=r.Util._prepareArrayForTween(i,n,p.closed())):(c=n,n=r.Util._prepareArrayForTween(n,i,p.closed()))),0===e.indexOf("fill"))for(s=0;s<h;s++)if(s%2==0)o.push(n[s]-i[s]);else{var g=r.Util.colorToRGBA(i[s]);f=r.Util.colorToRGBA(n[s]),i[s]=g,o.push({r:f.r-g.r,g:f.g-g.g,b:f.b-g.b,a:f.a-g.a})}else for(s=0;s<h;s++)o.push(n[s]-i[s]);else-1!==u.indexOf(e)?(i=r.Util.colorToRGBA(i),o={r:(f=r.Util.colorToRGBA(n)).r-i.r,g:f.g-i.g,b:f.b-i.b,a:f.a-i.a}):o=n-i;t.attrs[d][this._id][e]={start:i,diff:o,end:n,trueEnd:c,trueStart:l},t.tweens[d][e]=this._id},t.prototype._tweenFunc=function(e){var n,i,o,a,s,h,c,l,f=this.node,p=t.attrs[f._id][this._id];for(n in p){if(o=(i=p[n]).start,a=i.diff,l=i.end,r.Util._isArray(o))if(s=[],c=Math.max(o.length,l.length),0===n.indexOf("fill"))for(h=0;h<c;h++)h%2==0?s.push((o[h]||0)+a[h]*e):s.push("rgba("+Math.round(o[h].r+a[h].r*e)+","+Math.round(o[h].g+a[h].g*e)+","+Math.round(o[h].b+a[h].b*e)+","+(o[h].a+a[h].a*e)+")");else for(h=0;h<c;h++)s.push((o[h]||0)+a[h]*e);else s=-1!==u.indexOf(n)?"rgba("+Math.round(o.r+a.r*e)+","+Math.round(o.g+a.g*e)+","+Math.round(o.b+a.b*e)+","+(o.a+a.a*e)+")":o+a*e;f.setAttr(n,s)}},t.prototype._addListeners=function(){var e=this;this.tween.onPlay=function(){e.anim.start()},this.tween.onReverse=function(){e.anim.start()},this.tween.onPause=function(){e.anim.stop()},this.tween.onFinish=function(){var n=e.node,r=t.attrs[n._id][e._id];r.points&&r.points.trueEnd&&n.setAttr("points",r.points.trueEnd),e.onFinish&&e.onFinish.call(e)},this.tween.onReset=function(){var n=e.node,r=t.attrs[n._id][e._id];r.points&&r.points.trueStart&&n.points(r.points.trueStart),e.onReset&&e.onReset()},this.tween.onUpdate=function(){e.onUpdate&&e.onUpdate.call(e)}},t.prototype.play=function(){return this.tween.play(),this},t.prototype.reverse=function(){return this.tween.reverse(),this},t.prototype.reset=function(){return this.tween.reset(),this},t.prototype.seek=function(t){return this.tween.seek(1e3*t),this},t.prototype.pause=function(){return this.tween.pause(),this},t.prototype.finish=function(){return this.tween.finish(),this},t.prototype.destroy=function(){var e,n=this.node._id,r=this._id,i=t.tweens[n];for(e in this.pause(),i)delete t.tweens[n][e];delete t.attrs[n][r]},t.attrs={},t.tweens={},t}();e.Tween=l,o.Node.prototype.to=function(t){var e=t.onFinish;t.node=this,t.onFinish=function(){this.destroy(),e&&e()},new l(t).play()},e.Easings={BackEaseIn:function(t,e,n,r){var i=1.70158;return n*(t/=r)*t*((i+1)*t-i)+e},BackEaseOut:function(t,e,n,r){var i=1.70158;return n*((t=t/r-1)*t*((i+1)*t+i)+1)+e},BackEaseInOut:function(t,e,n,r){var i=1.70158;return(t/=r/2)<1?n/2*(t*t*((1+(i*=1.525))*t-i))+e:n/2*((t-=2)*t*((1+(i*=1.525))*t+i)+2)+e},ElasticEaseIn:function(t,e,n,r,i,o){var a=0;return 0===t?e:1==(t/=r)?e+n:(o||(o=.3*r),!i||i<Math.abs(n)?(i=n,a=o/4):a=o/(2*Math.PI)*Math.asin(n/i),-i*Math.pow(2,10*(t-=1))*Math.sin((t*r-a)*(2*Math.PI)/o)+e)},ElasticEaseOut:function(t,e,n,r,i,o){var a=0;return 0===t?e:1==(t/=r)?e+n:(o||(o=.3*r),!i||i<Math.abs(n)?(i=n,a=o/4):a=o/(2*Math.PI)*Math.asin(n/i),i*Math.pow(2,-10*t)*Math.sin((t*r-a)*(2*Math.PI)/o)+n+e)},ElasticEaseInOut:function(t,e,n,r,i,o){var a=0;return 0===t?e:2==(t/=r/2)?e+n:(o||(o=r*(.3*1.5)),!i||i<Math.abs(n)?(i=n,a=o/4):a=o/(2*Math.PI)*Math.asin(n/i),t<1?i*Math.pow(2,10*(t-=1))*Math.sin((t*r-a)*(2*Math.PI)/o)*-.5+e:i*Math.pow(2,-10*(t-=1))*Math.sin((t*r-a)*(2*Math.PI)/o)*.5+n+e)},BounceEaseOut:function(t,e,n,r){return(t/=r)<1/2.75?n*(7.5625*t*t)+e:t<2/2.75?n*(7.5625*(t-=1.5/2.75)*t+.75)+e:t<2.5/2.75?n*(7.5625*(t-=2.25/2.75)*t+.9375)+e:n*(7.5625*(t-=2.625/2.75)*t+.984375)+e},BounceEaseIn:function(t,n,r,i){return r-e.Easings.BounceEaseOut(i-t,0,r,i)+n},BounceEaseInOut:function(t,n,r,i){return t<i/2?.5*e.Easings.BounceEaseIn(2*t,0,r,i)+n:.5*e.Easings.BounceEaseOut(2*t-i,0,r,i)+.5*r+n},EaseIn:function(t,e,n,r){return n*(t/=r)*t+e},EaseOut:function(t,e,n,r){return-n*(t/=r)*(t-2)+e},EaseInOut:function(t,e,n,r){return(t/=r/2)<1?n/2*t*t+e:-n/2*(--t*(t-2)-1)+e},StrongEaseIn:function(t,e,n,r){return n*(t/=r)*t*t*t*t+e},StrongEaseOut:function(t,e,n,r){return n*((t=t/r-1)*t*t*t*t+1)+e},StrongEaseInOut:function(t,e,n,r){return(t/=r/2)<1?n/2*t*t*t*t*t+e:n/2*((t-=2)*t*t*t*t+2)+e},Linear:function(t,e,n,r){return n*t/r+e}}},8588:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.Util=e.Transform=e.Collection=void 0;var r=n(4417),i=function(){function t(){}return t.toCollection=function(e){var n,r=new t,i=e.length;for(n=0;n<i;n++)r.push(e[n]);return r},t._mapMethod=function(e){t.prototype[e]=function(){var t,n=this.length,r=[].slice.call(arguments);for(t=0;t<n;t++)this[t][e].apply(this[t],r);return this}},t.mapMethods=function(e){var n=e.prototype;for(var r in n)t._mapMethod(r)},t}();e.Collection=i,i.prototype=[],i.prototype.each=function(t){for(var e=0;e<this.length;e++)t(this[e],e)},i.prototype.toArray=function(){var t,e=[],n=this.length;for(t=0;t<n;t++)e.push(this[t]);return e};var o=function(){function t(t){void 0===t&&(t=[1,0,0,1,0,0]),this.dirty=!1,this.m=t&&t.slice()||[1,0,0,1,0,0]}return t.prototype.reset=function(){this.m[0]=1,this.m[1]=0,this.m[2]=0,this.m[3]=1,this.m[4]=0,this.m[5]=0},t.prototype.copy=function(){return new t(this.m)},t.prototype.copyInto=function(t){t.m[0]=this.m[0],t.m[1]=this.m[1],t.m[2]=this.m[2],t.m[3]=this.m[3],t.m[4]=this.m[4],t.m[5]=this.m[5]},t.prototype.point=function(t){var e=this.m;return{x:e[0]*t.x+e[2]*t.y+e[4],y:e[1]*t.x+e[3]*t.y+e[5]}},t.prototype.translate=function(t,e){return this.m[4]+=this.m[0]*t+this.m[2]*e,this.m[5]+=this.m[1]*t+this.m[3]*e,this},t.prototype.scale=function(t,e){return this.m[0]*=t,this.m[1]*=t,this.m[2]*=e,this.m[3]*=e,this},t.prototype.rotate=function(t){var e=Math.cos(t),n=Math.sin(t),r=this.m[0]*e+this.m[2]*n,i=this.m[1]*e+this.m[3]*n,o=this.m[0]*-n+this.m[2]*e,a=this.m[1]*-n+this.m[3]*e;return this.m[0]=r,this.m[1]=i,this.m[2]=o,this.m[3]=a,this},t.prototype.getTranslation=function(){return{x:this.m[4],y:this.m[5]}},t.prototype.skew=function(t,e){var n=this.m[0]+this.m[2]*e,r=this.m[1]+this.m[3]*e,i=this.m[2]+this.m[0]*t,o=this.m[3]+this.m[1]*t;return this.m[0]=n,this.m[1]=r,this.m[2]=i,this.m[3]=o,this},t.prototype.multiply=function(t){var e=this.m[0]*t.m[0]+this.m[2]*t.m[1],n=this.m[1]*t.m[0]+this.m[3]*t.m[1],r=this.m[0]*t.m[2]+this.m[2]*t.m[3],i=this.m[1]*t.m[2]+this.m[3]*t.m[3],o=this.m[0]*t.m[4]+this.m[2]*t.m[5]+this.m[4],a=this.m[1]*t.m[4]+this.m[3]*t.m[5]+this.m[5];return this.m[0]=e,this.m[1]=n,this.m[2]=r,this.m[3]=i,this.m[4]=o,this.m[5]=a,this},t.prototype.invert=function(){var t=1/(this.m[0]*this.m[3]-this.m[1]*this.m[2]),e=this.m[3]*t,n=-this.m[1]*t,r=-this.m[2]*t,i=this.m[0]*t,o=t*(this.m[2]*this.m[5]-this.m[3]*this.m[4]),a=t*(this.m[1]*this.m[4]-this.m[0]*this.m[5]);return this.m[0]=e,this.m[1]=n,this.m[2]=r,this.m[3]=i,this.m[4]=o,this.m[5]=a,this},t.prototype.getMatrix=function(){return this.m},t.prototype.setAbsolutePosition=function(t,e){var n=this.m[0],r=this.m[1],i=this.m[2],o=this.m[3],a=this.m[4],s=(n*(e-this.m[5])-r*(t-a))/(n*o-r*i),h=(t-a-i*s)/n;return this.translate(h,s)},t.prototype.decompose=function(){var t=this.m[0],n=this.m[1],r=this.m[2],i=this.m[3],o=t*i-n*r,a={x:this.m[4],y:this.m[5],rotation:0,scaleX:0,scaleY:0,skewX:0,skewY:0};if(0!=t||0!=n){var s=Math.sqrt(t*t+n*n);a.rotation=n>0?Math.acos(t/s):-Math.acos(t/s),a.scaleX=s,a.scaleY=o/s,a.skewX=(t*r+n*i)/o,a.skewY=0}else if(0!=r||0!=i){var h=Math.sqrt(r*r+i*i);a.rotation=Math.PI/2-(i>0?Math.acos(-r/h):-Math.acos(r/h)),a.scaleX=o/h,a.scaleY=h,a.skewX=0,a.skewY=(t*r+n*i)/o}return a.rotation=e.Util._getRotation(a.rotation),a},t}();e.Transform=o;var a=Math.PI/180,s=180/Math.PI,h="Konva error: ",u={aliceblue:[240,248,255],antiquewhite:[250,235,215],aqua:[0,255,255],aquamarine:[127,255,212],azure:[240,255,255],beige:[245,245,220],bisque:[255,228,196],black:[0,0,0],blanchedalmond:[255,235,205],blue:[0,0,255],blueviolet:[138,43,226],brown:[165,42,42],burlywood:[222,184,135],cadetblue:[95,158,160],chartreuse:[127,255,0],chocolate:[210,105,30],coral:[255,127,80],cornflowerblue:[100,149,237],cornsilk:[255,248,220],crimson:[220,20,60],cyan:[0,255,255],darkblue:[0,0,139],darkcyan:[0,139,139],darkgoldenrod:[184,132,11],darkgray:[169,169,169],darkgreen:[0,100,0],darkgrey:[169,169,169],darkkhaki:[189,183,107],darkmagenta:[139,0,139],darkolivegreen:[85,107,47],darkorange:[255,140,0],darkorchid:[153,50,204],darkred:[139,0,0],darksalmon:[233,150,122],darkseagreen:[143,188,143],darkslateblue:[72,61,139],darkslategray:[47,79,79],darkslategrey:[47,79,79],darkturquoise:[0,206,209],darkviolet:[148,0,211],deeppink:[255,20,147],deepskyblue:[0,191,255],dimgray:[105,105,105],dimgrey:[105,105,105],dodgerblue:[30,144,255],firebrick:[178,34,34],floralwhite:[255,255,240],forestgreen:[34,139,34],fuchsia:[255,0,255],gainsboro:[220,220,220],ghostwhite:[248,248,255],gold:[255,215,0],goldenrod:[218,165,32],gray:[128,128,128],green:[0,128,0],greenyellow:[173,255,47],grey:[128,128,128],honeydew:[240,255,240],hotpink:[255,105,180],indianred:[205,92,92],indigo:[75,0,130],ivory:[255,255,240],khaki:[240,230,140],lavender:[230,230,250],lavenderblush:[255,240,245],lawngreen:[124,252,0],lemonchiffon:[255,250,205],lightblue:[173,216,230],lightcoral:[240,128,128],lightcyan:[224,255,255],lightgoldenrodyellow:[250,250,210],lightgray:[211,211,211],lightgreen:[144,238,144],lightgrey:[211,211,211],lightpink:[255,182,193],lightsalmon:[255,160,122],lightseagreen:[32,178,170],lightskyblue:[135,206,250],lightslategray:[119,136,153],lightslategrey:[119,136,153],lightsteelblue:[176,196,222],lightyellow:[255,255,224],lime:[0,255,0],limegreen:[50,205,50],linen:[250,240,230],magenta:[255,0,255],maroon:[128,0,0],mediumaquamarine:[102,205,170],mediumblue:[0,0,205],mediumorchid:[186,85,211],mediumpurple:[147,112,219],mediumseagreen:[60,179,113],mediumslateblue:[123,104,238],mediumspringgreen:[0,250,154],mediumturquoise:[72,209,204],mediumvioletred:[199,21,133],midnightblue:[25,25,112],mintcream:[245,255,250],mistyrose:[255,228,225],moccasin:[255,228,181],navajowhite:[255,222,173],navy:[0,0,128],oldlace:[253,245,230],olive:[128,128,0],olivedrab:[107,142,35],orange:[255,165,0],orangered:[255,69,0],orchid:[218,112,214],palegoldenrod:[238,232,170],palegreen:[152,251,152],paleturquoise:[175,238,238],palevioletred:[219,112,147],papayawhip:[255,239,213],peachpuff:[255,218,185],peru:[205,133,63],pink:[255,192,203],plum:[221,160,203],powderblue:[176,224,230],purple:[128,0,128],rebeccapurple:[102,51,153],red:[255,0,0],rosybrown:[188,143,143],royalblue:[65,105,225],saddlebrown:[139,69,19],salmon:[250,128,114],sandybrown:[244,164,96],seagreen:[46,139,87],seashell:[255,245,238],sienna:[160,82,45],silver:[192,192,192],skyblue:[135,206,235],slateblue:[106,90,205],slategray:[119,128,144],slategrey:[119,128,144],snow:[255,255,250],springgreen:[0,255,127],steelblue:[70,130,180],tan:[210,180,140],teal:[0,128,128],thistle:[216,191,216],transparent:[255,255,255,0],tomato:[255,99,71],turquoise:[64,224,208],violet:[238,130,238],wheat:[245,222,179],white:[255,255,255],whitesmoke:[245,245,245],yellow:[255,255,0],yellowgreen:[154,205,5]},c=/rgb\((\d{1,3}),(\d{1,3}),(\d{1,3})\)/,l=[];e.Util={_isElement:function(t){return!(!t||1!=t.nodeType)},_isFunction:function(t){return!!(t&&t.constructor&&t.call&&t.apply)},_isPlainObject:function(t){return!!t&&t.constructor===Object},_isArray:function(t){return"[object Array]"===Object.prototype.toString.call(t)},_isNumber:function(t){return"[object Number]"===Object.prototype.toString.call(t)&&!isNaN(t)&&isFinite(t)},_isString:function(t){return"[object String]"===Object.prototype.toString.call(t)},_isBoolean:function(t){return"[object Boolean]"===Object.prototype.toString.call(t)},isObject:function(t){return t instanceof Object},isValidSelector:function(t){if("string"!=typeof t)return!1;var e=t[0];return"#"===e||"."===e||e===e.toUpperCase()},_sign:function(t){return 0===t||t>0?1:-1},requestAnimFrame:function(t){l.push(t),1===l.length&&requestAnimationFrame((function(){var t=l;l=[],t.forEach((function(t){t()}))}))},createCanvasElement:function(){var t=document.createElement("canvas");try{t.style=t.style||{}}catch(t){}return t},createImageElement:function(){return document.createElement("img")},_isInDocument:function(t){for(;t=t.parentNode;)if(t==document)return!0;return!1},_simplifyArray:function(t){var n,r,i=[],o=t.length,a=e.Util;for(n=0;n<o;n++)r=t[n],a._isNumber(r)?r=Math.round(1e3*r)/1e3:a._isString(r)||(r=r.toString()),i.push(r);return i},_urlToImage:function(t,e){var n=new r.glob.Image;n.onload=function(){e(n)},n.src=t},_rgbToHex:function(t,e,n){return((1<<24)+(t<<16)+(e<<8)+n).toString(16).slice(1)},_hexToRgb:function(t){t=t.replace("#","");var e=parseInt(t,16);return{r:e>>16&255,g:e>>8&255,b:255&e}},getRandomColor:function(){for(var t=(16777215*Math.random()<<0).toString(16);t.length<6;)t="0"+t;return"#"+t},get:function(t,e){return void 0===t?e:t},getRGB:function(t){var e;return t in u?{r:(e=u[t])[0],g:e[1],b:e[2]}:"#"===t[0]?this._hexToRgb(t.substring(1)):"rgb("===t.substr(0,4)?(e=c.exec(t.replace(/ /g,"")),{r:parseInt(e[1],10),g:parseInt(e[2],10),b:parseInt(e[3],10)}):{r:0,g:0,b:0}},colorToRGBA:function(t){return t=t||"black",e.Util._namedColorToRBA(t)||e.Util._hex3ColorToRGBA(t)||e.Util._hex6ColorToRGBA(t)||e.Util._rgbColorToRGBA(t)||e.Util._rgbaColorToRGBA(t)||e.Util._hslColorToRGBA(t)},_namedColorToRBA:function(t){var e=u[t.toLowerCase()];return e?{r:e[0],g:e[1],b:e[2],a:1}:null},_rgbColorToRGBA:function(t){if(0===t.indexOf("rgb(")){var e=(t=t.match(/rgb\(([^)]+)\)/)[1]).split(/ *, */).map(Number);return{r:e[0],g:e[1],b:e[2],a:1}}},_rgbaColorToRGBA:function(t){if(0===t.indexOf("rgba(")){var e=(t=t.match(/rgba\(([^)]+)\)/)[1]).split(/ *, */).map(Number);return{r:e[0],g:e[1],b:e[2],a:e[3]}}},_hex6ColorToRGBA:function(t){if("#"===t[0]&&7===t.length)return{r:parseInt(t.slice(1,3),16),g:parseInt(t.slice(3,5),16),b:parseInt(t.slice(5,7),16),a:1}},_hex3ColorToRGBA:function(t){if("#"===t[0]&&4===t.length)return{r:parseInt(t[1]+t[1],16),g:parseInt(t[2]+t[2],16),b:parseInt(t[3]+t[3],16),a:1}},_hslColorToRGBA:function(t){if(/hsl\((\d+),\s*([\d.]+)%,\s*([\d.]+)%\)/g.test(t)){var e=/hsl\((\d+),\s*([\d.]+)%,\s*([\d.]+)%\)/g.exec(t),n=(e[0],e.slice(1)),r=Number(n[0])/360,i=Number(n[1])/100,o=Number(n[2])/100,a=void 0,s=void 0,h=void 0;if(0===i)return h=255*o,{r:Math.round(h),g:Math.round(h),b:Math.round(h),a:1};for(var u=2*o-(a=o<.5?o*(1+i):o+i-o*i),c=[0,0,0],l=0;l<3;l++)(s=r+1/3*-(l-1))<0&&s++,s>1&&s--,h=6*s<1?u+6*(a-u)*s:2*s<1?a:3*s<2?u+(a-u)*(2/3-s)*6:u,c[l]=255*h;return{r:Math.round(c[0]),g:Math.round(c[1]),b:Math.round(c[2]),a:1}}},haveIntersection:function(t,e){return!(e.x>t.x+t.width||e.x+e.width<t.x||e.y>t.y+t.height||e.y+e.height<t.y)},cloneObject:function(t){var e={};for(var n in t)this._isPlainObject(t[n])?e[n]=this.cloneObject(t[n]):this._isArray(t[n])?e[n]=this.cloneArray(t[n]):e[n]=t[n];return e},cloneArray:function(t){return t.slice(0)},_degToRad:function(t){return t*a},_radToDeg:function(t){return t*s},_getRotation:function(t){return r.Konva.angleDeg?e.Util._radToDeg(t):t},_capitalize:function(t){return t.charAt(0).toUpperCase()+t.slice(1)},throw:function(t){throw new Error(h+t)},error:function(t){console.error(h+t)},warn:function(t){r.Konva.showWarnings&&console.warn("Konva warning: "+t)},extend:function(t,e){function n(){this.constructor=t}n.prototype=e.prototype;var r=t.prototype;for(var i in t.prototype=new n,r)r.hasOwnProperty(i)&&(t.prototype[i]=r[i]);t.__super__=e.prototype,t.super=e},_getControlPoints:function(t,e,n,r,i,o,a){var s=Math.sqrt(Math.pow(n-t,2)+Math.pow(r-e,2)),h=Math.sqrt(Math.pow(i-n,2)+Math.pow(o-r,2)),u=a*s/(s+h),c=a*h/(s+h);return[n-u*(i-t),r-u*(o-e),n+c*(i-t),r+c*(o-e)]},_expandPoints:function(t,n){var r,i,o=t.length,a=[];for(r=2;r<o-2;r+=2)i=e.Util._getControlPoints(t[r-2],t[r-1],t[r],t[r+1],t[r+2],t[r+3],n),isNaN(i[0])||(a.push(i[0]),a.push(i[1]),a.push(t[r]),a.push(t[r+1]),a.push(i[2]),a.push(i[3]));return a},each:function(t,e){for(var n in t)e(n,t[n])},_inRange:function(t,e,n){return e<=t&&t<n},_getProjectionToSegment:function(t,e,n,r,i,o){var a,s,h,u=(t-n)*(t-n)+(e-r)*(e-r);if(0==u)a=t,s=e,h=(i-n)*(i-n)+(o-r)*(o-r);else{var c=((i-t)*(n-t)+(o-e)*(r-e))/u;c<0?(a=t,s=e,h=(t-i)*(t-i)+(e-o)*(e-o)):c>1?(a=n,s=r,h=(n-i)*(n-i)+(r-o)*(r-o)):h=((a=t+c*(n-t))-i)*(a-i)+((s=e+c*(r-e))-o)*(s-o)}return[a,s,h]},_getProjectionToLine:function(t,n,r){var i=e.Util.cloneObject(t),o=Number.MAX_VALUE;return n.forEach((function(a,s){if(r||s!==n.length-1){var h=n[(s+1)%n.length],u=e.Util._getProjectionToSegment(a.x,a.y,h.x,h.y,t.x,t.y),c=u[0],l=u[1],f=u[2];f<o&&(i.x=c,i.y=l,o=f)}})),i},_prepareArrayForTween:function(t,n,r){var i,o=[],a=[];if(t.length>n.length){var s=n;n=t,t=s}for(i=0;i<t.length;i+=2)o.push({x:t[i],y:t[i+1]});for(i=0;i<n.length;i+=2)a.push({x:n[i],y:n[i+1]});var h=[];return a.forEach((function(t){var n=e.Util._getProjectionToLine(t,o,r);h.push(n.x),h.push(n.y)})),h},_prepareToStringify:function(t){var n;for(var r in t.visitedByCircularReferenceRemoval=!0,t)if(t.hasOwnProperty(r)&&t[r]&&"object"==typeof t[r])if(n=Object.getOwnPropertyDescriptor(t,r),t[r].visitedByCircularReferenceRemoval||e.Util._isElement(t[r])){if(!n.configurable)return null;delete t[r]}else if(null===e.Util._prepareToStringify(t[r])){if(!n.configurable)return null;delete t[r]}return delete t.visitedByCircularReferenceRemoval,t},_assign:function(t,e){for(var n in e)t[n]=e[n];return t},_getFirstPointerId:function(t){return t.touches?t.changedTouches[0].identifier:999}}},3774:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.getComponentValidator=e.getBooleanValidator=e.getNumberArrayValidator=e.getFunctionValidator=e.getStringOrGradientValidator=e.getStringValidator=e.getNumberOrAutoValidator=e.getNumberOrArrayOfNumbersValidator=e.getNumberValidator=e.alphaComponent=e.RGBComponent=void 0;var r=n(4417),i=n(8588);function o(t){return i.Util._isString(t)?'"'+t+'"':"[object Number]"===Object.prototype.toString.call(t)||i.Util._isBoolean(t)?t:Object.prototype.toString.call(t)}e.RGBComponent=function(t){return t>255?255:t<0?0:Math.round(t)},e.alphaComponent=function(t){return t>1?1:t<1e-4?1e-4:t},e.getNumberValidator=function(){if(r.Konva.isUnminified)return function(t,e){return i.Util._isNumber(t)||i.Util.warn(o(t)+' is a not valid value for "'+e+'" attribute. The value should be a number.'),t}},e.getNumberOrArrayOfNumbersValidator=function(t){if(r.Konva.isUnminified)return function(e,n){var r=i.Util._isNumber(e),a=i.Util._isArray(e)&&e.length==t;return r||a||i.Util.warn(o(e)+' is a not valid value for "'+n+'" attribute. The value should be a number or Array<number>('+t+")"),e}},e.getNumberOrAutoValidator=function(){if(r.Konva.isUnminified)return function(t,e){return i.Util._isNumber(t)||"auto"===t||i.Util.warn(o(t)+' is a not valid value for "'+e+'" attribute. The value should be a number or "auto".'),t}},e.getStringValidator=function(){if(r.Konva.isUnminified)return function(t,e){return i.Util._isString(t)||i.Util.warn(o(t)+' is a not valid value for "'+e+'" attribute. The value should be a string.'),t}},e.getStringOrGradientValidator=function(){if(r.Konva.isUnminified)return function(t,e){var n=i.Util._isString(t),r="[object CanvasGradient]"===Object.prototype.toString.call(t);return n||r||i.Util.warn(o(t)+' is a not valid value for "'+e+'" attribute. The value should be a string or a native gradient.'),t}},e.getFunctionValidator=function(){if(r.Konva.isUnminified)return function(t,e){return i.Util._isFunction(t)||i.Util.warn(o(t)+' is a not valid value for "'+e+'" attribute. The value should be a function.'),t}},e.getNumberArrayValidator=function(){if(r.Konva.isUnminified)return function(t,e){return i.Util._isArray(t)?t.forEach((function(t){i.Util._isNumber(t)||i.Util.warn('"'+e+'" attribute has non numeric element '+t+". Make sure that all elements are numbers.")})):i.Util.warn(o(t)+' is a not valid value for "'+e+'" attribute. The value should be a array of numbers.'),t}},e.getBooleanValidator=function(){if(r.Konva.isUnminified)return function(t,e){return!0===t||!1===t||i.Util.warn(o(t)+' is a not valid value for "'+e+'" attribute. The value should be a boolean.'),t}},e.getComponentValidator=function(t){if(r.Konva.isUnminified)return function(e,n){return i.Util.isObject(e)||i.Util.warn(o(e)+' is a not valid value for "'+n+'" attribute. The value should be an object with properties '+t),e}}},3986:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.Konva=void 0;var r=n(4417),i=n(8588),o=n(7939),a=n(8783),s=n(8342),h=n(4415),u=n(3980),c=n(8985),l=n(210),f=n(7955),p=n(6745),d=n(8017),g=n(3442),v=n(4842);e.Konva=i.Util._assign(r.Konva,{Collection:i.Collection,Util:i.Util,Transform:i.Transform,Node:o.Node,ids:o.ids,names:o.names,Container:a.Container,Stage:s.Stage,stages:s.stages,Layer:h.Layer,FastLayer:u.FastLayer,Group:c.Group,DD:l.DD,Shape:f.Shape,shapes:f.shapes,Animation:p.Animation,Tween:d.Tween,Easings:d.Easings,Context:g.Context,Canvas:v.Canvas})},2076:(t,e,n)=>{"use strict";e.S=void 0;var r=n(3986),i=n(119),o=n(2064),a=n(7643),s=n(535),h=n(1298),u=n(6067),c=n(7149),l=n(7339),f=n(5244),p=n(1785),d=n(657),g=n(8986),v=n(1964),y=n(3787),_=n(2831),m=n(9516),b=n(9846),x=n(2527),w=n(6672),S=n(5309),C=n(1695),P=n(9621),k=n(1179),O=n(7194),A=n(3925),T=n(5751),M=n(6588),F=n(3565),R=n(5929),E=n(7233),D=n(8590),G=n(8280),N=n(3438),I=n(6703),L=n(1665),j=n(1863);e.S=r.Konva.Util._assign(r.Konva,{Arc:i.Arc,Arrow:o.Arrow,Circle:a.Circle,Ellipse:s.Ellipse,Image:h.Image,Label:u.Label,Tag:u.Tag,Line:c.Line,Path:l.Path,Rect:f.Rect,RegularPolygon:p.RegularPolygon,Ring:d.Ring,Sprite:g.Sprite,Star:v.Star,Text:y.Text,TextPath:_.TextPath,Transformer:m.Transformer,Wedge:b.Wedge,Filters:{Blur:x.Blur,Brighten:w.Brighten,Contrast:S.Contrast,Emboss:C.Emboss,Enhance:P.Enhance,Grayscale:k.Grayscale,HSL:O.HSL,HSV:A.HSV,Invert:T.Invert,Kaleidoscope:M.Kaleidoscope,Mask:F.Mask,Noise:R.Noise,Pixelate:E.Pixelate,Posterize:D.Posterize,RGB:G.RGB,RGBA:N.RGBA,Sepia:I.Sepia,Solarize:L.Solarize,Threshold:j.Threshold}})},2527:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.Blur=void 0;var r=n(1455),i=n(7939),o=n(3774);function a(){this.r=0,this.g=0,this.b=0,this.a=0,this.next=null}var s=[512,512,456,512,328,456,335,512,405,328,271,456,388,335,292,512,454,405,364,328,298,271,496,456,420,388,360,335,312,292,273,512,482,454,428,405,383,364,345,328,312,298,284,271,259,496,475,456,437,420,404,388,374,360,347,335,323,312,302,292,282,273,265,512,497,482,468,454,441,428,417,405,394,383,373,364,354,345,337,328,320,312,305,298,291,284,278,271,265,259,507,496,485,475,465,456,446,437,428,420,412,404,396,388,381,374,367,360,354,347,341,335,329,323,318,312,307,302,297,292,287,282,278,273,269,265,261,512,505,497,489,482,475,468,461,454,447,441,435,428,422,417,411,405,399,394,389,383,378,373,368,364,359,354,350,345,341,337,332,328,324,320,316,312,309,305,301,298,294,291,287,284,281,278,274,271,268,265,262,259,257,507,501,496,491,485,480,475,470,465,460,456,451,446,442,437,433,428,424,420,416,412,408,404,400,396,392,388,385,381,377,374,370,367,363,360,357,354,350,347,344,341,338,335,332,329,326,323,320,318,315,312,310,307,304,302,299,297,294,292,289,287,285,282,280,278,275,273,271,269,267,265,263,261,259],h=[9,11,12,13,13,14,14,15,15,15,15,16,16,16,16,17,17,17,17,17,17,17,18,18,18,18,18,18,18,18,18,19,19,19,19,19,19,19,19,19,19,19,19,19,19,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24];e.Blur=function(t){var e=Math.round(this.blurRadius());e>0&&function(t,e){var n,r,i,o,u,c,l,f,p,d,g,v,y,_,m,b,x,w,S,C,P,k,O,A,T=t.data,M=t.width,F=t.height,R=e+e+1,E=M-1,D=F-1,G=e+1,N=G*(G+1)/2,I=new a,L=null,j=I,U=null,B=null,z=s[e],W=h[e];for(i=1;i<R;i++)j=j.next=new a,i===G&&(L=j);for(j.next=I,l=c=0,r=0;r<F;r++){for(b=x=w=S=f=p=d=g=0,v=G*(C=T[c]),y=G*(P=T[c+1]),_=G*(k=T[c+2]),m=G*(O=T[c+3]),f+=N*C,p+=N*P,d+=N*k,g+=N*O,j=I,i=0;i<G;i++)j.r=C,j.g=P,j.b=k,j.a=O,j=j.next;for(i=1;i<G;i++)o=c+((E<i?E:i)<<2),f+=(j.r=C=T[o])*(A=G-i),p+=(j.g=P=T[o+1])*A,d+=(j.b=k=T[o+2])*A,g+=(j.a=O=T[o+3])*A,b+=C,x+=P,w+=k,S+=O,j=j.next;for(U=I,B=L,n=0;n<M;n++)T[c+3]=O=g*z>>W,0!==O?(O=255/O,T[c]=(f*z>>W)*O,T[c+1]=(p*z>>W)*O,T[c+2]=(d*z>>W)*O):T[c]=T[c+1]=T[c+2]=0,f-=v,p-=y,d-=_,g-=m,v-=U.r,y-=U.g,_-=U.b,m-=U.a,o=l+((o=n+e+1)<E?o:E)<<2,f+=b+=U.r=T[o],p+=x+=U.g=T[o+1],d+=w+=U.b=T[o+2],g+=S+=U.a=T[o+3],U=U.next,v+=C=B.r,y+=P=B.g,_+=k=B.b,m+=O=B.a,b-=C,x-=P,w-=k,S-=O,B=B.next,c+=4;l+=M}for(n=0;n<M;n++){for(x=w=S=b=p=d=g=f=0,v=G*(C=T[c=n<<2]),y=G*(P=T[c+1]),_=G*(k=T[c+2]),m=G*(O=T[c+3]),f+=N*C,p+=N*P,d+=N*k,g+=N*O,j=I,i=0;i<G;i++)j.r=C,j.g=P,j.b=k,j.a=O,j=j.next;for(u=M,i=1;i<=e;i++)c=u+n<<2,f+=(j.r=C=T[c])*(A=G-i),p+=(j.g=P=T[c+1])*A,d+=(j.b=k=T[c+2])*A,g+=(j.a=O=T[c+3])*A,b+=C,x+=P,w+=k,S+=O,j=j.next,i<D&&(u+=M);for(c=n,U=I,B=L,r=0;r<F;r++)T[3+(o=c<<2)]=O=g*z>>W,O>0?(O=255/O,T[o]=(f*z>>W)*O,T[o+1]=(p*z>>W)*O,T[o+2]=(d*z>>W)*O):T[o]=T[o+1]=T[o+2]=0,f-=v,p-=y,d-=_,g-=m,v-=U.r,y-=U.g,_-=U.b,m-=U.a,o=n+((o=r+G)<D?o:D)*M<<2,f+=b+=U.r=T[o],p+=x+=U.g=T[o+1],d+=w+=U.b=T[o+2],g+=S+=U.a=T[o+3],U=U.next,v+=C=B.r,y+=P=B.g,_+=k=B.b,m+=O=B.a,b-=C,x-=P,w-=k,S-=O,B=B.next,c+=M}}(t,e)},r.Factory.addGetterSetter(i.Node,"blurRadius",0,o.getNumberValidator(),r.Factory.afterSetFilter)},6672:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.Brighten=void 0;var r=n(1455),i=n(7939),o=n(3774);e.Brighten=function(t){var e,n=255*this.brightness(),r=t.data,i=r.length;for(e=0;e<i;e+=4)r[e]+=n,r[e+1]+=n,r[e+2]+=n},r.Factory.addGetterSetter(i.Node,"brightness",0,o.getNumberValidator(),r.Factory.afterSetFilter)},5309:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.Contrast=void 0;var r=n(1455),i=n(7939),o=n(3774);e.Contrast=function(t){var e,n=Math.pow((this.contrast()+100)/100,2),r=t.data,i=r.length,o=150,a=150,s=150;for(e=0;e<i;e+=4)o=r[e],a=r[e+1],s=r[e+2],o/=255,o-=.5,o*=n,o+=.5,a/=255,a-=.5,a*=n,a+=.5,s/=255,s-=.5,s*=n,s+=.5,o=(o*=255)<0?0:o>255?255:o,a=(a*=255)<0?0:a>255?255:a,s=(s*=255)<0?0:s>255?255:s,r[e]=o,r[e+1]=a,r[e+2]=s},r.Factory.addGetterSetter(i.Node,"contrast",0,o.getNumberValidator(),r.Factory.afterSetFilter)},1695:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.Emboss=void 0;var r=n(1455),i=n(7939),o=n(8588),a=n(3774);e.Emboss=function(t){var e=10*this.embossStrength(),n=255*this.embossWhiteLevel(),r=this.embossDirection(),i=this.embossBlend(),a=0,s=0,h=t.data,u=t.width,c=t.height,l=4*u,f=c;switch(r){case"top-left":a=-1,s=-1;break;case"top":a=-1,s=0;break;case"top-right":a=-1,s=1;break;case"right":a=0,s=1;break;case"bottom-right":a=1,s=1;break;case"bottom":a=1,s=0;break;case"bottom-left":a=1,s=-1;break;case"left":a=0,s=-1;break;default:o.Util.error("Unknown emboss direction: "+r)}do{var p=(f-1)*l,d=a;f+d<1&&(d=0),f+d>c&&(d=0);var g=(f-1+d)*u*4,v=u;do{var y=p+4*(v-1),_=s;v+_<1&&(_=0),v+_>u&&(_=0);var m=g+4*(v-1+_),b=h[y]-h[m],x=h[y+1]-h[m+1],w=h[y+2]-h[m+2],S=b,C=S>0?S:-S;if((x>0?x:-x)>C&&(S=x),(w>0?w:-w)>C&&(S=w),S*=e,i){var P=h[y]+S,k=h[y+1]+S,O=h[y+2]+S;h[y]=P>255?255:P<0?0:P,h[y+1]=k>255?255:k<0?0:k,h[y+2]=O>255?255:O<0?0:O}else{var A=n-S;A<0?A=0:A>255&&(A=255),h[y]=h[y+1]=h[y+2]=A}}while(--v)}while(--f)},r.Factory.addGetterSetter(i.Node,"embossStrength",.5,a.getNumberValidator(),r.Factory.afterSetFilter),r.Factory.addGetterSetter(i.Node,"embossWhiteLevel",.5,a.getNumberValidator(),r.Factory.afterSetFilter),r.Factory.addGetterSetter(i.Node,"embossDirection","top-left",null,r.Factory.afterSetFilter),r.Factory.addGetterSetter(i.Node,"embossBlend",!1,null,r.Factory.afterSetFilter)},9621:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.Enhance=void 0;var r=n(1455),i=n(7939),o=n(3774);function a(t,e,n,r,i){var o=n-e,a=i-r;return 0===o?r+a/2:0===a?r:a*((t-e)/o)+r}e.Enhance=function(t){var e,n,r,i,o=t.data,s=o.length,h=o[0],u=h,c=o[1],l=c,f=o[2],p=f,d=this.enhance();if(0!==d){for(i=0;i<s;i+=4)(e=o[i+0])<h?h=e:e>u&&(u=e),(n=o[i+1])<c?c=n:n>l&&(l=n),(r=o[i+2])<f?f=r:r>p&&(p=r);var g,v,y,_,m,b,x,w,S;for(u===h&&(u=255,h=0),l===c&&(l=255,c=0),p===f&&(p=255,f=0),d>0?(v=u+d*(255-u),y=h-d*(h-0),m=l+d*(255-l),b=c-d*(c-0),w=p+d*(255-p),S=f-d*(f-0)):(v=u+d*(u-(g=.5*(u+h))),y=h+d*(h-g),m=l+d*(l-(_=.5*(l+c))),b=c+d*(c-_),w=p+d*(p-(x=.5*(p+f))),S=f+d*(f-x)),i=0;i<s;i+=4)o[i+0]=a(o[i+0],h,u,y,v),o[i+1]=a(o[i+1],c,l,b,m),o[i+2]=a(o[i+2],f,p,S,w)}},r.Factory.addGetterSetter(i.Node,"enhance",0,o.getNumberValidator(),r.Factory.afterSetFilter)},1179:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.Grayscale=void 0;e.Grayscale=function(t){var e,n,r=t.data,i=r.length;for(e=0;e<i;e+=4)n=.34*r[e]+.5*r[e+1]+.16*r[e+2],r[e]=n,r[e+1]=n,r[e+2]=n}},7194:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.HSL=void 0;var r=n(1455),i=n(7939),o=n(3774);r.Factory.addGetterSetter(i.Node,"hue",0,o.getNumberValidator(),r.Factory.afterSetFilter),r.Factory.addGetterSetter(i.Node,"saturation",0,o.getNumberValidator(),r.Factory.afterSetFilter),r.Factory.addGetterSetter(i.Node,"luminance",0,o.getNumberValidator(),r.Factory.afterSetFilter);e.HSL=function(t){var e,n,r,i,o,a=t.data,s=a.length,h=Math.pow(2,this.saturation()),u=Math.abs(this.hue()+360)%360,c=127*this.luminance(),l=1*h*Math.cos(u*Math.PI/180),f=1*h*Math.sin(u*Math.PI/180),p=.299+.701*l+.167*f,d=.587-.587*l+.33*f,g=.114-.114*l-.497*f,v=.299-.299*l-.328*f,y=.587+.413*l+.035*f,_=.114-.114*l+.293*f,m=.299-.3*l+1.25*f,b=.587-.586*l-1.05*f,x=.114+.886*l-.2*f;for(e=0;e<s;e+=4)n=a[e+0],r=a[e+1],i=a[e+2],o=a[e+3],a[e+0]=p*n+d*r+g*i+c,a[e+1]=v*n+y*r+_*i+c,a[e+2]=m*n+b*r+x*i+c,a[e+3]=o}},3925:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.HSV=void 0;var r=n(1455),i=n(7939),o=n(3774);e.HSV=function(t){var e,n,r,i,o,a=t.data,s=a.length,h=Math.pow(2,this.value()),u=Math.pow(2,this.saturation()),c=Math.abs(this.hue()+360)%360,l=h*u*Math.cos(c*Math.PI/180),f=h*u*Math.sin(c*Math.PI/180),p=.299*h+.701*l+.167*f,d=.587*h-.587*l+.33*f,g=.114*h-.114*l-.497*f,v=.299*h-.299*l-.328*f,y=.587*h+.413*l+.035*f,_=.114*h-.114*l+.293*f,m=.299*h-.3*l+1.25*f,b=.587*h-.586*l-1.05*f,x=.114*h+.886*l-.2*f;for(e=0;e<s;e+=4)n=a[e+0],r=a[e+1],i=a[e+2],o=a[e+3],a[e+0]=p*n+d*r+g*i,a[e+1]=v*n+y*r+_*i,a[e+2]=m*n+b*r+x*i,a[e+3]=o},r.Factory.addGetterSetter(i.Node,"hue",0,o.getNumberValidator(),r.Factory.afterSetFilter),r.Factory.addGetterSetter(i.Node,"saturation",0,o.getNumberValidator(),r.Factory.afterSetFilter),r.Factory.addGetterSetter(i.Node,"value",0,o.getNumberValidator(),r.Factory.afterSetFilter)},5751:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.Invert=void 0;e.Invert=function(t){var e,n=t.data,r=n.length;for(e=0;e<r;e+=4)n[e]=255-n[e],n[e+1]=255-n[e+1],n[e+2]=255-n[e+2]}},6588:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.Kaleidoscope=void 0;var r=n(1455),i=n(7939),o=n(8588),a=n(3774);e.Kaleidoscope=function(t){var e,n,r,i,a,s,h,u,c,l=t.width,f=t.height,p=Math.round(this.kaleidoscopePower()),d=Math.round(this.kaleidoscopeAngle()),g=Math.floor(l*(d%360)/360);if(!(p<1)){var v=o.Util.createCanvasElement();v.width=l,v.height=f;var y=v.getContext("2d").getImageData(0,0,l,f);!function(t,e,n){var r,i,o,a,s=t.data,h=e.data,u=t.width,c=t.height,l=n.polarCenterX||u/2,f=n.polarCenterY||c/2,p=0,d=0,g=0,v=0,y=Math.sqrt(l*l+f*f);i=u-l,o=c-f,y=(a=Math.sqrt(i*i+o*o))>y?a:y;var _,m,b,x,w=c,S=u,C=360/S*Math.PI/180;for(m=0;m<S;m+=1)for(b=Math.sin(m*C),x=Math.cos(m*C),_=0;_<w;_+=1)i=Math.floor(l+y*_/w*x),p=s[0+(r=4*((o=Math.floor(f+y*_/w*b))*u+i))],d=s[r+1],g=s[r+2],v=s[r+3],h[0+(r=4*(m+_*u))]=p,h[r+1]=d,h[r+2]=g,h[r+3]=v}(t,y,{polarCenterX:l/2,polarCenterY:f/2});for(var _=l/Math.pow(2,p);_<=8;)_*=2,p-=1;var m=_=Math.ceil(_),b=0,x=m,w=1;for(g+_>l&&(b=m,x=0,w=-1),n=0;n<f;n+=1)for(e=b;e!==x;e+=w)u=4*(l*n+Math.round(e+g)%l),i=y.data[u+0],a=y.data[u+1],s=y.data[u+2],h=y.data[u+3],c=4*(l*n+e),y.data[c+0]=i,y.data[c+1]=a,y.data[c+2]=s,y.data[c+3]=h;for(n=0;n<f;n+=1)for(m=Math.floor(_),r=0;r<p;r+=1){for(e=0;e<m+1;e+=1)u=4*(l*n+e),i=y.data[u+0],a=y.data[u+1],s=y.data[u+2],h=y.data[u+3],c=4*(l*n+2*m-e-1),y.data[c+0]=i,y.data[c+1]=a,y.data[c+2]=s,y.data[c+3]=h;m*=2}!function(t,e,n){var r,i,o,a,s,h,u=t.data,c=e.data,l=t.width,f=t.height,p=n.polarCenterX||l/2,d=n.polarCenterY||f/2,g=0,v=0,y=0,_=0,m=Math.sqrt(p*p+d*d);i=l-p,o=f-d,m=(h=Math.sqrt(i*i+o*o))>m?h:m;var b,x,w,S=f,C=l,P=n.polarRotation||0;for(i=0;i<l;i+=1)for(o=0;o<f;o+=1)a=i-p,s=o-d,b=Math.sqrt(a*a+s*s)*S/m,x=(x=(180*Math.atan2(s,a)/Math.PI+360+P)%360)*C/360,w=Math.floor(x),g=u[0+(r=4*(Math.floor(b)*l+w))],v=u[r+1],y=u[r+2],_=u[r+3],c[0+(r=4*(o*l+i))]=g,c[r+1]=v,c[r+2]=y,c[r+3]=_}(y,t,{polarRotation:0})}},r.Factory.addGetterSetter(i.Node,"kaleidoscopePower",2,a.getNumberValidator(),r.Factory.afterSetFilter),r.Factory.addGetterSetter(i.Node,"kaleidoscopeAngle",0,a.getNumberValidator(),r.Factory.afterSetFilter)},3565:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.Mask=void 0;var r=n(1455),i=n(7939),o=n(3774);function a(t,e,n){var r=4*(n*t.width+e),i=[];return i.push(t.data[r++],t.data[r++],t.data[r++],t.data[r++]),i}function s(t,e){return Math.sqrt(Math.pow(t[0]-e[0],2)+Math.pow(t[1]-e[1],2)+Math.pow(t[2]-e[2],2))}e.Mask=function(t){var e=function(t,e){var n=a(t,0,0),r=a(t,t.width-1,0),i=a(t,0,t.height-1),o=a(t,t.width-1,t.height-1),h=e||10;if(s(n,r)<h&&s(r,o)<h&&s(o,i)<h&&s(i,n)<h){for(var u=function(t){for(var e=[0,0,0],n=0;n<t.length;n++)e[0]+=t[n][0],e[1]+=t[n][1],e[2]+=t[n][2];return e[0]/=t.length,e[1]/=t.length,e[2]/=t.length,e}([r,n,o,i]),c=[],l=0;l<t.width*t.height;l++){var f=s(u,[t.data[4*l],t.data[4*l+1],t.data[4*l+2]]);c[l]=f<h?0:255}return c}}(t,this.threshold());return e&&function(t,e){for(var n=0;n<t.width*t.height;n++)t.data[4*n+3]=e[n]}(t,e=function(t,e,n){for(var r=[1/9,1/9,1/9,1/9,1/9,1/9,1/9,1/9,1/9],i=Math.round(Math.sqrt(r.length)),o=Math.floor(i/2),a=[],s=0;s<n;s++)for(var h=0;h<e;h++){for(var u=s*e+h,c=0,l=0;l<i;l++)for(var f=0;f<i;f++){var p=s+l-o,d=h+f-o;if(p>=0&&p<n&&d>=0&&d<e){var g=r[l*i+f];c+=t[p*e+d]*g}}a[u]=c}return a}(e=function(t,e,n){for(var r=[1,1,1,1,1,1,1,1,1],i=Math.round(Math.sqrt(r.length)),o=Math.floor(i/2),a=[],s=0;s<n;s++)for(var h=0;h<e;h++){for(var u=s*e+h,c=0,l=0;l<i;l++)for(var f=0;f<i;f++){var p=s+l-o,d=h+f-o;if(p>=0&&p<n&&d>=0&&d<e){var g=r[l*i+f];c+=t[p*e+d]*g}}a[u]=c>=1020?255:0}return a}(e=function(t,e,n){for(var r=[1,1,1,1,0,1,1,1,1],i=Math.round(Math.sqrt(r.length)),o=Math.floor(i/2),a=[],s=0;s<n;s++)for(var h=0;h<e;h++){for(var u=s*e+h,c=0,l=0;l<i;l++)for(var f=0;f<i;f++){var p=s+l-o,d=h+f-o;if(p>=0&&p<n&&d>=0&&d<e){var g=r[l*i+f];c+=t[p*e+d]*g}}a[u]=2040===c?255:0}return a}(e,t.width,t.height),t.width,t.height),t.width,t.height)),t},r.Factory.addGetterSetter(i.Node,"threshold",0,o.getNumberValidator(),r.Factory.afterSetFilter)},5929:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.Noise=void 0;var r=n(1455),i=n(7939),o=n(3774);e.Noise=function(t){var e,n=255*this.noise(),r=t.data,i=r.length,o=n/2;for(e=0;e<i;e+=4)r[e+0]+=o-2*o*Math.random(),r[e+1]+=o-2*o*Math.random(),r[e+2]+=o-2*o*Math.random()},r.Factory.addGetterSetter(i.Node,"noise",.2,o.getNumberValidator(),r.Factory.afterSetFilter)},7233:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.Pixelate=void 0;var r=n(1455),i=n(8588),o=n(7939),a=n(3774);e.Pixelate=function(t){var e,n,r,o,a,s,h,u,c,l,f,p,d,g,v=Math.ceil(this.pixelSize()),y=t.width,_=t.height,m=Math.ceil(y/v),b=Math.ceil(_/v),x=t.data;if(v<=0)i.Util.error("pixelSize value can not be <= 0");else for(p=0;p<m;p+=1)for(d=0;d<b;d+=1){for(o=0,a=0,s=0,h=0,c=(u=p*v)+v,f=(l=d*v)+v,g=0,e=u;e<c;e+=1)if(!(e>=y))for(n=l;n<f;n+=1)n>=_||(o+=x[(r=4*(y*n+e))+0],a+=x[r+1],s+=x[r+2],h+=x[r+3],g+=1);for(o/=g,a/=g,s/=g,h/=g,e=u;e<c;e+=1)if(!(e>=y))for(n=l;n<f;n+=1)n>=_||(x[(r=4*(y*n+e))+0]=o,x[r+1]=a,x[r+2]=s,x[r+3]=h)}},r.Factory.addGetterSetter(o.Node,"pixelSize",8,a.getNumberValidator(),r.Factory.afterSetFilter)},8590:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.Posterize=void 0;var r=n(1455),i=n(7939),o=n(3774);e.Posterize=function(t){var e,n=Math.round(254*this.levels())+1,r=t.data,i=r.length,o=255/n;for(e=0;e<i;e+=1)r[e]=Math.floor(r[e]/o)*o},r.Factory.addGetterSetter(i.Node,"levels",.5,o.getNumberValidator(),r.Factory.afterSetFilter)},8280:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.RGB=void 0;var r=n(1455),i=n(7939),o=n(3774);e.RGB=function(t){var e,n,r=t.data,i=r.length,o=this.red(),a=this.green(),s=this.blue();for(e=0;e<i;e+=4)n=(.34*r[e]+.5*r[e+1]+.16*r[e+2])/255,r[e]=n*o,r[e+1]=n*a,r[e+2]=n*s,r[e+3]=r[e+3]},r.Factory.addGetterSetter(i.Node,"red",0,(function(t){return this._filterUpToDate=!1,t>255?255:t<0?0:Math.round(t)})),r.Factory.addGetterSetter(i.Node,"green",0,(function(t){return this._filterUpToDate=!1,t>255?255:t<0?0:Math.round(t)})),r.Factory.addGetterSetter(i.Node,"blue",0,o.RGBComponent,r.Factory.afterSetFilter)},3438:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.RGBA=void 0;var r=n(1455),i=n(7939),o=n(3774);e.RGBA=function(t){var e,n,r=t.data,i=r.length,o=this.red(),a=this.green(),s=this.blue(),h=this.alpha();for(e=0;e<i;e+=4)n=1-h,r[e]=o*h+r[e]*n,r[e+1]=a*h+r[e+1]*n,r[e+2]=s*h+r[e+2]*n},r.Factory.addGetterSetter(i.Node,"red",0,(function(t){return this._filterUpToDate=!1,t>255?255:t<0?0:Math.round(t)})),r.Factory.addGetterSetter(i.Node,"green",0,(function(t){return this._filterUpToDate=!1,t>255?255:t<0?0:Math.round(t)})),r.Factory.addGetterSetter(i.Node,"blue",0,o.RGBComponent,r.Factory.afterSetFilter),r.Factory.addGetterSetter(i.Node,"alpha",1,(function(t){return this._filterUpToDate=!1,t>1?1:t<0?0:t}))},6703:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.Sepia=void 0;e.Sepia=function(t){var e,n,r,i,o=t.data,a=o.length;for(e=0;e<a;e+=4)n=o[e+0],r=o[e+1],i=o[e+2],o[e+0]=Math.min(255,.393*n+.769*r+.189*i),o[e+1]=Math.min(255,.349*n+.686*r+.168*i),o[e+2]=Math.min(255,.272*n+.534*r+.131*i)}},1665:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.Solarize=void 0;e.Solarize=function(t){var e=t.data,n=t.width,r=4*n,i=t.height;do{var o=(i-1)*r,a=n;do{var s=o+4*(a-1),h=e[s],u=e[s+1],c=e[s+2];h>127&&(h=255-h),u>127&&(u=255-u),c>127&&(c=255-c),e[s]=h,e[s+1]=u,e[s+2]=c}while(--a)}while(--i)}},1863:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.Threshold=void 0;var r=n(1455),i=n(7939),o=n(3774);e.Threshold=function(t){var e,n=255*this.threshold(),r=t.data,i=r.length;for(e=0;e<i;e+=1)r[e]=r[e]<n?0:255},r.Factory.addGetterSetter(i.Node,"threshold",.5,o.getNumberValidator(),r.Factory.afterSetFilter)},185:(t,e,n)=>{var r=n(2076).S;r._injectGlobal(r),e.default=r,t.exports=e.default},119:function(t,e,n){"use strict";var r,i=this&&this.__extends||(r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])})(t,e)},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});Object.defineProperty(e,"__esModule",{value:!0}),e.Arc=void 0;var o=n(8588),a=n(1455),s=n(7955),h=n(4417),u=n(3774),c=n(4417),l=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return i(e,t),e.prototype._sceneFunc=function(t){var e=h.Konva.getAngle(this.angle()),n=this.clockwise();t.beginPath(),t.arc(0,0,this.outerRadius(),0,e,n),t.arc(0,0,this.innerRadius(),e,0,!n),t.closePath(),t.fillStrokeShape(this)},e.prototype.getWidth=function(){return 2*this.outerRadius()},e.prototype.getHeight=function(){return 2*this.outerRadius()},e.prototype.setWidth=function(t){this.outerRadius(t/2)},e.prototype.setHeight=function(t){this.outerRadius(t/2)},e}(s.Shape);e.Arc=l,l.prototype._centroid=!0,l.prototype.className="Arc",l.prototype._attrsAffectingSize=["innerRadius","outerRadius"],c._registerNode(l),a.Factory.addGetterSetter(l,"innerRadius",0,u.getNumberValidator()),a.Factory.addGetterSetter(l,"outerRadius",0,u.getNumberValidator()),a.Factory.addGetterSetter(l,"angle",0,u.getNumberValidator()),a.Factory.addGetterSetter(l,"clockwise",!1,u.getBooleanValidator()),o.Collection.mapMethods(l)},2064:function(t,e,n){"use strict";var r,i=this&&this.__extends||(r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])})(t,e)},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});Object.defineProperty(e,"__esModule",{value:!0}),e.Arrow=void 0;var o=n(8588),a=n(1455),s=n(7149),h=n(3774),u=n(4417),c=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return i(e,t),e.prototype._sceneFunc=function(e){t.prototype._sceneFunc.call(this,e);var n=2*Math.PI,r=this.points(),i=r,o=0!==this.tension()&&r.length>4;o&&(i=this.getTensionPoints());var a,s,h=r.length;o?(a=r[h-2]-(i[i.length-2]+i[i.length-4])/2,s=r[h-1]-(i[i.length-1]+i[i.length-3])/2):(a=r[h-2]-r[h-4],s=r[h-1]-r[h-3]);var u=(Math.atan2(s,a)+n)%n,c=this.pointerLength(),l=this.pointerWidth();e.save(),e.beginPath(),e.translate(r[h-2],r[h-1]),e.rotate(u),e.moveTo(0,0),e.lineTo(-c,l/2),e.lineTo(-c,-l/2),e.closePath(),e.restore(),this.pointerAtBeginning()&&(e.save(),e.translate(r[0],r[1]),o?(a=(i[0]+i[2])/2-r[0],s=(i[1]+i[3])/2-r[1]):(a=r[2]-r[0],s=r[3]-r[1]),e.rotate((Math.atan2(-s,-a)+n)%n),e.moveTo(0,0),e.lineTo(-c,l/2),e.lineTo(-c,-l/2),e.closePath(),e.restore());var f=this.dashEnabled();f&&(this.attrs.dashEnabled=!1,e.setLineDash([])),e.fillStrokeShape(this),f&&(this.attrs.dashEnabled=!0)},e.prototype.getSelfRect=function(){var e=t.prototype.getSelfRect.call(this),n=this.pointerWidth()/2;return{x:e.x-n,y:e.y-n,width:e.width+2*n,height:e.height+2*n}},e}(s.Line);e.Arrow=c,c.prototype.className="Arrow",u._registerNode(c),a.Factory.addGetterSetter(c,"pointerLength",10,h.getNumberValidator()),a.Factory.addGetterSetter(c,"pointerWidth",10,h.getNumberValidator()),a.Factory.addGetterSetter(c,"pointerAtBeginning",!1),o.Collection.mapMethods(c)},7643:function(t,e,n){"use strict";var r,i=this&&this.__extends||(r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])})(t,e)},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});Object.defineProperty(e,"__esModule",{value:!0}),e.Circle=void 0;var o=n(8588),a=n(1455),s=n(7955),h=n(3774),u=n(4417),c=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return i(e,t),e.prototype._sceneFunc=function(t){t.beginPath(),t.arc(0,0,this.attrs.radius||0,0,2*Math.PI,!1),t.closePath(),t.fillStrokeShape(this)},e.prototype.getWidth=function(){return 2*this.radius()},e.prototype.getHeight=function(){return 2*this.radius()},e.prototype.setWidth=function(t){this.radius()!==t/2&&this.radius(t/2)},e.prototype.setHeight=function(t){this.radius()!==t/2&&this.radius(t/2)},e}(s.Shape);e.Circle=c,c.prototype._centroid=!0,c.prototype.className="Circle",c.prototype._attrsAffectingSize=["radius"],u._registerNode(c),a.Factory.addGetterSetter(c,"radius",0,h.getNumberValidator()),o.Collection.mapMethods(c)},535:function(t,e,n){"use strict";var r,i=this&&this.__extends||(r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])})(t,e)},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});Object.defineProperty(e,"__esModule",{value:!0}),e.Ellipse=void 0;var o=n(8588),a=n(1455),s=n(7955),h=n(3774),u=n(4417),c=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return i(e,t),e.prototype._sceneFunc=function(t){var e=this.radiusX(),n=this.radiusY();t.beginPath(),t.save(),e!==n&&t.scale(1,n/e),t.arc(0,0,e,0,2*Math.PI,!1),t.restore(),t.closePath(),t.fillStrokeShape(this)},e.prototype.getWidth=function(){return 2*this.radiusX()},e.prototype.getHeight=function(){return 2*this.radiusY()},e.prototype.setWidth=function(t){this.radiusX(t/2)},e.prototype.setHeight=function(t){this.radiusY(t/2)},e}(s.Shape);e.Ellipse=c,c.prototype.className="Ellipse",c.prototype._centroid=!0,c.prototype._attrsAffectingSize=["radiusX","radiusY"],u._registerNode(c),a.Factory.addComponentsGetterSetter(c,"radius",["x","y"]),a.Factory.addGetterSetter(c,"radiusX",0,h.getNumberValidator()),a.Factory.addGetterSetter(c,"radiusY",0,h.getNumberValidator()),o.Collection.mapMethods(c)},1298:function(t,e,n){"use strict";var r,i=this&&this.__extends||(r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])})(t,e)},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});Object.defineProperty(e,"__esModule",{value:!0}),e.Image=void 0;var o=n(8588),a=n(1455),s=n(7955),h=n(3774),u=n(4417),c=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return i(e,t),e.prototype._useBufferCanvas=function(){return t.prototype._useBufferCanvas.call(this,!0)},e.prototype._sceneFunc=function(t){var e,n=this.getWidth(),r=this.getHeight(),i=this.attrs.image;if(i){var o=this.attrs.cropWidth,a=this.attrs.cropHeight;e=o&&a?[i,this.cropX(),this.cropY(),o,a,0,0,n,r]:[i,0,0,n,r]}(this.hasFill()||this.hasStroke())&&(t.beginPath(),t.rect(0,0,n,r),t.closePath(),t.fillStrokeShape(this)),i&&t.drawImage.apply(t,e)},e.prototype._hitFunc=function(t){var e=this.width(),n=this.height();t.beginPath(),t.rect(0,0,e,n),t.closePath(),t.fillStrokeShape(this)},e.prototype.getWidth=function(){var t,e;return null!==(t=this.attrs.width)&&void 0!==t?t:(null===(e=this.image())||void 0===e?void 0:e.width)||0},e.prototype.getHeight=function(){var t,e;return null!==(t=this.attrs.height)&&void 0!==t?t:(null===(e=this.image())||void 0===e?void 0:e.height)||0},e.fromURL=function(t,n){var r=o.Util.createImageElement();r.onload=function(){var t=new e({image:r});n(t)},r.crossOrigin="Anonymous",r.src=t},e}(s.Shape);e.Image=c,c.prototype.className="Image",u._registerNode(c),a.Factory.addGetterSetter(c,"image"),a.Factory.addComponentsGetterSetter(c,"crop",["x","y","width","height"]),a.Factory.addGetterSetter(c,"cropX",0,h.getNumberValidator()),a.Factory.addGetterSetter(c,"cropY",0,h.getNumberValidator()),a.Factory.addGetterSetter(c,"cropWidth",0,h.getNumberValidator()),a.Factory.addGetterSetter(c,"cropHeight",0,h.getNumberValidator()),o.Collection.mapMethods(c)},6067:function(t,e,n){"use strict";var r,i=this&&this.__extends||(r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])})(t,e)},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});Object.defineProperty(e,"__esModule",{value:!0}),e.Tag=e.Label=void 0;var o=n(8588),a=n(1455),s=n(7955),h=n(8985),u=n(3774),c=n(4417),l=["fontFamily","fontSize","fontStyle","padding","lineHeight","text","width","height"],f="up",p="right",d="down",g="left",v=l.length,y=function(t){function e(e){var n=t.call(this,e)||this;return n.on("add.konva",(function(t){this._addListeners(t.child),this._sync()})),n}return i(e,t),e.prototype.getText=function(){return this.find("Text")[0]},e.prototype.getTag=function(){return this.find("Tag")[0]},e.prototype._addListeners=function(t){var e,n=this,r=function(){n._sync()};for(e=0;e<v;e++)t.on(l[e]+"Change.konva",r)},e.prototype.getWidth=function(){return this.getText().width()},e.prototype.getHeight=function(){return this.getText().height()},e.prototype._sync=function(){var t,e,n,r,i,o,a,s=this.getText(),h=this.getTag();if(s&&h){switch(t=s.width(),e=s.height(),n=h.pointerDirection(),r=h.pointerWidth(),a=h.pointerHeight(),i=0,o=0,n){case f:i=t/2,o=-1*a;break;case p:i=t+r,o=e/2;break;case d:i=t/2,o=e+a;break;case g:i=-1*r,o=e/2}h.setAttrs({x:-1*i,y:-1*o,width:t,height:e}),s.setAttrs({x:-1*i,y:-1*o})}},e}(h.Group);e.Label=y,y.prototype.className="Label",c._registerNode(y),o.Collection.mapMethods(y);var _=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return i(e,t),e.prototype._sceneFunc=function(t){var e=this.width(),n=this.height(),r=this.pointerDirection(),i=this.pointerWidth(),o=this.pointerHeight(),a=this.cornerRadius(),s=0,h=0,u=0,c=0;"number"==typeof a?s=h=u=c=Math.min(a,e/2,n/2):(s=Math.min(a[0]||0,e/2,n/2),h=Math.min(a[1]||0,e/2,n/2),c=Math.min(a[2]||0,e/2,n/2),u=Math.min(a[3]||0,e/2,n/2)),t.beginPath(),t.moveTo(s,0),r===f&&(t.lineTo((e-i)/2,0),t.lineTo(e/2,-1*o),t.lineTo((e+i)/2,0)),t.lineTo(e-h,0),t.arc(e-h,h,h,3*Math.PI/2,0,!1),r===p&&(t.lineTo(e,(n-o)/2),t.lineTo(e+i,n/2),t.lineTo(e,(n+o)/2)),t.lineTo(e,n-c),t.arc(e-c,n-c,c,0,Math.PI/2,!1),r===d&&(t.lineTo((e+i)/2,n),t.lineTo(e/2,n+o),t.lineTo((e-i)/2,n)),t.lineTo(u,n),t.arc(u,n-u,u,Math.PI/2,Math.PI,!1),r===g&&(t.lineTo(0,(n+o)/2),t.lineTo(-1*i,n/2),t.lineTo(0,(n-o)/2)),t.lineTo(0,s),t.arc(s,s,s,Math.PI,3*Math.PI/2,!1),t.closePath(),t.fillStrokeShape(this)},e.prototype.getSelfRect=function(){var t=0,e=0,n=this.pointerWidth(),r=this.pointerHeight(),i=this.pointerDirection(),o=this.width(),a=this.height();return i===f?(e-=r,a+=r):i===d?a+=r:i===g?(t-=1.5*n,o+=n):i===p&&(o+=1.5*n),{x:t,y:e,width:o,height:a}},e}(s.Shape);e.Tag=_,_.prototype.className="Tag",c._registerNode(_),a.Factory.addGetterSetter(_,"pointerDirection","none"),a.Factory.addGetterSetter(_,"pointerWidth",0,u.getNumberValidator()),a.Factory.addGetterSetter(_,"pointerHeight",0,u.getNumberValidator()),a.Factory.addGetterSetter(_,"cornerRadius",0,u.getNumberOrArrayOfNumbersValidator(4)),o.Collection.mapMethods(_)},7149:function(t,e,n){"use strict";var r,i=this&&this.__extends||(r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])})(t,e)},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}),o=this&&this.__spreadArrays||function(){for(var t=0,e=0,n=arguments.length;e<n;e++)t+=arguments[e].length;var r=Array(t),i=0;for(e=0;e<n;e++)for(var o=arguments[e],a=0,s=o.length;a<s;a++,i++)r[i]=o[a];return r};Object.defineProperty(e,"__esModule",{value:!0}),e.Line=void 0;var a=n(8588),s=n(1455),h=n(7955),u=n(3774),c=n(4417),l=function(t){function e(e){var n=t.call(this,e)||this;return n.on("pointsChange.konva tensionChange.konva closedChange.konva bezierChange.konva",(function(){this._clearCache("tensionPoints")})),n}return i(e,t),e.prototype._sceneFunc=function(t){var e,n,r,i=this.points(),o=i.length,a=this.tension(),s=this.closed(),h=this.bezier();if(o){if(t.beginPath(),t.moveTo(i[0],i[1]),0!==a&&o>4){for(n=(e=this.getTensionPoints()).length,r=s?0:4,s||t.quadraticCurveTo(e[0],e[1],e[2],e[3]);r<n-2;)t.bezierCurveTo(e[r++],e[r++],e[r++],e[r++],e[r++],e[r++]);s||t.quadraticCurveTo(e[n-2],e[n-1],i[o-2],i[o-1])}else if(h)for(r=2;r<o;)t.bezierCurveTo(i[r++],i[r++],i[r++],i[r++],i[r++],i[r++]);else for(r=2;r<o;r+=2)t.lineTo(i[r],i[r+1]);s?(t.closePath(),t.fillStrokeShape(this)):t.strokeShape(this)}},e.prototype.getTensionPoints=function(){return this._getCache("tensionPoints",this._getTensionPoints)},e.prototype._getTensionPoints=function(){return this.closed()?this._getTensionPointsClosed():a.Util._expandPoints(this.points(),this.tension())},e.prototype._getTensionPointsClosed=function(){var t=this.points(),e=t.length,n=this.tension(),r=a.Util._getControlPoints(t[e-2],t[e-1],t[0],t[1],t[2],t[3],n),i=a.Util._getControlPoints(t[e-4],t[e-3],t[e-2],t[e-1],t[0],t[1],n),o=a.Util._expandPoints(t,n);return[r[2],r[3]].concat(o).concat([i[0],i[1],t[e-2],t[e-1],i[2],i[3],r[0],r[1],t[0],t[1]])},e.prototype.getWidth=function(){return this.getSelfRect().width},e.prototype.getHeight=function(){return this.getSelfRect().height},e.prototype.getSelfRect=function(){var t=this.points();if(t.length<4)return{x:t[0]||0,y:t[1]||0,width:0,height:0};for(var e,n,r=(t=0!==this.tension()?o([t[0],t[1]],this._getTensionPoints(),[t[t.length-2],t[t.length-1]]):this.points())[0],i=t[0],a=t[1],s=t[1],h=0;h<t.length/2;h++)e=t[2*h],n=t[2*h+1],r=Math.min(r,e),i=Math.max(i,e),a=Math.min(a,n),s=Math.max(s,n);return{x:r,y:a,width:i-r,height:s-a}},e}(h.Shape);e.Line=l,l.prototype.className="Line",l.prototype._attrsAffectingSize=["points","bezier","tension"],c._registerNode(l),s.Factory.addGetterSetter(l,"closed",!1),s.Factory.addGetterSetter(l,"bezier",!1),s.Factory.addGetterSetter(l,"tension",0,u.getNumberValidator()),s.Factory.addGetterSetter(l,"points",[],u.getNumberArrayValidator()),a.Collection.mapMethods(l)},7339:function(t,e,n){"use strict";var r,i=this&&this.__extends||(r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])})(t,e)},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});Object.defineProperty(e,"__esModule",{value:!0}),e.Path=void 0;var o=n(8588),a=n(1455),s=n(7955),h=n(4417),u=function(t){function e(n){var r=t.call(this,n)||this;r.dataArray=[],r.pathLength=0,r.dataArray=e.parsePathData(r.data()),r.pathLength=0;for(var i=0;i<r.dataArray.length;++i)r.pathLength+=r.dataArray[i].pathLength;return r.on("dataChange.konva",(function(){this.dataArray=e.parsePathData(this.data()),this.pathLength=0;for(var t=0;t<this.dataArray.length;++t)this.pathLength+=this.dataArray[t].pathLength})),r}return i(e,t),e.prototype._sceneFunc=function(t){var e=this.dataArray;t.beginPath();for(var n=!1,r=0;r<e.length;r++){var i=e[r].command,o=e[r].points;switch(i){case"L":t.lineTo(o[0],o[1]);break;case"M":t.moveTo(o[0],o[1]);break;case"C":t.bezierCurveTo(o[0],o[1],o[2],o[3],o[4],o[5]);break;case"Q":t.quadraticCurveTo(o[0],o[1],o[2],o[3]);break;case"A":var a=o[0],s=o[1],h=o[2],u=o[3],c=o[4],l=o[5],f=o[6],p=o[7],d=h>u?h:u,g=h>u?1:h/u,v=h>u?u/h:1;t.translate(a,s),t.rotate(f),t.scale(g,v),t.arc(0,0,d,c,c+l,1-p),t.scale(1/g,1/v),t.rotate(-f),t.translate(-a,-s);break;case"z":n=!0,t.closePath()}}n||this.hasFill()?t.fillStrokeShape(this):t.strokeShape(this)},e.prototype.getSelfRect=function(){var t=[];this.dataArray.forEach((function(n){if("A"===n.command){var r=n.points[4],i=n.points[5],o=n.points[4]+i,a=Math.PI/180;if(Math.abs(r-o)<a&&(a=Math.abs(r-o)),i<0)for(var s=r-a;s>o;s-=a){var h=e.getPointOnEllipticalArc(n.points[0],n.points[1],n.points[2],n.points[3],s,0);t.push(h.x,h.y)}else for(s=r+a;s<o;s+=a){h=e.getPointOnEllipticalArc(n.points[0],n.points[1],n.points[2],n.points[3],s,0);t.push(h.x,h.y)}}else if("C"===n.command)for(s=0;s<=1;s+=.01){h=e.getPointOnCubicBezier(s,n.start.x,n.start.y,n.points[0],n.points[1],n.points[2],n.points[3],n.points[4],n.points[5]);t.push(h.x,h.y)}else t=t.concat(n.points)}));for(var n,r,i=t[0],o=t[0],a=t[1],s=t[1],h=0;h<t.length/2;h++)n=t[2*h],r=t[2*h+1],isNaN(n)||(i=Math.min(i,n),o=Math.max(o,n)),isNaN(r)||(a=Math.min(a,r),s=Math.max(s,r));return{x:Math.round(i),y:Math.round(a),width:Math.round(o-i),height:Math.round(s-a)}},e.prototype.getLength=function(){return this.pathLength},e.prototype.getPointAtLength=function(t){var n,r=0,i=this.dataArray.length;if(!i)return null;for(;r<i&&t>this.dataArray[r].pathLength;)t-=this.dataArray[r].pathLength,++r;if(r===i)return{x:(n=this.dataArray[r-1].points.slice(-2))[0],y:n[1]};if(t<.01)return{x:(n=this.dataArray[r].points.slice(0,2))[0],y:n[1]};var o=this.dataArray[r],a=o.points;switch(o.command){case"L":return e.getPointOnLine(t,o.start.x,o.start.y,a[0],a[1]);case"C":return e.getPointOnCubicBezier(t/o.pathLength,o.start.x,o.start.y,a[0],a[1],a[2],a[3],a[4],a[5]);case"Q":return e.getPointOnQuadraticBezier(t/o.pathLength,o.start.x,o.start.y,a[0],a[1],a[2],a[3]);case"A":var s=a[0],h=a[1],u=a[2],c=a[3],l=a[4],f=a[5],p=a[6];return l+=f*t/o.pathLength,e.getPointOnEllipticalArc(s,h,u,c,l,p)}return null},e.getLineLength=function(t,e,n,r){return Math.sqrt((n-t)*(n-t)+(r-e)*(r-e))},e.getPointOnLine=function(t,e,n,r,i,o,a){void 0===o&&(o=e),void 0===a&&(a=n);var s=(i-n)/(r-e+1e-8),h=Math.sqrt(t*t/(1+s*s));r<e&&(h*=-1);var u,c=s*h;if(r===e)u={x:o,y:a+c};else if((a-n)/(o-e+1e-8)===s)u={x:o+h,y:a+c};else{var l,f,p=this.getLineLength(e,n,r,i),d=(o-e)*(r-e)+(a-n)*(i-n);l=e+(d/=p*p)*(r-e),f=n+d*(i-n);var g=this.getLineLength(o,a,l,f),v=Math.sqrt(t*t-g*g);h=Math.sqrt(v*v/(1+s*s)),r<e&&(h*=-1),u={x:l+h,y:f+(c=s*h)}}return u},e.getPointOnCubicBezier=function(t,e,n,r,i,o,a,s,h){function u(t){return t*t*t}function c(t){return 3*t*t*(1-t)}function l(t){return 3*t*(1-t)*(1-t)}function f(t){return(1-t)*(1-t)*(1-t)}return{x:s*u(t)+o*c(t)+r*l(t)+e*f(t),y:h*u(t)+a*c(t)+i*l(t)+n*f(t)}},e.getPointOnQuadraticBezier=function(t,e,n,r,i,o,a){function s(t){return t*t}function h(t){return 2*t*(1-t)}function u(t){return(1-t)*(1-t)}return{x:o*s(t)+r*h(t)+e*u(t),y:a*s(t)+i*h(t)+n*u(t)}},e.getPointOnEllipticalArc=function(t,e,n,r,i,o){var a=Math.cos(o),s=Math.sin(o),h=n*Math.cos(i),u=r*Math.sin(i);return{x:t+(h*a-u*s),y:e+(h*s+u*a)}},e.parsePathData=function(t){if(!t)return[];var e=t,n=["m","M","l","L","v","V","h","H","z","Z","c","C","q","Q","t","T","s","S","a","A"];e=e.replace(new RegExp(" ","g"),",");for(var r=0;r<n.length;r++)e=e.replace(new RegExp(n[r],"g"),"|"+n[r]);var i,o=e.split("|"),a=[],s=[],h=0,u=0,c=/([-+]?((\d+\.\d+)|((\d+)|(\.\d+)))(?:e[-+]?\d+)?)/gi;for(r=1;r<o.length;r++){var l=o[r],f=l.charAt(0);for(l=l.slice(1),s.length=0;i=c.exec(l);)s.push(i[0]);for(var p=[],d=0,g=s.length;d<g;d++){var v=parseFloat(s[d]);isNaN(v)?p.push(0):p.push(v)}for(;p.length>0&&!isNaN(p[0]);){var y,_,m,b,x,w,S,C,P,k,O=null,A=[],T=h,M=u;switch(f){case"l":h+=p.shift(),u+=p.shift(),O="L",A.push(h,u);break;case"L":h=p.shift(),u=p.shift(),A.push(h,u);break;case"m":var F=p.shift(),R=p.shift();if(h+=F,u+=R,O="M",a.length>2&&"z"===a[a.length-1].command)for(var E=a.length-2;E>=0;E--)if("M"===a[E].command){h=a[E].points[0]+F,u=a[E].points[1]+R;break}A.push(h,u),f="l";break;case"M":h=p.shift(),u=p.shift(),O="M",A.push(h,u),f="L";break;case"h":h+=p.shift(),O="L",A.push(h,u);break;case"H":h=p.shift(),O="L",A.push(h,u);break;case"v":u+=p.shift(),O="L",A.push(h,u);break;case"V":u=p.shift(),O="L",A.push(h,u);break;case"C":A.push(p.shift(),p.shift(),p.shift(),p.shift()),h=p.shift(),u=p.shift(),A.push(h,u);break;case"c":A.push(h+p.shift(),u+p.shift(),h+p.shift(),u+p.shift()),h+=p.shift(),u+=p.shift(),O="C",A.push(h,u);break;case"S":_=h,m=u,"C"===(y=a[a.length-1]).command&&(_=h+(h-y.points[2]),m=u+(u-y.points[3])),A.push(_,m,p.shift(),p.shift()),h=p.shift(),u=p.shift(),O="C",A.push(h,u);break;case"s":_=h,m=u,"C"===(y=a[a.length-1]).command&&(_=h+(h-y.points[2]),m=u+(u-y.points[3])),A.push(_,m,h+p.shift(),u+p.shift()),h+=p.shift(),u+=p.shift(),O="C",A.push(h,u);break;case"Q":A.push(p.shift(),p.shift()),h=p.shift(),u=p.shift(),A.push(h,u);break;case"q":A.push(h+p.shift(),u+p.shift()),h+=p.shift(),u+=p.shift(),O="Q",A.push(h,u);break;case"T":_=h,m=u,"Q"===(y=a[a.length-1]).command&&(_=h+(h-y.points[0]),m=u+(u-y.points[1])),h=p.shift(),u=p.shift(),O="Q",A.push(_,m,h,u);break;case"t":_=h,m=u,"Q"===(y=a[a.length-1]).command&&(_=h+(h-y.points[0]),m=u+(u-y.points[1])),h+=p.shift(),u+=p.shift(),O="Q",A.push(_,m,h,u);break;case"A":b=p.shift(),x=p.shift(),w=p.shift(),S=p.shift(),C=p.shift(),P=h,k=u,h=p.shift(),u=p.shift(),O="A",A=this.convertEndpointToCenterParameterization(P,k,h,u,S,C,b,x,w);break;case"a":b=p.shift(),x=p.shift(),w=p.shift(),S=p.shift(),C=p.shift(),P=h,k=u,h+=p.shift(),u+=p.shift(),O="A",A=this.convertEndpointToCenterParameterization(P,k,h,u,S,C,b,x,w)}a.push({command:O||f,points:A,start:{x:T,y:M},pathLength:this.calcLength(T,M,O||f,A)})}"z"!==f&&"Z"!==f||a.push({command:"z",points:[],start:void 0,pathLength:0})}return a},e.calcLength=function(t,n,r,i){var o,a,s,h,u=e;switch(r){case"L":return u.getLineLength(t,n,i[0],i[1]);case"C":for(o=0,a=u.getPointOnCubicBezier(0,t,n,i[0],i[1],i[2],i[3],i[4],i[5]),h=.01;h<=1;h+=.01)s=u.getPointOnCubicBezier(h,t,n,i[0],i[1],i[2],i[3],i[4],i[5]),o+=u.getLineLength(a.x,a.y,s.x,s.y),a=s;return o;case"Q":for(o=0,a=u.getPointOnQuadraticBezier(0,t,n,i[0],i[1],i[2],i[3]),h=.01;h<=1;h+=.01)s=u.getPointOnQuadraticBezier(h,t,n,i[0],i[1],i[2],i[3]),o+=u.getLineLength(a.x,a.y,s.x,s.y),a=s;return o;case"A":o=0;var c=i[4],l=i[5],f=i[4]+l,p=Math.PI/180;if(Math.abs(c-f)<p&&(p=Math.abs(c-f)),a=u.getPointOnEllipticalArc(i[0],i[1],i[2],i[3],c,0),l<0)for(h=c-p;h>f;h-=p)s=u.getPointOnEllipticalArc(i[0],i[1],i[2],i[3],h,0),o+=u.getLineLength(a.x,a.y,s.x,s.y),a=s;else for(h=c+p;h<f;h+=p)s=u.getPointOnEllipticalArc(i[0],i[1],i[2],i[3],h,0),o+=u.getLineLength(a.x,a.y,s.x,s.y),a=s;return s=u.getPointOnEllipticalArc(i[0],i[1],i[2],i[3],f,0),o+=u.getLineLength(a.x,a.y,s.x,s.y)}return 0},e.convertEndpointToCenterParameterization=function(t,e,n,r,i,o,a,s,h){var u=h*(Math.PI/180),c=Math.cos(u)*(t-n)/2+Math.sin(u)*(e-r)/2,l=-1*Math.sin(u)*(t-n)/2+Math.cos(u)*(e-r)/2,f=c*c/(a*a)+l*l/(s*s);f>1&&(a*=Math.sqrt(f),s*=Math.sqrt(f));var p=Math.sqrt((a*a*(s*s)-a*a*(l*l)-s*s*(c*c))/(a*a*(l*l)+s*s*(c*c)));i===o&&(p*=-1),isNaN(p)&&(p=0);var d=p*a*l/s,g=p*-s*c/a,v=(t+n)/2+Math.cos(u)*d-Math.sin(u)*g,y=(e+r)/2+Math.sin(u)*d+Math.cos(u)*g,_=function(t){return Math.sqrt(t[0]*t[0]+t[1]*t[1])},m=function(t,e){return(t[0]*e[0]+t[1]*e[1])/(_(t)*_(e))},b=function(t,e){return(t[0]*e[1]<t[1]*e[0]?-1:1)*Math.acos(m(t,e))},x=b([1,0],[(c-d)/a,(l-g)/s]),w=[(c-d)/a,(l-g)/s],S=[(-1*c-d)/a,(-1*l-g)/s],C=b(w,S);return m(w,S)<=-1&&(C=Math.PI),m(w,S)>=1&&(C=0),0===o&&C>0&&(C-=2*Math.PI),1===o&&C<0&&(C+=2*Math.PI),[v,y,a,s,x,C,u,o]},e}(s.Shape);e.Path=u,u.prototype.className="Path",u.prototype._attrsAffectingSize=["data"],h._registerNode(u),a.Factory.addGetterSetter(u,"data"),o.Collection.mapMethods(u)},5244:function(t,e,n){"use strict";var r,i=this&&this.__extends||(r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])})(t,e)},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});Object.defineProperty(e,"__esModule",{value:!0}),e.Rect=void 0;var o=n(8588),a=n(1455),s=n(7955),h=n(4417),u=n(3774),c=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return i(e,t),e.prototype._sceneFunc=function(t){var e=this.cornerRadius(),n=this.width(),r=this.height();if(t.beginPath(),e){var i=0,o=0,a=0,s=0;"number"==typeof e?i=o=a=s=Math.min(e,n/2,r/2):(i=Math.min(e[0]||0,n/2,r/2),o=Math.min(e[1]||0,n/2,r/2),s=Math.min(e[2]||0,n/2,r/2),a=Math.min(e[3]||0,n/2,r/2)),t.moveTo(i,0),t.lineTo(n-o,0),t.arc(n-o,o,o,3*Math.PI/2,0,!1),t.lineTo(n,r-s),t.arc(n-s,r-s,s,0,Math.PI/2,!1),t.lineTo(a,r),t.arc(a,r-a,a,Math.PI/2,Math.PI,!1),t.lineTo(0,i),t.arc(i,i,i,Math.PI,3*Math.PI/2,!1)}else t.rect(0,0,n,r);t.closePath(),t.fillStrokeShape(this)},e}(s.Shape);e.Rect=c,c.prototype.className="Rect",h._registerNode(c),a.Factory.addGetterSetter(c,"cornerRadius",0,u.getNumberOrArrayOfNumbersValidator(4)),o.Collection.mapMethods(c)},1785:function(t,e,n){"use strict";var r,i=this&&this.__extends||(r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])})(t,e)},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});Object.defineProperty(e,"__esModule",{value:!0}),e.RegularPolygon=void 0;var o=n(8588),a=n(1455),s=n(7955),h=n(3774),u=n(4417),c=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return i(e,t),e.prototype._sceneFunc=function(t){var e=this._getPoints();t.beginPath(),t.moveTo(e[0].x,e[0].y);for(var n=1;n<e.length;n++)t.lineTo(e[n].x,e[n].y);t.closePath(),t.fillStrokeShape(this)},e.prototype._getPoints=function(){for(var t=this.attrs.sides,e=this.attrs.radius||0,n=[],r=0;r<t;r++)n.push({x:e*Math.sin(2*r*Math.PI/t),y:-1*e*Math.cos(2*r*Math.PI/t)});return n},e.prototype.getSelfRect=function(){var t=this._getPoints(),e=t[0].x,n=t[0].y,r=t[0].x,i=t[0].y;return t.forEach((function(t){e=Math.min(e,t.x),n=Math.max(n,t.x),r=Math.min(r,t.y),i=Math.max(i,t.y)})),{x:e,y:r,width:n-e,height:i-r}},e.prototype.getWidth=function(){return 2*this.radius()},e.prototype.getHeight=function(){return 2*this.radius()},e.prototype.setWidth=function(t){this.radius(t/2)},e.prototype.setHeight=function(t){this.radius(t/2)},e}(s.Shape);e.RegularPolygon=c,c.prototype.className="RegularPolygon",c.prototype._centroid=!0,c.prototype._attrsAffectingSize=["radius"],u._registerNode(c),a.Factory.addGetterSetter(c,"radius",0,h.getNumberValidator()),a.Factory.addGetterSetter(c,"sides",0,h.getNumberValidator()),o.Collection.mapMethods(c)},657:function(t,e,n){"use strict";var r,i=this&&this.__extends||(r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])})(t,e)},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});Object.defineProperty(e,"__esModule",{value:!0}),e.Ring=void 0;var o=n(8588),a=n(1455),s=n(7955),h=n(3774),u=n(4417),c=2*Math.PI,l=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return i(e,t),e.prototype._sceneFunc=function(t){t.beginPath(),t.arc(0,0,this.innerRadius(),0,c,!1),t.moveTo(this.outerRadius(),0),t.arc(0,0,this.outerRadius(),c,0,!0),t.closePath(),t.fillStrokeShape(this)},e.prototype.getWidth=function(){return 2*this.outerRadius()},e.prototype.getHeight=function(){return 2*this.outerRadius()},e.prototype.setWidth=function(t){this.outerRadius(t/2)},e.prototype.setHeight=function(t){this.outerRadius(t/2)},e}(s.Shape);e.Ring=l,l.prototype.className="Ring",l.prototype._centroid=!0,l.prototype._attrsAffectingSize=["innerRadius","outerRadius"],u._registerNode(l),a.Factory.addGetterSetter(l,"innerRadius",0,h.getNumberValidator()),a.Factory.addGetterSetter(l,"outerRadius",0,h.getNumberValidator()),o.Collection.mapMethods(l)},8986:function(t,e,n){"use strict";var r,i=this&&this.__extends||(r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])})(t,e)},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});Object.defineProperty(e,"__esModule",{value:!0}),e.Sprite=void 0;var o=n(8588),a=n(1455),s=n(7955),h=n(6745),u=n(3774),c=n(4417),l=function(t){function e(e){var n=t.call(this,e)||this;return n._updated=!0,n.anim=new h.Animation((function(){var t=n._updated;return n._updated=!1,t})),n.on("animationChange.konva",(function(){this.frameIndex(0)})),n.on("frameIndexChange.konva",(function(){this._updated=!0})),n.on("frameRateChange.konva",(function(){this.anim.isRunning()&&(clearInterval(this.interval),this._setInterval())})),n}return i(e,t),e.prototype._sceneFunc=function(t){var e=this.animation(),n=this.frameIndex(),r=4*n,i=this.animations()[e],o=this.frameOffsets(),a=i[r+0],s=i[r+1],h=i[r+2],u=i[r+3],c=this.image();if((this.hasFill()||this.hasStroke())&&(t.beginPath(),t.rect(0,0,h,u),t.closePath(),t.fillStrokeShape(this)),c)if(o){var l=o[e],f=2*n;t.drawImage(c,a,s,h,u,l[f+0],l[f+1],h,u)}else t.drawImage(c,a,s,h,u,0,0,h,u)},e.prototype._hitFunc=function(t){var e=this.animation(),n=this.frameIndex(),r=4*n,i=this.animations()[e],o=this.frameOffsets(),a=i[r+2],s=i[r+3];if(t.beginPath(),o){var h=o[e],u=2*n;t.rect(h[u+0],h[u+1],a,s)}else t.rect(0,0,a,s);t.closePath(),t.fillShape(this)},e.prototype._useBufferCanvas=function(){return t.prototype._useBufferCanvas.call(this,!0)},e.prototype._setInterval=function(){var t=this;this.interval=setInterval((function(){t._updateIndex()}),1e3/this.frameRate())},e.prototype.start=function(){if(!this.isRunning()){var t=this.getLayer();this.anim.setLayers(t),this._setInterval(),this.anim.start()}},e.prototype.stop=function(){this.anim.stop(),clearInterval(this.interval)},e.prototype.isRunning=function(){return this.anim.isRunning()},e.prototype._updateIndex=function(){var t=this.frameIndex(),e=this.animation();t<this.animations()[e].length/4-1?this.frameIndex(t+1):this.frameIndex(0)},e}(s.Shape);e.Sprite=l,l.prototype.className="Sprite",c._registerNode(l),a.Factory.addGetterSetter(l,"animation"),a.Factory.addGetterSetter(l,"animations"),a.Factory.addGetterSetter(l,"frameOffsets"),a.Factory.addGetterSetter(l,"image"),a.Factory.addGetterSetter(l,"frameIndex",0,u.getNumberValidator()),a.Factory.addGetterSetter(l,"frameRate",17,u.getNumberValidator()),a.Factory.backCompat(l,{index:"frameIndex",getIndex:"getFrameIndex",setIndex:"setFrameIndex"}),o.Collection.mapMethods(l)},1964:function(t,e,n){"use strict";var r,i=this&&this.__extends||(r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])})(t,e)},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});Object.defineProperty(e,"__esModule",{value:!0}),e.Star=void 0;var o=n(8588),a=n(1455),s=n(7955),h=n(3774),u=n(4417),c=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return i(e,t),e.prototype._sceneFunc=function(t){var e=this.innerRadius(),n=this.outerRadius(),r=this.numPoints();t.beginPath(),t.moveTo(0,0-n);for(var i=1;i<2*r;i++){var o=i%2==0?n:e,a=o*Math.sin(i*Math.PI/r),s=-1*o*Math.cos(i*Math.PI/r);t.lineTo(a,s)}t.closePath(),t.fillStrokeShape(this)},e.prototype.getWidth=function(){return 2*this.outerRadius()},e.prototype.getHeight=function(){return 2*this.outerRadius()},e.prototype.setWidth=function(t){this.outerRadius(t/2)},e.prototype.setHeight=function(t){this.outerRadius(t/2)},e}(s.Shape);e.Star=c,c.prototype.className="Star",c.prototype._centroid=!0,c.prototype._attrsAffectingSize=["innerRadius","outerRadius"],u._registerNode(c),a.Factory.addGetterSetter(c,"numPoints",5,h.getNumberValidator()),a.Factory.addGetterSetter(c,"innerRadius",0,h.getNumberValidator()),a.Factory.addGetterSetter(c,"outerRadius",0,h.getNumberValidator()),o.Collection.mapMethods(c)},3787:function(t,e,n){"use strict";var r,i=this&&this.__extends||(r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])})(t,e)},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});Object.defineProperty(e,"__esModule",{value:!0}),e.Text=e.stringToArray=void 0;var o=n(8588),a=n(1455),s=n(7955),h=n(4417),u=n(3774),c=n(4417);function l(t){return Array.from(t)}e.stringToArray=l;var f,p="auto",d="justify",g="left",v="middle",y="normal",_=" ",m=["fontFamily","fontSize","fontStyle","fontVariant","padding","align","verticalAlign","lineHeight","text","width","height","wrap","ellipsis","letterSpacing"],b=m.length;function x(){return f||(f=o.Util.createCanvasElement().getContext("2d"))}var w=function(t){function e(e){var n=t.call(this,function(t){return(t=t||{}).fillLinearGradientColorStops||t.fillRadialGradientColorStops||t.fillPatternImage||(t.fill=t.fill||"black"),t}(e))||this;n._partialTextX=0,n._partialTextY=0;for(var r=0;r<b;r++)n.on(m[r]+"Change.konva",n._setTextData);return n._setTextData(),n}return i(e,t),e.prototype._sceneFunc=function(t){var e=this.textArr,n=e.length;if(this.text()){var r,i=this.padding(),o=this.fontSize(),a=this.lineHeight()*o,s=this.verticalAlign(),h=0,u=this.align(),c=this.getWidth(),f=this.letterSpacing(),p=this.fill(),y=this.textDecoration(),_=-1!==y.indexOf("underline"),m=-1!==y.indexOf("line-through"),b=0,x=(b=a/2,0),w=0;for(t.setAttr("font",this._getContextFont()),t.setAttr("textBaseline",v),t.setAttr("textAlign",g),s===v?h=(this.getHeight()-n*a-2*i)/2:"bottom"===s&&(h=this.getHeight()-n*a-2*i),t.translate(i,h+i),r=0;r<n;r++){x=0,w=0;var S,C,P,k=e[r],O=k.text,A=k.width,T=r!==n-1;if(t.save(),"right"===u?x+=c-A-2*i:"center"===u&&(x+=(c-A-2*i)/2),_&&(t.save(),t.beginPath(),t.moveTo(x,b+w+Math.round(o/2)),C=0===(S=O.split(" ").length-1),P=u===d&&T&&!C?c-2*i:A,t.lineTo(x+Math.round(P),b+w+Math.round(o/2)),t.lineWidth=o/15,t.strokeStyle=p,t.stroke(),t.restore()),m&&(t.save(),t.beginPath(),t.moveTo(x,b+w),C=0===(S=O.split(" ").length-1),P=u===d&&T&&!C?c-2*i:A,t.lineTo(x+Math.round(P),b+w),t.lineWidth=o/15,t.strokeStyle=p,t.stroke(),t.restore()),0!==f||u===d){S=O.split(" ").length-1;for(var M=l(O),F=0;F<M.length;F++){var R=M[F];" "===R&&r!==n-1&&u===d&&(x+=(c-2*i-A)/S),this._partialTextX=x,this._partialTextY=b+w,this._partialText=R,t.fillStrokeShape(this),x+=this.measureSize(R).width+f}}else this._partialTextX=x,this._partialTextY=b+w,this._partialText=O,t.fillStrokeShape(this);t.restore(),n>1&&(b+=a)}}},e.prototype._hitFunc=function(t){var e=this.getWidth(),n=this.getHeight();t.beginPath(),t.rect(0,0,e,n),t.closePath(),t.fillStrokeShape(this)},e.prototype.setText=function(t){var e=o.Util._isString(t)?t:null==t?"":t+"";return this._setAttr("text",e),this},e.prototype.getWidth=function(){return this.attrs.width===p||void 0===this.attrs.width?this.getTextWidth()+2*this.padding():this.attrs.width},e.prototype.getHeight=function(){return this.attrs.height===p||void 0===this.attrs.height?this.fontSize()*this.textArr.length*this.lineHeight()+2*this.padding():this.attrs.height},e.prototype.getTextWidth=function(){return this.textWidth},e.prototype.getTextHeight=function(){return o.Util.warn("text.getTextHeight() method is deprecated. Use text.height() - for full height and text.fontSize() - for one line height."),this.textHeight},e.prototype.measureSize=function(t){var e,n=x(),r=this.fontSize();return n.save(),n.font=this._getContextFont(),e=n.measureText(t),n.restore(),{width:e.width,height:r}},e.prototype._getContextFont=function(){return h.Konva.UA.isIE?this.fontStyle()+_+this.fontSize()+"px "+this.fontFamily():this.fontStyle()+_+this.fontVariant()+_+(this.fontSize()+"px ")+this.fontFamily().split(",").map((function(t){var e=(t=t.trim()).indexOf(" ")>=0,n=t.indexOf('"')>=0||t.indexOf("'")>=0;return e&&!n&&(t='"'+t+'"'),t})).join(", ")},e.prototype._addTextLine=function(t){this.align()===d&&(t=t.trim());var e=this._getTextWidth(t);return this.textArr.push({text:t,width:e})},e.prototype._getTextWidth=function(t){var e=this.letterSpacing(),n=t.length;return x().measureText(t).width+(n?e*(n-1):0)},e.prototype._setTextData=function(){var t=this.text().split("\n"),e=+this.fontSize(),n=0,r=this.lineHeight()*e,i=this.attrs.width,o=this.attrs.height,a=i!==p&&void 0!==i,s=o!==p&&void 0!==o,h=this.padding(),u=i-2*h,c=o-2*h,l=0,f=this.wrap(),d="none"!==f,g="char"!==f&&d,v=this.ellipsis();this.textArr=[],x().font=this._getContextFont();for(var y=v?this._getTextWidth("…"):0,m=0,b=t.length;m<b;++m){var w=t[m],S=this._getTextWidth(w);if(a&&S>u)for(;w.length>0;){for(var C=0,P=w.length,k="",O=0;C<P;){var A=C+P>>>1,T=w.slice(0,A+1),M=this._getTextWidth(T)+y;M<=u?(C=A+1,k=T,O=M):P=A}if(!k)break;if(g){var F,R=w[k.length];(F=(R===_||"-"===R)&&O<=u?k.length:Math.max(k.lastIndexOf(_),k.lastIndexOf("-"))+1)>0&&(C=F,k=k.slice(0,C),O=this._getTextWidth(k))}if(k=k.trimRight(),this._addTextLine(k),n=Math.max(n,O),l+=r,!d||s&&l+r>c){var E=this.textArr[this.textArr.length-1];if(E)if(v)this._getTextWidth(E.text+"…")<u||(E.text=E.text.slice(0,E.text.length-3)),this.textArr.splice(this.textArr.length-1,1),this._addTextLine(E.text+"…");break}if((w=(w=w.slice(C)).trimLeft()).length>0&&(S=this._getTextWidth(w))<=u){this._addTextLine(w),l+=r,n=Math.max(n,S);break}}else this._addTextLine(w),l+=r,n=Math.max(n,S);if(s&&l+r>c)break}this.textHeight=e,this.textWidth=n},e.prototype.getStrokeScaleEnabled=function(){return!0},e}(s.Shape);e.Text=w,w.prototype._fillFunc=function(t){t.fillText(this._partialText,this._partialTextX,this._partialTextY)},w.prototype._strokeFunc=function(t){t.strokeText(this._partialText,this._partialTextX,this._partialTextY)},w.prototype.className="Text",w.prototype._attrsAffectingSize=["text","fontSize","padding","wrap","lineHeight","letterSpacing"],c._registerNode(w),a.Factory.overWriteSetter(w,"width",u.getNumberOrAutoValidator()),a.Factory.overWriteSetter(w,"height",u.getNumberOrAutoValidator()),a.Factory.addGetterSetter(w,"fontFamily","Arial"),a.Factory.addGetterSetter(w,"fontSize",12,u.getNumberValidator()),a.Factory.addGetterSetter(w,"fontStyle",y),a.Factory.addGetterSetter(w,"fontVariant",y),a.Factory.addGetterSetter(w,"padding",0,u.getNumberValidator()),a.Factory.addGetterSetter(w,"align",g),a.Factory.addGetterSetter(w,"verticalAlign","top"),a.Factory.addGetterSetter(w,"lineHeight",1,u.getNumberValidator()),a.Factory.addGetterSetter(w,"wrap","word"),a.Factory.addGetterSetter(w,"ellipsis",!1,u.getBooleanValidator()),a.Factory.addGetterSetter(w,"letterSpacing",0,u.getNumberValidator()),a.Factory.addGetterSetter(w,"text","",u.getStringValidator()),a.Factory.addGetterSetter(w,"textDecoration",""),o.Collection.mapMethods(w)},2831:function(t,e,n){"use strict";var r,i=this&&this.__extends||(r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])})(t,e)},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});Object.defineProperty(e,"__esModule",{value:!0}),e.TextPath=void 0;var o=n(8588),a=n(1455),s=n(7955),h=n(7339),u=n(3787),c=n(3774),l=n(4417),f="normal";function p(t){t.fillText(this.partialText,0,0)}function d(t){t.strokeText(this.partialText,0,0)}var g=function(t){function e(e){var n=t.call(this,e)||this;return n.dummyCanvas=o.Util.createCanvasElement(),n.dataArray=[],n.dataArray=h.Path.parsePathData(n.attrs.data),n.on("dataChange.konva",(function(){this.dataArray=h.Path.parsePathData(this.attrs.data),this._setTextData()})),n.on("textChange.konva alignChange.konva letterSpacingChange.konva kerningFuncChange.konva",n._setTextData),e&&e.getKerning&&(o.Util.warn('getKerning TextPath API is deprecated. Please use "kerningFunc" instead.'),n.kerningFunc(e.getKerning)),n._setTextData(),n}return i(e,t),e.prototype._sceneFunc=function(t){t.setAttr("font",this._getContextFont()),t.setAttr("textBaseline",this.textBaseline()),t.setAttr("textAlign","left"),t.save();var e=this.textDecoration(),n=this.fill(),r=this.fontSize(),i=this.glyphInfo;"underline"===e&&t.beginPath();for(var o=0;o<i.length;o++){t.save();var a=i[o].p0;t.translate(a.x,a.y),t.rotate(i[o].rotation),this.partialText=i[o].text,t.fillStrokeShape(this),"underline"===e&&(0===o&&t.moveTo(0,r/2+1),t.lineTo(r,r/2+1)),t.restore()}"underline"===e&&(t.strokeStyle=n,t.lineWidth=r/20,t.stroke()),t.restore()},e.prototype._hitFunc=function(t){t.beginPath();var e=this.glyphInfo;if(e.length>=1){var n=e[0].p0;t.moveTo(n.x,n.y)}for(var r=0;r<e.length;r++){var i=e[r].p1;t.lineTo(i.x,i.y)}t.setAttr("lineWidth",this.fontSize()),t.setAttr("strokeStyle",this.colorKey),t.stroke()},e.prototype.getTextWidth=function(){return this.textWidth},e.prototype.getTextHeight=function(){return o.Util.warn("text.getTextHeight() method is deprecated. Use text.height() - for full height and text.fontSize() - for one line height."),this.textHeight},e.prototype.setText=function(t){return u.Text.prototype.setText.call(this,t)},e.prototype._getContextFont=function(){return u.Text.prototype._getContextFont.call(this)},e.prototype._getTextSize=function(t){var e=this.dummyCanvas.getContext("2d");e.save(),e.font=this._getContextFont();var n=e.measureText(t);return e.restore(),{width:n.width,height:parseInt(this.attrs.fontSize,10)}},e.prototype._setTextData=function(){var t=this,e=this._getTextSize(this.attrs.text),n=this.letterSpacing(),r=this.align(),i=this.kerningFunc();this.textWidth=e.width,this.textHeight=e.height;var o=Math.max(this.textWidth+((this.attrs.text||"").length-1)*n,0);this.glyphInfo=[];for(var a=0,s=0;s<t.dataArray.length;s++)t.dataArray[s].pathLength>0&&(a+=t.dataArray[s].pathLength);var c=0;"center"===r&&(c=Math.max(0,a/2-o/2)),"right"===r&&(c=Math.max(0,a-o));for(var l,f,p,d=u.stringToArray(this.text()),g=this.text().split(" ").length-1,v=-1,y=0,_=function(){y=0;for(var e=t.dataArray,n=v+1;n<e.length;n++){if(e[n].pathLength>0)return v=n,e[n];"M"===e[n].command&&(l={x:e[n].points[0],y:e[n].points[1]})}return{}},m=function(e){var i=t._getTextSize(e).width+n;" "===e&&"justify"===r&&(i+=(a-o)/g);var s=0,u=0;for(f=void 0;Math.abs(i-s)/i>.01&&u<20;){u++;for(var c=s;void 0===p;)(p=_())&&c+p.pathLength<i&&(c+=p.pathLength,p=void 0);if(p==={}||void 0===l)return;var d=!1;switch(p.command){case"L":h.Path.getLineLength(l.x,l.y,p.points[0],p.points[1])>i?f=h.Path.getPointOnLine(i,l.x,l.y,p.points[0],p.points[1],l.x,l.y):p=void 0;break;case"A":var v=p.points[4],m=p.points[5],b=p.points[4]+m;0===y?y=v+1e-8:i>s?y+=Math.PI/180*m/Math.abs(m):y-=Math.PI/360*m/Math.abs(m),(m<0&&y<b||m>=0&&y>b)&&(y=b,d=!0),f=h.Path.getPointOnEllipticalArc(p.points[0],p.points[1],p.points[2],p.points[3],y,p.points[6]);break;case"C":0===y?y=i>p.pathLength?1e-8:i/p.pathLength:i>s?y+=(i-s)/p.pathLength/2:y=Math.max(y-(s-i)/p.pathLength/2,0),y>1&&(y=1,d=!0),f=h.Path.getPointOnCubicBezier(y,p.start.x,p.start.y,p.points[0],p.points[1],p.points[2],p.points[3],p.points[4],p.points[5]);break;case"Q":0===y?y=i/p.pathLength:i>s?y+=(i-s)/p.pathLength:y-=(s-i)/p.pathLength,y>1&&(y=1,d=!0),f=h.Path.getPointOnQuadraticBezier(y,p.start.x,p.start.y,p.points[0],p.points[1],p.points[2],p.points[3])}void 0!==f&&(s=h.Path.getLineLength(l.x,l.y,f.x,f.y)),d&&(d=!1,p=void 0)}},b=c/(t._getTextSize("C").width+n)-1,x=0;x<b&&(m("C"),void 0!==l&&void 0!==f);x++)l=f;for(var w=0;w<d.length&&(m(d[w]),void 0!==l&&void 0!==f);w++){var S=h.Path.getLineLength(l.x,l.y,f.x,f.y),C=0;if(i)try{C=i(d[w-1],d[w])*this.fontSize()}catch(t){C=0}l.x+=C,f.x+=C,this.textWidth+=C;var P=h.Path.getPointOnLine(C+S/2,l.x,l.y,f.x,f.y),k=Math.atan2(f.y-l.y,f.x-l.x);this.glyphInfo.push({transposeX:P.x,transposeY:P.y,text:d[w],rotation:k,p0:l,p1:f}),l=f}},e.prototype.getSelfRect=function(){if(!this.glyphInfo.length)return{x:0,y:0,width:0,height:0};var t=[];this.glyphInfo.forEach((function(e){t.push(e.p0.x),t.push(e.p0.y),t.push(e.p1.x),t.push(e.p1.y)}));for(var e,n,r=t[0]||0,i=t[0]||0,o=t[1]||0,a=t[1]||0,s=0;s<t.length/2;s++)e=t[2*s],n=t[2*s+1],r=Math.min(r,e),i=Math.max(i,e),o=Math.min(o,n),a=Math.max(a,n);var h=this.fontSize();return{x:r-h/2,y:o-h/2,width:i-r+h,height:a-o+h}},e}(s.Shape);e.TextPath=g,g.prototype._fillFunc=p,g.prototype._strokeFunc=d,g.prototype._fillFuncHit=p,g.prototype._strokeFuncHit=d,g.prototype.className="TextPath",g.prototype._attrsAffectingSize=["text","fontSize","data"],l._registerNode(g),a.Factory.addGetterSetter(g,"data"),a.Factory.addGetterSetter(g,"fontFamily","Arial"),a.Factory.addGetterSetter(g,"fontSize",12,c.getNumberValidator()),a.Factory.addGetterSetter(g,"fontStyle",f),a.Factory.addGetterSetter(g,"align","left"),a.Factory.addGetterSetter(g,"letterSpacing",0,c.getNumberValidator()),a.Factory.addGetterSetter(g,"textBaseline","middle"),a.Factory.addGetterSetter(g,"fontVariant",f),a.Factory.addGetterSetter(g,"text",""),a.Factory.addGetterSetter(g,"textDecoration",null),a.Factory.addGetterSetter(g,"kerningFunc",null),o.Collection.mapMethods(g)},9516:function(t,e,n){"use strict";var r,i=this&&this.__extends||(r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])})(t,e)},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}),o=this&&this.__assign||function(){return(o=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var i in e=arguments[n])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t}).apply(this,arguments)};Object.defineProperty(e,"__esModule",{value:!0}),e.Transformer=void 0;var a=n(8588),s=n(1455),h=n(7939),u=n(7955),c=n(5244),l=n(8985),f=n(4417),p=n(3774),d=n(4417),g="tr-konva",v=["resizeEnabledChange","rotateAnchorOffsetChange","rotateEnabledChange","enabledAnchorsChange","anchorSizeChange","borderEnabledChange","borderStrokeChange","borderStrokeWidthChange","borderDashChange","anchorStrokeChange","anchorStrokeWidthChange","anchorFillChange","anchorCornerRadiusChange","ignoreStrokeChange"].map((function(t){return t+".tr-konva"})).join(" "),y="nodesRect",_=["widthChange","heightChange","scaleXChange","scaleYChange","skewXChange","skewYChange","rotationChange","offsetXChange","offsetYChange","transformsEnabledChange","strokeWidthChange"].map((function(t){return t+".tr-konva"})).join(" "),m={"top-left":-45,"top-center":0,"top-right":45,"middle-right":-90,"middle-left":90,"bottom-left":-135,"bottom-center":180,"bottom-right":135},b="ontouchstart"in f.Konva._global;var x=["top-left","top-center","top-right","middle-right","middle-left","bottom-left","bottom-center","bottom-right"];function w(t,e,n){var r=n.x+(t.x-n.x)*Math.cos(e)-(t.y-n.y)*Math.sin(e),i=n.y+(t.x-n.x)*Math.sin(e)+(t.y-n.y)*Math.cos(e);return o(o({},t),{rotation:t.rotation+e,x:r,y:i})}function S(t,e){return w(t,e,function(t){return{x:t.x+t.width/2*Math.cos(t.rotation)+t.height/2*Math.sin(-t.rotation),y:t.y+t.height/2*Math.cos(t.rotation)+t.width/2*Math.sin(t.rotation)}}(t))}var C=function(t){function e(e){var n=t.call(this,e)||this;return n._transforming=!1,n._createElements(),n._handleMouseMove=n._handleMouseMove.bind(n),n._handleMouseUp=n._handleMouseUp.bind(n),n.update=n.update.bind(n),n.on(v,n.update),n.getNode()&&n.update(),n}return i(e,t),e.prototype.attachTo=function(t){return this.setNode(t),this},e.prototype.setNode=function(t){return a.Util.warn("tr.setNode(shape), tr.node(shape) and tr.attachTo(shape) methods are deprecated. Please use tr.nodes(nodesArray) instead."),this.setNodes([t])},e.prototype.getNode=function(){return this._nodes&&this._nodes[0]},e.prototype.setNodes=function(t){var e=this;return void 0===t&&(t=[]),this._nodes&&this._nodes.length&&this.detach(),this._nodes=t,1===t.length?this.rotation(t[0].getAbsoluteRotation()):this.rotation(0),this._nodes.forEach((function(t){var n=t._attrsAffectingSize.map((function(t){return t+"Change."+g})).join(" "),r=function(){1===e.nodes().length&&e.rotation(e.nodes()[0].getAbsoluteRotation()),e._resetTransformCache(),e._transforming||e.isDragging()||e.update()};t.on(n,r),t.on(_,r),t.on("_clearTransformCache.tr-konva",r),t.on("xChange.tr-konva yChange.tr-konva",r),e._proxyDrag(t)})),this._resetTransformCache(),!!this.findOne(".top-left")&&this.update(),this},e.prototype._proxyDrag=function(t){var e,n=this;t.on("dragstart.tr-konva",(function(r){e=t.getAbsolutePosition(),n.isDragging()||t===n.findOne(".back")||n.startDrag(r,!1)})),t.on("dragmove.tr-konva",(function(r){if(e){var i=t.getAbsolutePosition(),o=i.x-e.x,a=i.y-e.y;n.nodes().forEach((function(e){if(e!==t&&!e.isDragging()){var n=e.getAbsolutePosition();e.setAbsolutePosition({x:n.x+o,y:n.y+a}),e.startDrag(r)}})),e=null}}))},e.prototype.getNodes=function(){return this._nodes||[]},e.prototype.getActiveAnchor=function(){return this._movingAnchorName},e.prototype.detach=function(){this._nodes&&this._nodes.forEach((function(t){t.off(".tr-konva")})),this._nodes=[],this._resetTransformCache()},e.prototype._resetTransformCache=function(){this._clearCache(y),this._clearCache("transform"),this._clearSelfAndDescendantCache("absoluteTransform")},e.prototype._getNodeRect=function(){return this._getCache(y,this.__getNodeRect)},e.prototype.__getNodeShape=function(t,e,n){void 0===e&&(e=this.rotation());var r=t.getClientRect({skipTransform:!0,skipShadow:!0,skipStroke:this.ignoreStroke()}),i=t.getAbsoluteScale(n),o=t.getAbsolutePosition(n),a=r.x*i.x-t.offsetX()*i.x,s=r.y*i.y-t.offsetY()*i.y,h=(f.Konva.getAngle(t.getAbsoluteRotation())+2*Math.PI)%(2*Math.PI);return w({x:o.x+a*Math.cos(h)+s*Math.sin(-h),y:o.y+s*Math.cos(h)+a*Math.sin(h),width:r.width*i.x,height:r.height*i.y,rotation:h},-f.Konva.getAngle(e),{x:0,y:0})},e.prototype.__getNodeRect=function(){var t=this;if(!this.getNode())return{x:-1e8,y:-1e8,width:0,height:0,rotation:0};var e=[];this.nodes().map((function(n){var r=n.getClientRect({skipTransform:!0,skipShadow:!0,skipStroke:t.ignoreStroke()}),i=[{x:r.x,y:r.y},{x:r.x+r.width,y:r.y},{x:r.x+r.width,y:r.y+r.height},{x:r.x,y:r.y+r.height}],o=n.getAbsoluteTransform();i.forEach((function(t){var n=o.point(t);e.push(n)}))}));var n,r,i,o,s=new a.Transform;s.rotate(-f.Konva.getAngle(this.rotation())),e.forEach((function(t){var e=s.point(t);void 0===n&&(n=i=e.x,r=o=e.y),n=Math.min(n,e.x),r=Math.min(r,e.y),i=Math.max(i,e.x),o=Math.max(o,e.y)})),s.invert();var h=s.point({x:n,y:r});return{x:h.x,y:h.y,width:i-n,height:o-r,rotation:f.Konva.getAngle(this.rotation())}},e.prototype.getX=function(){return this._getNodeRect().x},e.prototype.getY=function(){return this._getNodeRect().y},e.prototype.getWidth=function(){return this._getNodeRect().width},e.prototype.getHeight=function(){return this._getNodeRect().height},e.prototype._createElements=function(){this._createBack(),x.forEach(function(t){this._createAnchor(t)}.bind(this)),this._createAnchor("rotater")},e.prototype._createAnchor=function(t){var e=this,n=new c.Rect({stroke:"rgb(0, 161, 255)",fill:"white",strokeWidth:1,name:t+" _anchor",dragDistance:0,draggable:!0,hitStrokeWidth:b?10:"auto"}),r=this;n.on("mousedown touchstart",(function(t){r._handleMouseDown(t)})),n.on("dragstart",(function(t){n.stopDrag(),t.cancelBubble=!0})),n.on("dragend",(function(t){t.cancelBubble=!0})),n.on("mouseenter",(function(){var r=f.Konva.getAngle(e.rotation()),i=function(t,e){if("rotater"===t)return"crosshair";e+=a.Util._degToRad(m[t]||0);var n=(a.Util._radToDeg(e)%360+360)%360;return a.Util._inRange(n,337.5,360)||a.Util._inRange(n,0,22.5)?"ns-resize":a.Util._inRange(n,22.5,67.5)?"nesw-resize":a.Util._inRange(n,67.5,112.5)?"ew-resize":a.Util._inRange(n,112.5,157.5)?"nwse-resize":a.Util._inRange(n,157.5,202.5)?"ns-resize":a.Util._inRange(n,202.5,247.5)?"nesw-resize":a.Util._inRange(n,247.5,292.5)?"ew-resize":a.Util._inRange(n,292.5,337.5)?"nwse-resize":(a.Util.error("Transformer has unknown angle for cursor detection: "+n),"pointer")}(t,r);n.getStage().content.style.cursor=i,e._cursorChange=!0})),n.on("mouseout",(function(){n.getStage().content.style.cursor="",e._cursorChange=!1})),this.add(n)},e.prototype._createBack=function(){var t=this,e=new u.Shape({name:"back",width:0,height:0,draggable:!0,sceneFunc:function(t){var e=this.getParent(),n=e.padding();t.beginPath(),t.rect(-n,-n,this.width()+2*n,this.height()+2*n),t.moveTo(this.width()/2,-n),e.rotateEnabled()&&t.lineTo(this.width()/2,-e.rotateAnchorOffset()*a.Util._sign(this.height())-n),t.fillStrokeShape(this)},hitFunc:function(e,n){if(t.shouldOverdrawWholeArea()){var r=t.padding();e.beginPath(),e.rect(-r,-r,n.width()+2*r,n.height()+2*r),e.fillStrokeShape(n)}}});this.add(e),this._proxyDrag(e),e.on("dragstart",(function(t){t.cancelBubble=!0})),e.on("dragmove",(function(t){t.cancelBubble=!0})),e.on("dragend",(function(t){t.cancelBubble=!0}))},e.prototype._handleMouseDown=function(t){this._movingAnchorName=t.target.name().split(" ")[0];var e=this._getNodeRect(),n=e.width,r=e.height,i=Math.sqrt(Math.pow(n,2)+Math.pow(r,2));this.sin=Math.abs(r/i),this.cos=Math.abs(n/i),window.addEventListener("mousemove",this._handleMouseMove),window.addEventListener("touchmove",this._handleMouseMove),window.addEventListener("mouseup",this._handleMouseUp,!0),window.addEventListener("touchend",this._handleMouseUp,!0),this._transforming=!0;var o=t.target.getAbsolutePosition(),a=t.target.getStage().getPointerPosition();this._anchorDragOffset={x:a.x-o.x,y:a.y-o.y},this._fire("transformstart",{evt:t,target:this.getNode()}),this._nodes.forEach((function(e){e._fire("transformstart",{evt:t,target:e})}))},e.prototype._handleMouseMove=function(t){var e,n,r,i=this.findOne("."+this._movingAnchorName),o=i.getStage();o.setPointersPositions(t);var a=o.getPointerPosition(),s={x:a.x-this._anchorDragOffset.x,y:a.y-this._anchorDragOffset.y},h=i.getAbsolutePosition();i.setAbsolutePosition(s);var u=i.getAbsolutePosition();if(h.x!==u.x||h.y!==u.y)if("rotater"!==this._movingAnchorName){var c=this.keepRatio()||t.shiftKey,l=this.centeredScaling()||t.altKey;if("top-left"===this._movingAnchorName){if(c){var p=l?{x:this.width()/2,y:this.height()/2}:{x:this.findOne(".bottom-right").x(),y:this.findOne(".bottom-right").y()};r=Math.sqrt(Math.pow(p.x-i.x(),2)+Math.pow(p.y-i.y(),2));var d=this.findOne(".top-left").x()>p.x?-1:1,g=this.findOne(".top-left").y()>p.y?-1:1;e=r*this.cos*d,n=r*this.sin*g,this.findOne(".top-left").x(p.x-e),this.findOne(".top-left").y(p.y-n)}}else if("top-center"===this._movingAnchorName)this.findOne(".top-left").y(i.y());else if("top-right"===this._movingAnchorName){if(c){p=l?{x:this.width()/2,y:this.height()/2}:{x:this.findOne(".bottom-left").x(),y:this.findOne(".bottom-left").y()};r=Math.sqrt(Math.pow(i.x()-p.x,2)+Math.pow(p.y-i.y(),2));d=this.findOne(".top-right").x()<p.x?-1:1,g=this.findOne(".top-right").y()>p.y?-1:1;e=r*this.cos*d,n=r*this.sin*g,this.findOne(".top-right").x(p.x+e),this.findOne(".top-right").y(p.y-n)}var v=i.position();this.findOne(".top-left").y(v.y),this.findOne(".bottom-right").x(v.x)}else if("middle-left"===this._movingAnchorName)this.findOne(".top-left").x(i.x());else if("middle-right"===this._movingAnchorName)this.findOne(".bottom-right").x(i.x());else if("bottom-left"===this._movingAnchorName){if(c){p=l?{x:this.width()/2,y:this.height()/2}:{x:this.findOne(".top-right").x(),y:this.findOne(".top-right").y()};r=Math.sqrt(Math.pow(p.x-i.x(),2)+Math.pow(i.y()-p.y,2));d=p.x<i.x()?-1:1,g=i.y()<p.y?-1:1;e=r*this.cos*d,n=r*this.sin*g,i.x(p.x-e),i.y(p.y+n)}v=i.position(),this.findOne(".top-left").x(v.x),this.findOne(".bottom-right").y(v.y)}else if("bottom-center"===this._movingAnchorName)this.findOne(".bottom-right").y(i.y());else if("bottom-right"===this._movingAnchorName){if(c){p=l?{x:this.width()/2,y:this.height()/2}:{x:this.findOne(".top-left").x(),y:this.findOne(".top-left").y()};r=Math.sqrt(Math.pow(i.x()-p.x,2)+Math.pow(i.y()-p.y,2));d=this.findOne(".bottom-right").x()<p.x?-1:1,g=this.findOne(".bottom-right").y()<p.y?-1:1;e=r*this.cos*d,n=r*this.sin*g,this.findOne(".bottom-right").x(p.x+e),this.findOne(".bottom-right").y(p.y+n)}}else console.error(new Error("Wrong position argument of selection resizer: "+this._movingAnchorName));if(l=this.centeredScaling()||t.altKey){var y=this.findOne(".top-left"),_=this.findOne(".bottom-right"),m=y.x(),b=y.y(),x=this.getWidth()-_.x(),w=this.getHeight()-_.y();_.move({x:-m,y:-b}),y.move({x,y:w})}var C=this.findOne(".top-left").getAbsolutePosition();e=C.x,n=C.y;var P=this.findOne(".bottom-right").x()-this.findOne(".top-left").x(),k=this.findOne(".bottom-right").y()-this.findOne(".top-left").y();this._fitNodesInto({x:e,y:n,width:P,height:k,rotation:f.Konva.getAngle(this.rotation())},t)}else{var O=this._getNodeRect();e=i.x()-O.width/2,n=-i.y()+O.height/2;var A=Math.atan2(-n,e)+Math.PI/2;O.height<0&&(A-=Math.PI);var T=f.Konva.getAngle(this.rotation())+A,M=f.Konva.getAngle(this.rotationSnapTolerance()),F=S(O,function(t,e,n){for(var r=e,i=0;i<t.length;i++){var o=f.Konva.getAngle(t[i]),a=Math.abs(o-e)%(2*Math.PI);Math.min(a,2*Math.PI-a)<n&&(r=o)}return r}(this.rotationSnaps(),T,M)-O.rotation);this._fitNodesInto(F,t)}},e.prototype._handleMouseUp=function(t){this._removeEvents(t)},e.prototype.getAbsoluteTransform=function(){return this.getTransform()},e.prototype._removeEvents=function(t){if(this._transforming){this._transforming=!1,window.removeEventListener("mousemove",this._handleMouseMove),window.removeEventListener("touchmove",this._handleMouseMove),window.removeEventListener("mouseup",this._handleMouseUp,!0),window.removeEventListener("touchend",this._handleMouseUp,!0);var e=this.getNode();this._fire("transformend",{evt:t,target:e}),e&&this._nodes.forEach((function(e){e._fire("transformend",{evt:t,target:e})})),this._movingAnchorName=null}},e.prototype._fitNodesInto=function(t,e){var n=this,r=this._getNodeRect();if(a.Util._inRange(t.width,2*-this.padding()-1,1))this.update();else if(a.Util._inRange(t.height,2*-this.padding()-1,1))this.update();else{var i=new a.Transform;if(i.rotate(f.Konva.getAngle(this.rotation())),this._movingAnchorName&&t.width<0&&this._movingAnchorName.indexOf("left")>=0){var o=i.point({x:2*-this.padding(),y:0});t.x+=o.x,t.y+=o.y,t.width+=2*this.padding(),this._movingAnchorName=this._movingAnchorName.replace("left","right"),this._anchorDragOffset.x-=o.x,this._anchorDragOffset.y-=o.y}else if(this._movingAnchorName&&t.width<0&&this._movingAnchorName.indexOf("right")>=0){o=i.point({x:2*this.padding(),y:0});this._movingAnchorName=this._movingAnchorName.replace("right","left"),this._anchorDragOffset.x-=o.x,this._anchorDragOffset.y-=o.y,t.width+=2*this.padding()}if(this._movingAnchorName&&t.height<0&&this._movingAnchorName.indexOf("top")>=0){o=i.point({x:0,y:2*-this.padding()});t.x+=o.x,t.y+=o.y,this._movingAnchorName=this._movingAnchorName.replace("top","bottom"),this._anchorDragOffset.x-=o.x,this._anchorDragOffset.y-=o.y,t.height+=2*this.padding()}else if(this._movingAnchorName&&t.height<0&&this._movingAnchorName.indexOf("bottom")>=0){o=i.point({x:0,y:2*this.padding()});this._movingAnchorName=this._movingAnchorName.replace("bottom","top"),this._anchorDragOffset.x-=o.x,this._anchorDragOffset.y-=o.y,t.height+=2*this.padding()}if(this.boundBoxFunc()){var s=this.boundBoxFunc()(r,t);s?t=s:a.Util.warn("boundBoxFunc returned falsy. You should return new bound rect from it!")}var h=1e7,u=new a.Transform;u.translate(r.x,r.y),u.rotate(r.rotation),u.scale(r.width/h,r.height/h);var c=new a.Transform;c.translate(t.x,t.y),c.rotate(t.rotation),c.scale(t.width/h,t.height/h);var l=c.multiply(u.invert());this._nodes.forEach((function(t){var r,i=t.getParent().getAbsoluteTransform(),o=t.getTransform().copy();o.translate(t.offsetX(),t.offsetY());var s=new a.Transform;s.multiply(i.copy().invert()).multiply(l).multiply(i).multiply(o);var h=s.decompose();t.setAttrs(h),n._fire("transform",{evt:e,target:t}),t._fire("transform",{evt:e,target:t}),null===(r=t.getLayer())||void 0===r||r.batchDraw()})),this.rotation(a.Util._getRotation(t.rotation)),this._resetTransformCache(),this.update(),this.getLayer().batchDraw()}},e.prototype.forceUpdate=function(){this._resetTransformCache(),this.update()},e.prototype._batchChangeChild=function(t,e){this.findOne(t).setAttrs(e)},e.prototype.update=function(){var t,e=this,n=this._getNodeRect();this.rotation(a.Util._getRotation(n.rotation));var r=n.width,i=n.height,o=this.enabledAnchors(),s=this.resizeEnabled(),h=this.padding(),u=this.anchorSize();this.find("._anchor").each((function(t){t.setAttrs({width:u,height:u,offsetX:u/2,offsetY:u/2,stroke:e.anchorStroke(),strokeWidth:e.anchorStrokeWidth(),fill:e.anchorFill(),cornerRadius:e.anchorCornerRadius()})})),this._batchChangeChild(".top-left",{x:0,y:0,offsetX:u/2+h,offsetY:u/2+h,visible:s&&o.indexOf("top-left")>=0}),this._batchChangeChild(".top-center",{x:r/2,y:0,offsetY:u/2+h,visible:s&&o.indexOf("top-center")>=0}),this._batchChangeChild(".top-right",{x:r,y:0,offsetX:u/2-h,offsetY:u/2+h,visible:s&&o.indexOf("top-right")>=0}),this._batchChangeChild(".middle-left",{x:0,y:i/2,offsetX:u/2+h,visible:s&&o.indexOf("middle-left")>=0}),this._batchChangeChild(".middle-right",{x:r,y:i/2,offsetX:u/2-h,visible:s&&o.indexOf("middle-right")>=0}),this._batchChangeChild(".bottom-left",{x:0,y:i,offsetX:u/2+h,offsetY:u/2-h,visible:s&&o.indexOf("bottom-left")>=0}),this._batchChangeChild(".bottom-center",{x:r/2,y:i,offsetY:u/2-h,visible:s&&o.indexOf("bottom-center")>=0}),this._batchChangeChild(".bottom-right",{x:r,y:i,offsetX:u/2-h,offsetY:u/2-h,visible:s&&o.indexOf("bottom-right")>=0}),this._batchChangeChild(".rotater",{x:r/2,y:-this.rotateAnchorOffset()*a.Util._sign(i)-h,visible:this.rotateEnabled()}),this._batchChangeChild(".back",{width:r,height:i,visible:this.borderEnabled(),stroke:this.borderStroke(),strokeWidth:this.borderStrokeWidth(),dash:this.borderDash(),x:0,y:0}),null===(t=this.getLayer())||void 0===t||t.batchDraw()},e.prototype.isTransforming=function(){return this._transforming},e.prototype.stopTransform=function(){if(this._transforming){this._removeEvents();var t=this.findOne("."+this._movingAnchorName);t&&t.stopDrag()}},e.prototype.destroy=function(){return this.getStage()&&this._cursorChange&&(this.getStage().content.style.cursor=""),l.Group.prototype.destroy.call(this),this.detach(),this._removeEvents(),this},e.prototype.toObject=function(){return h.Node.prototype.toObject.call(this)},e}(l.Group);e.Transformer=C,C.prototype.className="Transformer",d._registerNode(C),s.Factory.addGetterSetter(C,"enabledAnchors",x,(function(t){return t instanceof Array||a.Util.warn("enabledAnchors value should be an array"),t instanceof Array&&t.forEach((function(t){-1===x.indexOf(t)&&a.Util.warn("Unknown anchor name: "+t+". Available names are: "+x.join(", "))})),t||[]})),s.Factory.addGetterSetter(C,"resizeEnabled",!0),s.Factory.addGetterSetter(C,"anchorSize",10,p.getNumberValidator()),s.Factory.addGetterSetter(C,"rotateEnabled",!0),s.Factory.addGetterSetter(C,"rotationSnaps",[]),s.Factory.addGetterSetter(C,"rotateAnchorOffset",50,p.getNumberValidator()),s.Factory.addGetterSetter(C,"rotationSnapTolerance",5,p.getNumberValidator()),s.Factory.addGetterSetter(C,"borderEnabled",!0),s.Factory.addGetterSetter(C,"anchorStroke","rgb(0, 161, 255)"),s.Factory.addGetterSetter(C,"anchorStrokeWidth",1,p.getNumberValidator()),s.Factory.addGetterSetter(C,"anchorFill","white"),s.Factory.addGetterSetter(C,"anchorCornerRadius",0,p.getNumberValidator()),s.Factory.addGetterSetter(C,"borderStroke","rgb(0, 161, 255)"),s.Factory.addGetterSetter(C,"borderStrokeWidth",1,p.getNumberValidator()),s.Factory.addGetterSetter(C,"borderDash"),s.Factory.addGetterSetter(C,"keepRatio",!0),s.Factory.addGetterSetter(C,"centeredScaling",!1),s.Factory.addGetterSetter(C,"ignoreStroke",!1),s.Factory.addGetterSetter(C,"padding",0,p.getNumberValidator()),s.Factory.addGetterSetter(C,"node"),s.Factory.addGetterSetter(C,"nodes"),s.Factory.addGetterSetter(C,"boundBoxFunc"),s.Factory.addGetterSetter(C,"shouldOverdrawWholeArea",!1),s.Factory.backCompat(C,{lineEnabled:"borderEnabled",rotateHandlerOffset:"rotateAnchorOffset",enabledHandlers:"enabledAnchors"}),a.Collection.mapMethods(C)},9846:function(t,e,n){"use strict";var r,i=this&&this.__extends||(r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])})(t,e)},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});Object.defineProperty(e,"__esModule",{value:!0}),e.Wedge=void 0;var o=n(8588),a=n(1455),s=n(7955),h=n(4417),u=n(3774),c=n(4417),l=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return i(e,t),e.prototype._sceneFunc=function(t){t.beginPath(),t.arc(0,0,this.radius(),0,h.Konva.getAngle(this.angle()),this.clockwise()),t.lineTo(0,0),t.closePath(),t.fillStrokeShape(this)},e.prototype.getWidth=function(){return 2*this.radius()},e.prototype.getHeight=function(){return 2*this.radius()},e.prototype.setWidth=function(t){this.radius(t/2)},e.prototype.setHeight=function(t){this.radius(t/2)},e}(s.Shape);e.Wedge=l,l.prototype.className="Wedge",l.prototype._centroid=!0,l.prototype._attrsAffectingSize=["radius"],c._registerNode(l),a.Factory.addGetterSetter(l,"radius",0,u.getNumberValidator()),a.Factory.addGetterSetter(l,"angle",0,u.getNumberValidator()),a.Factory.addGetterSetter(l,"clockwise",!1),a.Factory.backCompat(l,{angleDeg:"angle",getAngleDeg:"getAngle",setAngleDeg:"setAngle"}),o.Collection.mapMethods(l)},6486:function(t,e,n){var r;t=n.nmd(t),function(){var i,o="Expected a function",a="__lodash_hash_undefined__",s="__lodash_placeholder__",h=16,u=32,c=64,l=128,f=256,p=1/0,d=9007199254740991,g=NaN,v=4294967295,y=[["ary",l],["bind",1],["bindKey",2],["curry",8],["curryRight",h],["flip",512],["partial",u],["partialRight",c],["rearg",f]],_="[object Arguments]",m="[object Array]",b="[object Boolean]",x="[object Date]",w="[object Error]",S="[object Function]",C="[object GeneratorFunction]",P="[object Map]",k="[object Number]",O="[object Object]",A="[object Promise]",T="[object RegExp]",M="[object Set]",F="[object String]",R="[object Symbol]",E="[object WeakMap]",D="[object ArrayBuffer]",G="[object DataView]",N="[object Float32Array]",I="[object Float64Array]",L="[object Int8Array]",j="[object Int16Array]",U="[object Int32Array]",B="[object Uint8Array]",z="[object Uint8ClampedArray]",W="[object Uint16Array]",V="[object Uint32Array]",H=/\b__p \+= '';/g,K=/\b(__p \+=) '' \+/g,Y=/(__e\(.*?\)|\b__t\)) \+\n'';/g,q=/&(?:amp|lt|gt|quot|#39);/g,X=/[&<>"']/g,$=RegExp(q.source),Z=RegExp(X.source),Q=/<%-([\s\S]+?)%>/g,J=/<%([\s\S]+?)%>/g,tt=/<%=([\s\S]+?)%>/g,et=/\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,nt=/^\w*$/,rt=/[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g,it=/[\\^$.*+?()[\]{}|]/g,ot=RegExp(it.source),at=/^\s+/,st=/\s/,ht=/\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/,ut=/\{\n\/\* \[wrapped with (.+)\] \*/,ct=/,? & /,lt=/[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g,ft=/[()=,{}\[\]\/\s]/,pt=/\\(\\)?/g,dt=/\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g,gt=/\w*$/,vt=/^[-+]0x[0-9a-f]+$/i,yt=/^0b[01]+$/i,_t=/^\[object .+?Constructor\]$/,mt=/^0o[0-7]+$/i,bt=/^(?:0|[1-9]\d*)$/,xt=/[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g,wt=/($^)/,St=/['\n\r\u2028\u2029\\]/g,Ct="\\u0300-\\u036f\\ufe20-\\ufe2f\\u20d0-\\u20ff",Pt="\\u2700-\\u27bf",kt="a-z\\xdf-\\xf6\\xf8-\\xff",Ot="A-Z\\xc0-\\xd6\\xd8-\\xde",At="\\ufe0e\\ufe0f",Tt="\\xac\\xb1\\xd7\\xf7\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf\\u2000-\\u206f \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000",Mt="['’]",Ft="[\\ud800-\\udfff]",Rt="["+Tt+"]",Et="["+Ct+"]",Dt="\\d+",Gt="[\\u2700-\\u27bf]",Nt="["+kt+"]",It="[^\\ud800-\\udfff"+Tt+Dt+Pt+kt+Ot+"]",Lt="\\ud83c[\\udffb-\\udfff]",jt="[^\\ud800-\\udfff]",Ut="(?:\\ud83c[\\udde6-\\uddff]){2}",Bt="[\\ud800-\\udbff][\\udc00-\\udfff]",zt="["+Ot+"]",Wt="(?:"+Nt+"|"+It+")",Vt="(?:"+zt+"|"+It+")",Ht="(?:['’](?:d|ll|m|re|s|t|ve))?",Kt="(?:['’](?:D|LL|M|RE|S|T|VE))?",Yt="(?:"+Et+"|"+Lt+")"+"?",qt="[\\ufe0e\\ufe0f]?",Xt=qt+Yt+("(?:\\u200d(?:"+[jt,Ut,Bt].join("|")+")"+qt+Yt+")*"),$t="(?:"+[Gt,Ut,Bt].join("|")+")"+Xt,Zt="(?:"+[jt+Et+"?",Et,Ut,Bt,Ft].join("|")+")",Qt=RegExp(Mt,"g"),Jt=RegExp(Et,"g"),te=RegExp(Lt+"(?="+Lt+")|"+Zt+Xt,"g"),ee=RegExp([zt+"?"+Nt+"+"+Ht+"(?="+[Rt,zt,"$"].join("|")+")",Vt+"+"+Kt+"(?="+[Rt,zt+Wt,"$"].join("|")+")",zt+"?"+Wt+"+"+Ht,zt+"+"+Kt,"\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])","\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])",Dt,$t].join("|"),"g"),ne=RegExp("[\\u200d\\ud800-\\udfff"+Ct+At+"]"),re=/[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/,ie=["Array","Buffer","DataView","Date","Error","Float32Array","Float64Array","Function","Int8Array","Int16Array","Int32Array","Map","Math","Object","Promise","RegExp","Set","String","Symbol","TypeError","Uint8Array","Uint8ClampedArray","Uint16Array","Uint32Array","WeakMap","_","clearTimeout","isFinite","parseInt","setTimeout"],oe=-1,ae={};ae[N]=ae[I]=ae[L]=ae[j]=ae[U]=ae[B]=ae[z]=ae[W]=ae[V]=!0,ae[_]=ae[m]=ae[D]=ae[b]=ae[G]=ae[x]=ae[w]=ae[S]=ae[P]=ae[k]=ae[O]=ae[T]=ae[M]=ae[F]=ae[E]=!1;var se={};se[_]=se[m]=se[D]=se[G]=se[b]=se[x]=se[N]=se[I]=se[L]=se[j]=se[U]=se[P]=se[k]=se[O]=se[T]=se[M]=se[F]=se[R]=se[B]=se[z]=se[W]=se[V]=!0,se[w]=se[S]=se[E]=!1;var he={"\\":"\\","'":"'","\n":"n","\r":"r","\u2028":"u2028","\u2029":"u2029"},ue=parseFloat,ce=parseInt,le="object"==typeof n.g&&n.g&&n.g.Object===Object&&n.g,fe="object"==typeof self&&self&&self.Object===Object&&self,pe=le||fe||Function("return this")(),de=e&&!e.nodeType&&e,ge=de&&t&&!t.nodeType&&t,ve=ge&&ge.exports===de,ye=ve&&le.process,_e=function(){try{var t=ge&&ge.require&&ge.require("util").types;return t||ye&&ye.binding&&ye.binding("util")}catch(t){}}(),me=_e&&_e.isArrayBuffer,be=_e&&_e.isDate,xe=_e&&_e.isMap,we=_e&&_e.isRegExp,Se=_e&&_e.isSet,Ce=_e&&_e.isTypedArray;function Pe(t,e,n){switch(n.length){case 0:return t.call(e);case 1:return t.call(e,n[0]);case 2:return t.call(e,n[0],n[1]);case 3:return t.call(e,n[0],n[1],n[2])}return t.apply(e,n)}function ke(t,e,n,r){for(var i=-1,o=null==t?0:t.length;++i<o;){var a=t[i];e(r,a,n(a),t)}return r}function Oe(t,e){for(var n=-1,r=null==t?0:t.length;++n<r&&!1!==e(t[n],n,t););return t}function Ae(t,e){for(var n=null==t?0:t.length;n--&&!1!==e(t[n],n,t););return t}function Te(t,e){for(var n=-1,r=null==t?0:t.length;++n<r;)if(!e(t[n],n,t))return!1;return!0}function Me(t,e){for(var n=-1,r=null==t?0:t.length,i=0,o=[];++n<r;){var a=t[n];e(a,n,t)&&(o[i++]=a)}return o}function Fe(t,e){return!!(null==t?0:t.length)&&Be(t,e,0)>-1}function Re(t,e,n){for(var r=-1,i=null==t?0:t.length;++r<i;)if(n(e,t[r]))return!0;return!1}function Ee(t,e){for(var n=-1,r=null==t?0:t.length,i=Array(r);++n<r;)i[n]=e(t[n],n,t);return i}function De(t,e){for(var n=-1,r=e.length,i=t.length;++n<r;)t[i+n]=e[n];return t}function Ge(t,e,n,r){var i=-1,o=null==t?0:t.length;for(r&&o&&(n=t[++i]);++i<o;)n=e(n,t[i],i,t);return n}function Ne(t,e,n,r){var i=null==t?0:t.length;for(r&&i&&(n=t[--i]);i--;)n=e(n,t[i],i,t);return n}function Ie(t,e){for(var n=-1,r=null==t?0:t.length;++n<r;)if(e(t[n],n,t))return!0;return!1}var Le=He("length");function je(t,e,n){var r;return n(t,(function(t,n,i){if(e(t,n,i))return r=n,!1})),r}function Ue(t,e,n,r){for(var i=t.length,o=n+(r?1:-1);r?o--:++o<i;)if(e(t[o],o,t))return o;return-1}function Be(t,e,n){return e==e?function(t,e,n){var r=n-1,i=t.length;for(;++r<i;)if(t[r]===e)return r;return-1}(t,e,n):Ue(t,We,n)}function ze(t,e,n,r){for(var i=n-1,o=t.length;++i<o;)if(r(t[i],e))return i;return-1}function We(t){return t!=t}function Ve(t,e){var n=null==t?0:t.length;return n?qe(t,e)/n:g}function He(t){return function(e){return null==e?i:e[t]}}function Ke(t){return function(e){return null==t?i:t[e]}}function Ye(t,e,n,r,i){return i(t,(function(t,i,o){n=r?(r=!1,t):e(n,t,i,o)})),n}function qe(t,e){for(var n,r=-1,o=t.length;++r<o;){var a=e(t[r]);a!==i&&(n=n===i?a:n+a)}return n}function Xe(t,e){for(var n=-1,r=Array(t);++n<t;)r[n]=e(n);return r}function $e(t){return t?t.slice(0,gn(t)+1).replace(at,""):t}function Ze(t){return function(e){return t(e)}}function Qe(t,e){return Ee(e,(function(e){return t[e]}))}function Je(t,e){return t.has(e)}function tn(t,e){for(var n=-1,r=t.length;++n<r&&Be(e,t[n],0)>-1;);return n}function en(t,e){for(var n=t.length;n--&&Be(e,t[n],0)>-1;);return n}function nn(t,e){for(var n=t.length,r=0;n--;)t[n]===e&&++r;return r}var rn=Ke({À:"A",Á:"A",Â:"A",Ã:"A",Ä:"A",Å:"A",à:"a",á:"a",â:"a",ã:"a",ä:"a",å:"a",Ç:"C",ç:"c",Ð:"D",ð:"d",È:"E",É:"E",Ê:"E",Ë:"E",è:"e",é:"e",ê:"e",ë:"e",Ì:"I",Í:"I",Î:"I",Ï:"I",ì:"i",í:"i",î:"i",ï:"i",Ñ:"N",ñ:"n",Ò:"O",Ó:"O",Ô:"O",Õ:"O",Ö:"O",Ø:"O",ò:"o",ó:"o",ô:"o",õ:"o",ö:"o",ø:"o",Ù:"U",Ú:"U",Û:"U",Ü:"U",ù:"u",ú:"u",û:"u",ü:"u",Ý:"Y",ý:"y",ÿ:"y",Æ:"Ae",æ:"ae",Þ:"Th",þ:"th",ß:"ss",Ā:"A",Ă:"A",Ą:"A",ā:"a",ă:"a",ą:"a",Ć:"C",Ĉ:"C",Ċ:"C",Č:"C",ć:"c",ĉ:"c",ċ:"c",č:"c",Ď:"D",Đ:"D",ď:"d",đ:"d",Ē:"E",Ĕ:"E",Ė:"E",Ę:"E",Ě:"E",ē:"e",ĕ:"e",ė:"e",ę:"e",ě:"e",Ĝ:"G",Ğ:"G",Ġ:"G",Ģ:"G",ĝ:"g",ğ:"g",ġ:"g",ģ:"g",Ĥ:"H",Ħ:"H",ĥ:"h",ħ:"h",Ĩ:"I",Ī:"I",Ĭ:"I",Į:"I",İ:"I",ĩ:"i",ī:"i",ĭ:"i",į:"i",ı:"i",Ĵ:"J",ĵ:"j",Ķ:"K",ķ:"k",ĸ:"k",Ĺ:"L",Ļ:"L",Ľ:"L",Ŀ:"L",Ł:"L",ĺ:"l",ļ:"l",ľ:"l",ŀ:"l",ł:"l",Ń:"N",Ņ:"N",Ň:"N",Ŋ:"N",ń:"n",ņ:"n",ň:"n",ŋ:"n",Ō:"O",Ŏ:"O",Ő:"O",ō:"o",ŏ:"o",ő:"o",Ŕ:"R",Ŗ:"R",Ř:"R",ŕ:"r",ŗ:"r",ř:"r",Ś:"S",Ŝ:"S",Ş:"S",Š:"S",ś:"s",ŝ:"s",ş:"s",š:"s",Ţ:"T",Ť:"T",Ŧ:"T",ţ:"t",ť:"t",ŧ:"t",Ũ:"U",Ū:"U",Ŭ:"U",Ů:"U",Ű:"U",Ų:"U",ũ:"u",ū:"u",ŭ:"u",ů:"u",ű:"u",ų:"u",Ŵ:"W",ŵ:"w",Ŷ:"Y",ŷ:"y",Ÿ:"Y",Ź:"Z",Ż:"Z",Ž:"Z",ź:"z",ż:"z",ž:"z",Ĳ:"IJ",ĳ:"ij",Œ:"Oe",œ:"oe",ŉ:"'n",ſ:"s"}),on=Ke({"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#39;"});function an(t){return"\\"+he[t]}function sn(t){return ne.test(t)}function hn(t){var e=-1,n=Array(t.size);return t.forEach((function(t,r){n[++e]=[r,t]})),n}function un(t,e){return function(n){return t(e(n))}}function cn(t,e){for(var n=-1,r=t.length,i=0,o=[];++n<r;){var a=t[n];a!==e&&a!==s||(t[n]=s,o[i++]=n)}return o}function ln(t){var e=-1,n=Array(t.size);return t.forEach((function(t){n[++e]=t})),n}function fn(t){var e=-1,n=Array(t.size);return t.forEach((function(t){n[++e]=[t,t]})),n}function pn(t){return sn(t)?function(t){var e=te.lastIndex=0;for(;te.test(t);)++e;return e}(t):Le(t)}function dn(t){return sn(t)?function(t){return t.match(te)||[]}(t):function(t){return t.split("")}(t)}function gn(t){for(var e=t.length;e--&&st.test(t.charAt(e)););return e}var vn=Ke({"&amp;":"&","&lt;":"<","&gt;":">","&quot;":'"',"&#39;":"'"});var yn=function t(e){var n,r=(e=null==e?pe:yn.defaults(pe.Object(),e,yn.pick(pe,ie))).Array,st=e.Date,Ct=e.Error,Pt=e.Function,kt=e.Math,Ot=e.Object,At=e.RegExp,Tt=e.String,Mt=e.TypeError,Ft=r.prototype,Rt=Pt.prototype,Et=Ot.prototype,Dt=e["__core-js_shared__"],Gt=Rt.toString,Nt=Et.hasOwnProperty,It=0,Lt=(n=/[^.]+$/.exec(Dt&&Dt.keys&&Dt.keys.IE_PROTO||""))?"Symbol(src)_1."+n:"",jt=Et.toString,Ut=Gt.call(Ot),Bt=pe._,zt=At("^"+Gt.call(Nt).replace(it,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$"),Wt=ve?e.Buffer:i,Vt=e.Symbol,Ht=e.Uint8Array,Kt=Wt?Wt.allocUnsafe:i,Yt=un(Ot.getPrototypeOf,Ot),qt=Ot.create,Xt=Et.propertyIsEnumerable,$t=Ft.splice,Zt=Vt?Vt.isConcatSpreadable:i,te=Vt?Vt.iterator:i,ne=Vt?Vt.toStringTag:i,he=function(){try{var t=po(Ot,"defineProperty");return t({},"",{}),t}catch(t){}}(),le=e.clearTimeout!==pe.clearTimeout&&e.clearTimeout,fe=st&&st.now!==pe.Date.now&&st.now,de=e.setTimeout!==pe.setTimeout&&e.setTimeout,ge=kt.ceil,ye=kt.floor,_e=Ot.getOwnPropertySymbols,Le=Wt?Wt.isBuffer:i,Ke=e.isFinite,_n=Ft.join,mn=un(Ot.keys,Ot),bn=kt.max,xn=kt.min,wn=st.now,Sn=e.parseInt,Cn=kt.random,Pn=Ft.reverse,kn=po(e,"DataView"),On=po(e,"Map"),An=po(e,"Promise"),Tn=po(e,"Set"),Mn=po(e,"WeakMap"),Fn=po(Ot,"create"),Rn=Mn&&new Mn,En={},Dn=Bo(kn),Gn=Bo(On),Nn=Bo(An),In=Bo(Tn),Ln=Bo(Mn),jn=Vt?Vt.prototype:i,Un=jn?jn.valueOf:i,Bn=jn?jn.toString:i;function zn(t){if(is(t)&&!Ya(t)&&!(t instanceof Kn)){if(t instanceof Hn)return t;if(Nt.call(t,"__wrapped__"))return zo(t)}return new Hn(t)}var Wn=function(){function t(){}return function(e){if(!rs(e))return{};if(qt)return qt(e);t.prototype=e;var n=new t;return t.prototype=i,n}}();function Vn(){}function Hn(t,e){this.__wrapped__=t,this.__actions__=[],this.__chain__=!!e,this.__index__=0,this.__values__=i}function Kn(t){this.__wrapped__=t,this.__actions__=[],this.__dir__=1,this.__filtered__=!1,this.__iteratees__=[],this.__takeCount__=v,this.__views__=[]}function Yn(t){var e=-1,n=null==t?0:t.length;for(this.clear();++e<n;){var r=t[e];this.set(r[0],r[1])}}function qn(t){var e=-1,n=null==t?0:t.length;for(this.clear();++e<n;){var r=t[e];this.set(r[0],r[1])}}function Xn(t){var e=-1,n=null==t?0:t.length;for(this.clear();++e<n;){var r=t[e];this.set(r[0],r[1])}}function $n(t){var e=-1,n=null==t?0:t.length;for(this.__data__=new Xn;++e<n;)this.add(t[e])}function Zn(t){var e=this.__data__=new qn(t);this.size=e.size}function Qn(t,e){var n=Ya(t),r=!n&&Ka(t),i=!n&&!r&&Za(t),o=!n&&!r&&!i&&fs(t),a=n||r||i||o,s=a?Xe(t.length,Tt):[],h=s.length;for(var u in t)!e&&!Nt.call(t,u)||a&&("length"==u||i&&("offset"==u||"parent"==u)||o&&("buffer"==u||"byteLength"==u||"byteOffset"==u)||xo(u,h))||s.push(u);return s}function Jn(t){var e=t.length;return e?t[$r(0,e-1)]:i}function tr(t,e){return Lo(Fi(t),ur(e,0,t.length))}function er(t){return Lo(Fi(t))}function nr(t,e,n){(n!==i&&!Wa(t[e],n)||n===i&&!(e in t))&&sr(t,e,n)}function rr(t,e,n){var r=t[e];Nt.call(t,e)&&Wa(r,n)&&(n!==i||e in t)||sr(t,e,n)}function ir(t,e){for(var n=t.length;n--;)if(Wa(t[n][0],e))return n;return-1}function or(t,e,n,r){return dr(t,(function(t,i,o){e(r,t,n(t),o)})),r}function ar(t,e){return t&&Ri(e,Ds(e),t)}function sr(t,e,n){"__proto__"==e&&he?he(t,e,{configurable:!0,enumerable:!0,value:n,writable:!0}):t[e]=n}function hr(t,e){for(var n=-1,o=e.length,a=r(o),s=null==t;++n<o;)a[n]=s?i:Ts(t,e[n]);return a}function ur(t,e,n){return t==t&&(n!==i&&(t=t<=n?t:n),e!==i&&(t=t>=e?t:e)),t}function cr(t,e,n,r,o,a){var s,h=1&e,u=2&e,c=4&e;if(n&&(s=o?n(t,r,o,a):n(t)),s!==i)return s;if(!rs(t))return t;var l=Ya(t);if(l){if(s=function(t){var e=t.length,n=new t.constructor(e);e&&"string"==typeof t[0]&&Nt.call(t,"index")&&(n.index=t.index,n.input=t.input);return n}(t),!h)return Fi(t,s)}else{var f=yo(t),p=f==S||f==C;if(Za(t))return Pi(t,h);if(f==O||f==_||p&&!o){if(s=u||p?{}:mo(t),!h)return u?function(t,e){return Ri(t,vo(t),e)}(t,function(t,e){return t&&Ri(e,Gs(e),t)}(s,t)):function(t,e){return Ri(t,go(t),e)}(t,ar(s,t))}else{if(!se[f])return o?t:{};s=function(t,e,n){var r=t.constructor;switch(e){case D:return ki(t);case b:case x:return new r(+t);case G:return function(t,e){var n=e?ki(t.buffer):t.buffer;return new t.constructor(n,t.byteOffset,t.byteLength)}(t,n);case N:case I:case L:case j:case U:case B:case z:case W:case V:return Oi(t,n);case P:return new r;case k:case F:return new r(t);case T:return function(t){var e=new t.constructor(t.source,gt.exec(t));return e.lastIndex=t.lastIndex,e}(t);case M:return new r;case R:return i=t,Un?Ot(Un.call(i)):{}}var i}(t,f,h)}}a||(a=new Zn);var d=a.get(t);if(d)return d;a.set(t,s),us(t)?t.forEach((function(r){s.add(cr(r,e,n,r,t,a))})):os(t)&&t.forEach((function(r,i){s.set(i,cr(r,e,n,i,t,a))}));var g=l?i:(c?u?ao:oo:u?Gs:Ds)(t);return Oe(g||t,(function(r,i){g&&(r=t[i=r]),rr(s,i,cr(r,e,n,i,t,a))})),s}function lr(t,e,n){var r=n.length;if(null==t)return!r;for(t=Ot(t);r--;){var o=n[r],a=e[o],s=t[o];if(s===i&&!(o in t)||!a(s))return!1}return!0}function fr(t,e,n){if("function"!=typeof t)throw new Mt(o);return Do((function(){t.apply(i,n)}),e)}function pr(t,e,n,r){var i=-1,o=Fe,a=!0,s=t.length,h=[],u=e.length;if(!s)return h;n&&(e=Ee(e,Ze(n))),r?(o=Re,a=!1):e.length>=200&&(o=Je,a=!1,e=new $n(e));t:for(;++i<s;){var c=t[i],l=null==n?c:n(c);if(c=r||0!==c?c:0,a&&l==l){for(var f=u;f--;)if(e[f]===l)continue t;h.push(c)}else o(e,l,r)||h.push(c)}return h}zn.templateSettings={escape:Q,evaluate:J,interpolate:tt,variable:"",imports:{_:zn}},zn.prototype=Vn.prototype,zn.prototype.constructor=zn,Hn.prototype=Wn(Vn.prototype),Hn.prototype.constructor=Hn,Kn.prototype=Wn(Vn.prototype),Kn.prototype.constructor=Kn,Yn.prototype.clear=function(){this.__data__=Fn?Fn(null):{},this.size=0},Yn.prototype.delete=function(t){var e=this.has(t)&&delete this.__data__[t];return this.size-=e?1:0,e},Yn.prototype.get=function(t){var e=this.__data__;if(Fn){var n=e[t];return n===a?i:n}return Nt.call(e,t)?e[t]:i},Yn.prototype.has=function(t){var e=this.__data__;return Fn?e[t]!==i:Nt.call(e,t)},Yn.prototype.set=function(t,e){var n=this.__data__;return this.size+=this.has(t)?0:1,n[t]=Fn&&e===i?a:e,this},qn.prototype.clear=function(){this.__data__=[],this.size=0},qn.prototype.delete=function(t){var e=this.__data__,n=ir(e,t);return!(n<0)&&(n==e.length-1?e.pop():$t.call(e,n,1),--this.size,!0)},qn.prototype.get=function(t){var e=this.__data__,n=ir(e,t);return n<0?i:e[n][1]},qn.prototype.has=function(t){return ir(this.__data__,t)>-1},qn.prototype.set=function(t,e){var n=this.__data__,r=ir(n,t);return r<0?(++this.size,n.push([t,e])):n[r][1]=e,this},Xn.prototype.clear=function(){this.size=0,this.__data__={hash:new Yn,map:new(On||qn),string:new Yn}},Xn.prototype.delete=function(t){var e=lo(this,t).delete(t);return this.size-=e?1:0,e},Xn.prototype.get=function(t){return lo(this,t).get(t)},Xn.prototype.has=function(t){return lo(this,t).has(t)},Xn.prototype.set=function(t,e){var n=lo(this,t),r=n.size;return n.set(t,e),this.size+=n.size==r?0:1,this},$n.prototype.add=$n.prototype.push=function(t){return this.__data__.set(t,a),this},$n.prototype.has=function(t){return this.__data__.has(t)},Zn.prototype.clear=function(){this.__data__=new qn,this.size=0},Zn.prototype.delete=function(t){var e=this.__data__,n=e.delete(t);return this.size=e.size,n},Zn.prototype.get=function(t){return this.__data__.get(t)},Zn.prototype.has=function(t){return this.__data__.has(t)},Zn.prototype.set=function(t,e){var n=this.__data__;if(n instanceof qn){var r=n.__data__;if(!On||r.length<199)return r.push([t,e]),this.size=++n.size,this;n=this.__data__=new Xn(r)}return n.set(t,e),this.size=n.size,this};var dr=Gi(wr),gr=Gi(Sr,!0);function vr(t,e){var n=!0;return dr(t,(function(t,r,i){return n=!!e(t,r,i)})),n}function yr(t,e,n){for(var r=-1,o=t.length;++r<o;){var a=t[r],s=e(a);if(null!=s&&(h===i?s==s&&!ls(s):n(s,h)))var h=s,u=a}return u}function _r(t,e){var n=[];return dr(t,(function(t,r,i){e(t,r,i)&&n.push(t)})),n}function mr(t,e,n,r,i){var o=-1,a=t.length;for(n||(n=bo),i||(i=[]);++o<a;){var s=t[o];e>0&&n(s)?e>1?mr(s,e-1,n,r,i):De(i,s):r||(i[i.length]=s)}return i}var br=Ni(),xr=Ni(!0);function wr(t,e){return t&&br(t,e,Ds)}function Sr(t,e){return t&&xr(t,e,Ds)}function Cr(t,e){return Me(e,(function(e){return ts(t[e])}))}function Pr(t,e){for(var n=0,r=(e=xi(e,t)).length;null!=t&&n<r;)t=t[Uo(e[n++])];return n&&n==r?t:i}function kr(t,e,n){var r=e(t);return Ya(t)?r:De(r,n(t))}function Or(t){return null==t?t===i?"[object Undefined]":"[object Null]":ne&&ne in Ot(t)?function(t){var e=Nt.call(t,ne),n=t[ne];try{t[ne]=i;var r=!0}catch(t){}var o=jt.call(t);r&&(e?t[ne]=n:delete t[ne]);return o}(t):function(t){return jt.call(t)}(t)}function Ar(t,e){return t>e}function Tr(t,e){return null!=t&&Nt.call(t,e)}function Mr(t,e){return null!=t&&e in Ot(t)}function Fr(t,e,n){for(var o=n?Re:Fe,a=t[0].length,s=t.length,h=s,u=r(s),c=1/0,l=[];h--;){var f=t[h];h&&e&&(f=Ee(f,Ze(e))),c=xn(f.length,c),u[h]=!n&&(e||a>=120&&f.length>=120)?new $n(h&&f):i}f=t[0];var p=-1,d=u[0];t:for(;++p<a&&l.length<c;){var g=f[p],v=e?e(g):g;if(g=n||0!==g?g:0,!(d?Je(d,v):o(l,v,n))){for(h=s;--h;){var y=u[h];if(!(y?Je(y,v):o(t[h],v,n)))continue t}d&&d.push(v),l.push(g)}}return l}function Rr(t,e,n){var r=null==(t=Mo(t,e=xi(e,t)))?t:t[Uo(Jo(e))];return null==r?i:Pe(r,t,n)}function Er(t){return is(t)&&Or(t)==_}function Dr(t,e,n,r,o){return t===e||(null==t||null==e||!is(t)&&!is(e)?t!=t&&e!=e:function(t,e,n,r,o,a){var s=Ya(t),h=Ya(e),u=s?m:yo(t),c=h?m:yo(e),l=(u=u==_?O:u)==O,f=(c=c==_?O:c)==O,p=u==c;if(p&&Za(t)){if(!Za(e))return!1;s=!0,l=!1}if(p&&!l)return a||(a=new Zn),s||fs(t)?ro(t,e,n,r,o,a):function(t,e,n,r,i,o,a){switch(n){case G:if(t.byteLength!=e.byteLength||t.byteOffset!=e.byteOffset)return!1;t=t.buffer,e=e.buffer;case D:return!(t.byteLength!=e.byteLength||!o(new Ht(t),new Ht(e)));case b:case x:case k:return Wa(+t,+e);case w:return t.name==e.name&&t.message==e.message;case T:case F:return t==e+"";case P:var s=hn;case M:var h=1&r;if(s||(s=ln),t.size!=e.size&&!h)return!1;var u=a.get(t);if(u)return u==e;r|=2,a.set(t,e);var c=ro(s(t),s(e),r,i,o,a);return a.delete(t),c;case R:if(Un)return Un.call(t)==Un.call(e)}return!1}(t,e,u,n,r,o,a);if(!(1&n)){var d=l&&Nt.call(t,"__wrapped__"),g=f&&Nt.call(e,"__wrapped__");if(d||g){var v=d?t.value():t,y=g?e.value():e;return a||(a=new Zn),o(v,y,n,r,a)}}if(!p)return!1;return a||(a=new Zn),function(t,e,n,r,o,a){var s=1&n,h=oo(t),u=h.length,c=oo(e).length;if(u!=c&&!s)return!1;var l=u;for(;l--;){var f=h[l];if(!(s?f in e:Nt.call(e,f)))return!1}var p=a.get(t),d=a.get(e);if(p&&d)return p==e&&d==t;var g=!0;a.set(t,e),a.set(e,t);var v=s;for(;++l<u;){var y=t[f=h[l]],_=e[f];if(r)var m=s?r(_,y,f,e,t,a):r(y,_,f,t,e,a);if(!(m===i?y===_||o(y,_,n,r,a):m)){g=!1;break}v||(v="constructor"==f)}if(g&&!v){var b=t.constructor,x=e.constructor;b==x||!("constructor"in t)||!("constructor"in e)||"function"==typeof b&&b instanceof b&&"function"==typeof x&&x instanceof x||(g=!1)}return a.delete(t),a.delete(e),g}(t,e,n,r,o,a)}(t,e,n,r,Dr,o))}function Gr(t,e,n,r){var o=n.length,a=o,s=!r;if(null==t)return!a;for(t=Ot(t);o--;){var h=n[o];if(s&&h[2]?h[1]!==t[h[0]]:!(h[0]in t))return!1}for(;++o<a;){var u=(h=n[o])[0],c=t[u],l=h[1];if(s&&h[2]){if(c===i&&!(u in t))return!1}else{var f=new Zn;if(r)var p=r(c,l,u,t,e,f);if(!(p===i?Dr(l,c,3,r,f):p))return!1}}return!0}function Nr(t){return!(!rs(t)||(e=t,Lt&&Lt in e))&&(ts(t)?zt:_t).test(Bo(t));var e}function Ir(t){return"function"==typeof t?t:null==t?ah:"object"==typeof t?Ya(t)?Wr(t[0],t[1]):zr(t):gh(t)}function Lr(t){if(!ko(t))return mn(t);var e=[];for(var n in Ot(t))Nt.call(t,n)&&"constructor"!=n&&e.push(n);return e}function jr(t){if(!rs(t))return function(t){var e=[];if(null!=t)for(var n in Ot(t))e.push(n);return e}(t);var e=ko(t),n=[];for(var r in t)("constructor"!=r||!e&&Nt.call(t,r))&&n.push(r);return n}function Ur(t,e){return t<e}function Br(t,e){var n=-1,i=Xa(t)?r(t.length):[];return dr(t,(function(t,r,o){i[++n]=e(t,r,o)})),i}function zr(t){var e=fo(t);return 1==e.length&&e[0][2]?Ao(e[0][0],e[0][1]):function(n){return n===t||Gr(n,t,e)}}function Wr(t,e){return So(t)&&Oo(e)?Ao(Uo(t),e):function(n){var r=Ts(n,t);return r===i&&r===e?Ms(n,t):Dr(e,r,3)}}function Vr(t,e,n,r,o){t!==e&&br(e,(function(a,s){if(o||(o=new Zn),rs(a))!function(t,e,n,r,o,a,s){var h=Ro(t,n),u=Ro(e,n),c=s.get(u);if(c)return void nr(t,n,c);var l=a?a(h,u,n+"",t,e,s):i,f=l===i;if(f){var p=Ya(u),d=!p&&Za(u),g=!p&&!d&&fs(u);l=u,p||d||g?Ya(h)?l=h:$a(h)?l=Fi(h):d?(f=!1,l=Pi(u,!0)):g?(f=!1,l=Oi(u,!0)):l=[]:ss(u)||Ka(u)?(l=h,Ka(h)?l=bs(h):rs(h)&&!ts(h)||(l=mo(u))):f=!1}f&&(s.set(u,l),o(l,u,r,a,s),s.delete(u));nr(t,n,l)}(t,e,s,n,Vr,r,o);else{var h=r?r(Ro(t,s),a,s+"",t,e,o):i;h===i&&(h=a),nr(t,s,h)}}),Gs)}function Hr(t,e){var n=t.length;if(n)return xo(e+=e<0?n:0,n)?t[e]:i}function Kr(t,e,n){e=e.length?Ee(e,(function(t){return Ya(t)?function(e){return Pr(e,1===t.length?t[0]:t)}:t})):[ah];var r=-1;return e=Ee(e,Ze(co())),function(t,e){var n=t.length;for(t.sort(e);n--;)t[n]=t[n].value;return t}(Br(t,(function(t,n,i){return{criteria:Ee(e,(function(e){return e(t)})),index:++r,value:t}})),(function(t,e){return function(t,e,n){var r=-1,i=t.criteria,o=e.criteria,a=i.length,s=n.length;for(;++r<a;){var h=Ai(i[r],o[r]);if(h)return r>=s?h:h*("desc"==n[r]?-1:1)}return t.index-e.index}(t,e,n)}))}function Yr(t,e,n){for(var r=-1,i=e.length,o={};++r<i;){var a=e[r],s=Pr(t,a);n(s,a)&&ei(o,xi(a,t),s)}return o}function qr(t,e,n,r){var i=r?ze:Be,o=-1,a=e.length,s=t;for(t===e&&(e=Fi(e)),n&&(s=Ee(t,Ze(n)));++o<a;)for(var h=0,u=e[o],c=n?n(u):u;(h=i(s,c,h,r))>-1;)s!==t&&$t.call(s,h,1),$t.call(t,h,1);return t}function Xr(t,e){for(var n=t?e.length:0,r=n-1;n--;){var i=e[n];if(n==r||i!==o){var o=i;xo(i)?$t.call(t,i,1):pi(t,i)}}return t}function $r(t,e){return t+ye(Cn()*(e-t+1))}function Zr(t,e){var n="";if(!t||e<1||e>d)return n;do{e%2&&(n+=t),(e=ye(e/2))&&(t+=t)}while(e);return n}function Qr(t,e){return Go(To(t,e,ah),t+"")}function Jr(t){return Jn(Ws(t))}function ti(t,e){var n=Ws(t);return Lo(n,ur(e,0,n.length))}function ei(t,e,n,r){if(!rs(t))return t;for(var o=-1,a=(e=xi(e,t)).length,s=a-1,h=t;null!=h&&++o<a;){var u=Uo(e[o]),c=n;if("__proto__"===u||"constructor"===u||"prototype"===u)return t;if(o!=s){var l=h[u];(c=r?r(l,u,h):i)===i&&(c=rs(l)?l:xo(e[o+1])?[]:{})}rr(h,u,c),h=h[u]}return t}var ni=Rn?function(t,e){return Rn.set(t,e),t}:ah,ri=he?function(t,e){return he(t,"toString",{configurable:!0,enumerable:!1,value:rh(e),writable:!0})}:ah;function ii(t){return Lo(Ws(t))}function oi(t,e,n){var i=-1,o=t.length;e<0&&(e=-e>o?0:o+e),(n=n>o?o:n)<0&&(n+=o),o=e>n?0:n-e>>>0,e>>>=0;for(var a=r(o);++i<o;)a[i]=t[i+e];return a}function ai(t,e){var n;return dr(t,(function(t,r,i){return!(n=e(t,r,i))})),!!n}function si(t,e,n){var r=0,i=null==t?r:t.length;if("number"==typeof e&&e==e&&i<=2147483647){for(;r<i;){var o=r+i>>>1,a=t[o];null!==a&&!ls(a)&&(n?a<=e:a<e)?r=o+1:i=o}return i}return hi(t,e,ah,n)}function hi(t,e,n,r){var o=0,a=null==t?0:t.length;if(0===a)return 0;for(var s=(e=n(e))!=e,h=null===e,u=ls(e),c=e===i;o<a;){var l=ye((o+a)/2),f=n(t[l]),p=f!==i,d=null===f,g=f==f,v=ls(f);if(s)var y=r||g;else y=c?g&&(r||p):h?g&&p&&(r||!d):u?g&&p&&!d&&(r||!v):!d&&!v&&(r?f<=e:f<e);y?o=l+1:a=l}return xn(a,4294967294)}function ui(t,e){for(var n=-1,r=t.length,i=0,o=[];++n<r;){var a=t[n],s=e?e(a):a;if(!n||!Wa(s,h)){var h=s;o[i++]=0===a?0:a}}return o}function ci(t){return"number"==typeof t?t:ls(t)?g:+t}function li(t){if("string"==typeof t)return t;if(Ya(t))return Ee(t,li)+"";if(ls(t))return Bn?Bn.call(t):"";var e=t+"";return"0"==e&&1/t==-1/0?"-0":e}function fi(t,e,n){var r=-1,i=Fe,o=t.length,a=!0,s=[],h=s;if(n)a=!1,i=Re;else if(o>=200){var u=e?null:Zi(t);if(u)return ln(u);a=!1,i=Je,h=new $n}else h=e?[]:s;t:for(;++r<o;){var c=t[r],l=e?e(c):c;if(c=n||0!==c?c:0,a&&l==l){for(var f=h.length;f--;)if(h[f]===l)continue t;e&&h.push(l),s.push(c)}else i(h,l,n)||(h!==s&&h.push(l),s.push(c))}return s}function pi(t,e){return null==(t=Mo(t,e=xi(e,t)))||delete t[Uo(Jo(e))]}function di(t,e,n,r){return ei(t,e,n(Pr(t,e)),r)}function gi(t,e,n,r){for(var i=t.length,o=r?i:-1;(r?o--:++o<i)&&e(t[o],o,t););return n?oi(t,r?0:o,r?o+1:i):oi(t,r?o+1:0,r?i:o)}function vi(t,e){var n=t;return n instanceof Kn&&(n=n.value()),Ge(e,(function(t,e){return e.func.apply(e.thisArg,De([t],e.args))}),n)}function yi(t,e,n){var i=t.length;if(i<2)return i?fi(t[0]):[];for(var o=-1,a=r(i);++o<i;)for(var s=t[o],h=-1;++h<i;)h!=o&&(a[o]=pr(a[o]||s,t[h],e,n));return fi(mr(a,1),e,n)}function _i(t,e,n){for(var r=-1,o=t.length,a=e.length,s={};++r<o;){var h=r<a?e[r]:i;n(s,t[r],h)}return s}function mi(t){return $a(t)?t:[]}function bi(t){return"function"==typeof t?t:ah}function xi(t,e){return Ya(t)?t:So(t,e)?[t]:jo(xs(t))}var wi=Qr;function Si(t,e,n){var r=t.length;return n=n===i?r:n,!e&&n>=r?t:oi(t,e,n)}var Ci=le||function(t){return pe.clearTimeout(t)};function Pi(t,e){if(e)return t.slice();var n=t.length,r=Kt?Kt(n):new t.constructor(n);return t.copy(r),r}function ki(t){var e=new t.constructor(t.byteLength);return new Ht(e).set(new Ht(t)),e}function Oi(t,e){var n=e?ki(t.buffer):t.buffer;return new t.constructor(n,t.byteOffset,t.length)}function Ai(t,e){if(t!==e){var n=t!==i,r=null===t,o=t==t,a=ls(t),s=e!==i,h=null===e,u=e==e,c=ls(e);if(!h&&!c&&!a&&t>e||a&&s&&u&&!h&&!c||r&&s&&u||!n&&u||!o)return 1;if(!r&&!a&&!c&&t<e||c&&n&&o&&!r&&!a||h&&n&&o||!s&&o||!u)return-1}return 0}function Ti(t,e,n,i){for(var o=-1,a=t.length,s=n.length,h=-1,u=e.length,c=bn(a-s,0),l=r(u+c),f=!i;++h<u;)l[h]=e[h];for(;++o<s;)(f||o<a)&&(l[n[o]]=t[o]);for(;c--;)l[h++]=t[o++];return l}function Mi(t,e,n,i){for(var o=-1,a=t.length,s=-1,h=n.length,u=-1,c=e.length,l=bn(a-h,0),f=r(l+c),p=!i;++o<l;)f[o]=t[o];for(var d=o;++u<c;)f[d+u]=e[u];for(;++s<h;)(p||o<a)&&(f[d+n[s]]=t[o++]);return f}function Fi(t,e){var n=-1,i=t.length;for(e||(e=r(i));++n<i;)e[n]=t[n];return e}function Ri(t,e,n,r){var o=!n;n||(n={});for(var a=-1,s=e.length;++a<s;){var h=e[a],u=r?r(n[h],t[h],h,n,t):i;u===i&&(u=t[h]),o?sr(n,h,u):rr(n,h,u)}return n}function Ei(t,e){return function(n,r){var i=Ya(n)?ke:or,o=e?e():{};return i(n,t,co(r,2),o)}}function Di(t){return Qr((function(e,n){var r=-1,o=n.length,a=o>1?n[o-1]:i,s=o>2?n[2]:i;for(a=t.length>3&&"function"==typeof a?(o--,a):i,s&&wo(n[0],n[1],s)&&(a=o<3?i:a,o=1),e=Ot(e);++r<o;){var h=n[r];h&&t(e,h,r,a)}return e}))}function Gi(t,e){return function(n,r){if(null==n)return n;if(!Xa(n))return t(n,r);for(var i=n.length,o=e?i:-1,a=Ot(n);(e?o--:++o<i)&&!1!==r(a[o],o,a););return n}}function Ni(t){return function(e,n,r){for(var i=-1,o=Ot(e),a=r(e),s=a.length;s--;){var h=a[t?s:++i];if(!1===n(o[h],h,o))break}return e}}function Ii(t){return function(e){var n=sn(e=xs(e))?dn(e):i,r=n?n[0]:e.charAt(0),o=n?Si(n,1).join(""):e.slice(1);return r[t]()+o}}function Li(t){return function(e){return Ge(th(Ks(e).replace(Qt,"")),t,"")}}function ji(t){return function(){var e=arguments;switch(e.length){case 0:return new t;case 1:return new t(e[0]);case 2:return new t(e[0],e[1]);case 3:return new t(e[0],e[1],e[2]);case 4:return new t(e[0],e[1],e[2],e[3]);case 5:return new t(e[0],e[1],e[2],e[3],e[4]);case 6:return new t(e[0],e[1],e[2],e[3],e[4],e[5]);case 7:return new t(e[0],e[1],e[2],e[3],e[4],e[5],e[6])}var n=Wn(t.prototype),r=t.apply(n,e);return rs(r)?r:n}}function Ui(t){return function(e,n,r){var o=Ot(e);if(!Xa(e)){var a=co(n,3);e=Ds(e),n=function(t){return a(o[t],t,o)}}var s=t(e,n,r);return s>-1?o[a?e[s]:s]:i}}function Bi(t){return io((function(e){var n=e.length,r=n,a=Hn.prototype.thru;for(t&&e.reverse();r--;){var s=e[r];if("function"!=typeof s)throw new Mt(o);if(a&&!h&&"wrapper"==ho(s))var h=new Hn([],!0)}for(r=h?r:n;++r<n;){var u=ho(s=e[r]),c="wrapper"==u?so(s):i;h=c&&Co(c[0])&&424==c[1]&&!c[4].length&&1==c[9]?h[ho(c[0])].apply(h,c[3]):1==s.length&&Co(s)?h[u]():h.thru(s)}return function(){var t=arguments,r=t[0];if(h&&1==t.length&&Ya(r))return h.plant(r).value();for(var i=0,o=n?e[i].apply(this,t):r;++i<n;)o=e[i].call(this,o);return o}}))}function zi(t,e,n,o,a,s,h,u,c,f){var p=e&l,d=1&e,g=2&e,v=24&e,y=512&e,_=g?i:ji(t);return function i(){for(var l=arguments.length,m=r(l),b=l;b--;)m[b]=arguments[b];if(v)var x=uo(i),w=nn(m,x);if(o&&(m=Ti(m,o,a,v)),s&&(m=Mi(m,s,h,v)),l-=w,v&&l<f){var S=cn(m,x);return Xi(t,e,zi,i.placeholder,n,m,S,u,c,f-l)}var C=d?n:this,P=g?C[t]:t;return l=m.length,u?m=Fo(m,u):y&&l>1&&m.reverse(),p&&c<l&&(m.length=c),this&&this!==pe&&this instanceof i&&(P=_||ji(P)),P.apply(C,m)}}function Wi(t,e){return function(n,r){return function(t,e,n,r){return wr(t,(function(t,i,o){e(r,n(t),i,o)})),r}(n,t,e(r),{})}}function Vi(t,e){return function(n,r){var o;if(n===i&&r===i)return e;if(n!==i&&(o=n),r!==i){if(o===i)return r;"string"==typeof n||"string"==typeof r?(n=li(n),r=li(r)):(n=ci(n),r=ci(r)),o=t(n,r)}return o}}function Hi(t){return io((function(e){return e=Ee(e,Ze(co())),Qr((function(n){var r=this;return t(e,(function(t){return Pe(t,r,n)}))}))}))}function Ki(t,e){var n=(e=e===i?" ":li(e)).length;if(n<2)return n?Zr(e,t):e;var r=Zr(e,ge(t/pn(e)));return sn(e)?Si(dn(r),0,t).join(""):r.slice(0,t)}function Yi(t){return function(e,n,o){return o&&"number"!=typeof o&&wo(e,n,o)&&(n=o=i),e=vs(e),n===i?(n=e,e=0):n=vs(n),function(t,e,n,i){for(var o=-1,a=bn(ge((e-t)/(n||1)),0),s=r(a);a--;)s[i?a:++o]=t,t+=n;return s}(e,n,o=o===i?e<n?1:-1:vs(o),t)}}function qi(t){return function(e,n){return"string"==typeof e&&"string"==typeof n||(e=ms(e),n=ms(n)),t(e,n)}}function Xi(t,e,n,r,o,a,s,h,l,f){var p=8&e;e|=p?u:c,4&(e&=~(p?c:u))||(e&=-4);var d=[t,e,o,p?a:i,p?s:i,p?i:a,p?i:s,h,l,f],g=n.apply(i,d);return Co(t)&&Eo(g,d),g.placeholder=r,No(g,t,e)}function $i(t){var e=kt[t];return function(t,n){if(t=ms(t),(n=null==n?0:xn(ys(n),292))&&Ke(t)){var r=(xs(t)+"e").split("e");return+((r=(xs(e(r[0]+"e"+(+r[1]+n)))+"e").split("e"))[0]+"e"+(+r[1]-n))}return e(t)}}var Zi=Tn&&1/ln(new Tn([,-0]))[1]==p?function(t){return new Tn(t)}:lh;function Qi(t){return function(e){var n=yo(e);return n==P?hn(e):n==M?fn(e):function(t,e){return Ee(e,(function(e){return[e,t[e]]}))}(e,t(e))}}function Ji(t,e,n,a,p,d,g,v){var y=2&e;if(!y&&"function"!=typeof t)throw new Mt(o);var _=a?a.length:0;if(_||(e&=-97,a=p=i),g=g===i?g:bn(ys(g),0),v=v===i?v:ys(v),_-=p?p.length:0,e&c){var m=a,b=p;a=p=i}var x=y?i:so(t),w=[t,e,n,a,p,m,b,d,g,v];if(x&&function(t,e){var n=t[1],r=e[1],i=n|r,o=i<131,a=r==l&&8==n||r==l&&n==f&&t[7].length<=e[8]||384==r&&e[7].length<=e[8]&&8==n;if(!o&&!a)return t;1&r&&(t[2]=e[2],i|=1&n?0:4);var h=e[3];if(h){var u=t[3];t[3]=u?Ti(u,h,e[4]):h,t[4]=u?cn(t[3],s):e[4]}(h=e[5])&&(u=t[5],t[5]=u?Mi(u,h,e[6]):h,t[6]=u?cn(t[5],s):e[6]);(h=e[7])&&(t[7]=h);r&l&&(t[8]=null==t[8]?e[8]:xn(t[8],e[8]));null==t[9]&&(t[9]=e[9]);t[0]=e[0],t[1]=i}(w,x),t=w[0],e=w[1],n=w[2],a=w[3],p=w[4],!(v=w[9]=w[9]===i?y?0:t.length:bn(w[9]-_,0))&&24&e&&(e&=-25),e&&1!=e)S=8==e||e==h?function(t,e,n){var o=ji(t);return function a(){for(var s=arguments.length,h=r(s),u=s,c=uo(a);u--;)h[u]=arguments[u];var l=s<3&&h[0]!==c&&h[s-1]!==c?[]:cn(h,c);return(s-=l.length)<n?Xi(t,e,zi,a.placeholder,i,h,l,i,i,n-s):Pe(this&&this!==pe&&this instanceof a?o:t,this,h)}}(t,e,v):e!=u&&33!=e||p.length?zi.apply(i,w):function(t,e,n,i){var o=1&e,a=ji(t);return function e(){for(var s=-1,h=arguments.length,u=-1,c=i.length,l=r(c+h),f=this&&this!==pe&&this instanceof e?a:t;++u<c;)l[u]=i[u];for(;h--;)l[u++]=arguments[++s];return Pe(f,o?n:this,l)}}(t,e,n,a);else var S=function(t,e,n){var r=1&e,i=ji(t);return function e(){return(this&&this!==pe&&this instanceof e?i:t).apply(r?n:this,arguments)}}(t,e,n);return No((x?ni:Eo)(S,w),t,e)}function to(t,e,n,r){return t===i||Wa(t,Et[n])&&!Nt.call(r,n)?e:t}function eo(t,e,n,r,o,a){return rs(t)&&rs(e)&&(a.set(e,t),Vr(t,e,i,eo,a),a.delete(e)),t}function no(t){return ss(t)?i:t}function ro(t,e,n,r,o,a){var s=1&n,h=t.length,u=e.length;if(h!=u&&!(s&&u>h))return!1;var c=a.get(t),l=a.get(e);if(c&&l)return c==e&&l==t;var f=-1,p=!0,d=2&n?new $n:i;for(a.set(t,e),a.set(e,t);++f<h;){var g=t[f],v=e[f];if(r)var y=s?r(v,g,f,e,t,a):r(g,v,f,t,e,a);if(y!==i){if(y)continue;p=!1;break}if(d){if(!Ie(e,(function(t,e){if(!Je(d,e)&&(g===t||o(g,t,n,r,a)))return d.push(e)}))){p=!1;break}}else if(g!==v&&!o(g,v,n,r,a)){p=!1;break}}return a.delete(t),a.delete(e),p}function io(t){return Go(To(t,i,qo),t+"")}function oo(t){return kr(t,Ds,go)}function ao(t){return kr(t,Gs,vo)}var so=Rn?function(t){return Rn.get(t)}:lh;function ho(t){for(var e=t.name+"",n=En[e],r=Nt.call(En,e)?n.length:0;r--;){var i=n[r],o=i.func;if(null==o||o==t)return i.name}return e}function uo(t){return(Nt.call(zn,"placeholder")?zn:t).placeholder}function co(){var t=zn.iteratee||sh;return t=t===sh?Ir:t,arguments.length?t(arguments[0],arguments[1]):t}function lo(t,e){var n,r,i=t.__data__;return("string"==(r=typeof(n=e))||"number"==r||"symbol"==r||"boolean"==r?"__proto__"!==n:null===n)?i["string"==typeof e?"string":"hash"]:i.map}function fo(t){for(var e=Ds(t),n=e.length;n--;){var r=e[n],i=t[r];e[n]=[r,i,Oo(i)]}return e}function po(t,e){var n=function(t,e){return null==t?i:t[e]}(t,e);return Nr(n)?n:i}var go=_e?function(t){return null==t?[]:(t=Ot(t),Me(_e(t),(function(e){return Xt.call(t,e)})))}:_h,vo=_e?function(t){for(var e=[];t;)De(e,go(t)),t=Yt(t);return e}:_h,yo=Or;function _o(t,e,n){for(var r=-1,i=(e=xi(e,t)).length,o=!1;++r<i;){var a=Uo(e[r]);if(!(o=null!=t&&n(t,a)))break;t=t[a]}return o||++r!=i?o:!!(i=null==t?0:t.length)&&ns(i)&&xo(a,i)&&(Ya(t)||Ka(t))}function mo(t){return"function"!=typeof t.constructor||ko(t)?{}:Wn(Yt(t))}function bo(t){return Ya(t)||Ka(t)||!!(Zt&&t&&t[Zt])}function xo(t,e){var n=typeof t;return!!(e=null==e?d:e)&&("number"==n||"symbol"!=n&&bt.test(t))&&t>-1&&t%1==0&&t<e}function wo(t,e,n){if(!rs(n))return!1;var r=typeof e;return!!("number"==r?Xa(n)&&xo(e,n.length):"string"==r&&e in n)&&Wa(n[e],t)}function So(t,e){if(Ya(t))return!1;var n=typeof t;return!("number"!=n&&"symbol"!=n&&"boolean"!=n&&null!=t&&!ls(t))||(nt.test(t)||!et.test(t)||null!=e&&t in Ot(e))}function Co(t){var e=ho(t),n=zn[e];if("function"!=typeof n||!(e in Kn.prototype))return!1;if(t===n)return!0;var r=so(n);return!!r&&t===r[0]}(kn&&yo(new kn(new ArrayBuffer(1)))!=G||On&&yo(new On)!=P||An&&yo(An.resolve())!=A||Tn&&yo(new Tn)!=M||Mn&&yo(new Mn)!=E)&&(yo=function(t){var e=Or(t),n=e==O?t.constructor:i,r=n?Bo(n):"";if(r)switch(r){case Dn:return G;case Gn:return P;case Nn:return A;case In:return M;case Ln:return E}return e});var Po=Dt?ts:mh;function ko(t){var e=t&&t.constructor;return t===("function"==typeof e&&e.prototype||Et)}function Oo(t){return t==t&&!rs(t)}function Ao(t,e){return function(n){return null!=n&&(n[t]===e&&(e!==i||t in Ot(n)))}}function To(t,e,n){return e=bn(e===i?t.length-1:e,0),function(){for(var i=arguments,o=-1,a=bn(i.length-e,0),s=r(a);++o<a;)s[o]=i[e+o];o=-1;for(var h=r(e+1);++o<e;)h[o]=i[o];return h[e]=n(s),Pe(t,this,h)}}function Mo(t,e){return e.length<2?t:Pr(t,oi(e,0,-1))}function Fo(t,e){for(var n=t.length,r=xn(e.length,n),o=Fi(t);r--;){var a=e[r];t[r]=xo(a,n)?o[a]:i}return t}function Ro(t,e){if(("constructor"!==e||"function"!=typeof t[e])&&"__proto__"!=e)return t[e]}var Eo=Io(ni),Do=de||function(t,e){return pe.setTimeout(t,e)},Go=Io(ri);function No(t,e,n){var r=e+"";return Go(t,function(t,e){var n=e.length;if(!n)return t;var r=n-1;return e[r]=(n>1?"& ":"")+e[r],e=e.join(n>2?", ":" "),t.replace(ht,"{\n/* [wrapped with "+e+"] */\n")}(r,function(t,e){return Oe(y,(function(n){var r="_."+n[0];e&n[1]&&!Fe(t,r)&&t.push(r)})),t.sort()}(function(t){var e=t.match(ut);return e?e[1].split(ct):[]}(r),n)))}function Io(t){var e=0,n=0;return function(){var r=wn(),o=16-(r-n);if(n=r,o>0){if(++e>=800)return arguments[0]}else e=0;return t.apply(i,arguments)}}function Lo(t,e){var n=-1,r=t.length,o=r-1;for(e=e===i?r:e;++n<e;){var a=$r(n,o),s=t[a];t[a]=t[n],t[n]=s}return t.length=e,t}var jo=function(t){var e=Ia(t,(function(t){return 500===n.size&&n.clear(),t})),n=e.cache;return e}((function(t){var e=[];return 46===t.charCodeAt(0)&&e.push(""),t.replace(rt,(function(t,n,r,i){e.push(r?i.replace(pt,"$1"):n||t)})),e}));function Uo(t){if("string"==typeof t||ls(t))return t;var e=t+"";return"0"==e&&1/t==-1/0?"-0":e}function Bo(t){if(null!=t){try{return Gt.call(t)}catch(t){}try{return t+""}catch(t){}}return""}function zo(t){if(t instanceof Kn)return t.clone();var e=new Hn(t.__wrapped__,t.__chain__);return e.__actions__=Fi(t.__actions__),e.__index__=t.__index__,e.__values__=t.__values__,e}var Wo=Qr((function(t,e){return $a(t)?pr(t,mr(e,1,$a,!0)):[]})),Vo=Qr((function(t,e){var n=Jo(e);return $a(n)&&(n=i),$a(t)?pr(t,mr(e,1,$a,!0),co(n,2)):[]})),Ho=Qr((function(t,e){var n=Jo(e);return $a(n)&&(n=i),$a(t)?pr(t,mr(e,1,$a,!0),i,n):[]}));function Ko(t,e,n){var r=null==t?0:t.length;if(!r)return-1;var i=null==n?0:ys(n);return i<0&&(i=bn(r+i,0)),Ue(t,co(e,3),i)}function Yo(t,e,n){var r=null==t?0:t.length;if(!r)return-1;var o=r-1;return n!==i&&(o=ys(n),o=n<0?bn(r+o,0):xn(o,r-1)),Ue(t,co(e,3),o,!0)}function qo(t){return(null==t?0:t.length)?mr(t,1):[]}function Xo(t){return t&&t.length?t[0]:i}var $o=Qr((function(t){var e=Ee(t,mi);return e.length&&e[0]===t[0]?Fr(e):[]})),Zo=Qr((function(t){var e=Jo(t),n=Ee(t,mi);return e===Jo(n)?e=i:n.pop(),n.length&&n[0]===t[0]?Fr(n,co(e,2)):[]})),Qo=Qr((function(t){var e=Jo(t),n=Ee(t,mi);return(e="function"==typeof e?e:i)&&n.pop(),n.length&&n[0]===t[0]?Fr(n,i,e):[]}));function Jo(t){var e=null==t?0:t.length;return e?t[e-1]:i}var ta=Qr(ea);function ea(t,e){return t&&t.length&&e&&e.length?qr(t,e):t}var na=io((function(t,e){var n=null==t?0:t.length,r=hr(t,e);return Xr(t,Ee(e,(function(t){return xo(t,n)?+t:t})).sort(Ai)),r}));function ra(t){return null==t?t:Pn.call(t)}var ia=Qr((function(t){return fi(mr(t,1,$a,!0))})),oa=Qr((function(t){var e=Jo(t);return $a(e)&&(e=i),fi(mr(t,1,$a,!0),co(e,2))})),aa=Qr((function(t){var e=Jo(t);return e="function"==typeof e?e:i,fi(mr(t,1,$a,!0),i,e)}));function sa(t){if(!t||!t.length)return[];var e=0;return t=Me(t,(function(t){if($a(t))return e=bn(t.length,e),!0})),Xe(e,(function(e){return Ee(t,He(e))}))}function ha(t,e){if(!t||!t.length)return[];var n=sa(t);return null==e?n:Ee(n,(function(t){return Pe(e,i,t)}))}var ua=Qr((function(t,e){return $a(t)?pr(t,e):[]})),ca=Qr((function(t){return yi(Me(t,$a))})),la=Qr((function(t){var e=Jo(t);return $a(e)&&(e=i),yi(Me(t,$a),co(e,2))})),fa=Qr((function(t){var e=Jo(t);return e="function"==typeof e?e:i,yi(Me(t,$a),i,e)})),pa=Qr(sa);var da=Qr((function(t){var e=t.length,n=e>1?t[e-1]:i;return n="function"==typeof n?(t.pop(),n):i,ha(t,n)}));function ga(t){var e=zn(t);return e.__chain__=!0,e}function va(t,e){return e(t)}var ya=io((function(t){var e=t.length,n=e?t[0]:0,r=this.__wrapped__,o=function(e){return hr(e,t)};return!(e>1||this.__actions__.length)&&r instanceof Kn&&xo(n)?((r=r.slice(n,+n+(e?1:0))).__actions__.push({func:va,args:[o],thisArg:i}),new Hn(r,this.__chain__).thru((function(t){return e&&!t.length&&t.push(i),t}))):this.thru(o)}));var _a=Ei((function(t,e,n){Nt.call(t,n)?++t[n]:sr(t,n,1)}));var ma=Ui(Ko),ba=Ui(Yo);function xa(t,e){return(Ya(t)?Oe:dr)(t,co(e,3))}function wa(t,e){return(Ya(t)?Ae:gr)(t,co(e,3))}var Sa=Ei((function(t,e,n){Nt.call(t,n)?t[n].push(e):sr(t,n,[e])}));var Ca=Qr((function(t,e,n){var i=-1,o="function"==typeof e,a=Xa(t)?r(t.length):[];return dr(t,(function(t){a[++i]=o?Pe(e,t,n):Rr(t,e,n)})),a})),Pa=Ei((function(t,e,n){sr(t,n,e)}));function ka(t,e){return(Ya(t)?Ee:Br)(t,co(e,3))}var Oa=Ei((function(t,e,n){t[n?0:1].push(e)}),(function(){return[[],[]]}));var Aa=Qr((function(t,e){if(null==t)return[];var n=e.length;return n>1&&wo(t,e[0],e[1])?e=[]:n>2&&wo(e[0],e[1],e[2])&&(e=[e[0]]),Kr(t,mr(e,1),[])})),Ta=fe||function(){return pe.Date.now()};function Ma(t,e,n){return e=n?i:e,e=t&&null==e?t.length:e,Ji(t,l,i,i,i,i,e)}function Fa(t,e){var n;if("function"!=typeof e)throw new Mt(o);return t=ys(t),function(){return--t>0&&(n=e.apply(this,arguments)),t<=1&&(e=i),n}}var Ra=Qr((function(t,e,n){var r=1;if(n.length){var i=cn(n,uo(Ra));r|=u}return Ji(t,r,e,n,i)})),Ea=Qr((function(t,e,n){var r=3;if(n.length){var i=cn(n,uo(Ea));r|=u}return Ji(e,r,t,n,i)}));function Da(t,e,n){var r,a,s,h,u,c,l=0,f=!1,p=!1,d=!0;if("function"!=typeof t)throw new Mt(o);function g(e){var n=r,o=a;return r=a=i,l=e,h=t.apply(o,n)}function v(t){return l=t,u=Do(_,e),f?g(t):h}function y(t){var n=t-c;return c===i||n>=e||n<0||p&&t-l>=s}function _(){var t=Ta();if(y(t))return m(t);u=Do(_,function(t){var n=e-(t-c);return p?xn(n,s-(t-l)):n}(t))}function m(t){return u=i,d&&r?g(t):(r=a=i,h)}function b(){var t=Ta(),n=y(t);if(r=arguments,a=this,c=t,n){if(u===i)return v(c);if(p)return Ci(u),u=Do(_,e),g(c)}return u===i&&(u=Do(_,e)),h}return e=ms(e)||0,rs(n)&&(f=!!n.leading,s=(p="maxWait"in n)?bn(ms(n.maxWait)||0,e):s,d="trailing"in n?!!n.trailing:d),b.cancel=function(){u!==i&&Ci(u),l=0,r=c=a=u=i},b.flush=function(){return u===i?h:m(Ta())},b}var Ga=Qr((function(t,e){return fr(t,1,e)})),Na=Qr((function(t,e,n){return fr(t,ms(e)||0,n)}));function Ia(t,e){if("function"!=typeof t||null!=e&&"function"!=typeof e)throw new Mt(o);var n=function(){var r=arguments,i=e?e.apply(this,r):r[0],o=n.cache;if(o.has(i))return o.get(i);var a=t.apply(this,r);return n.cache=o.set(i,a)||o,a};return n.cache=new(Ia.Cache||Xn),n}function La(t){if("function"!=typeof t)throw new Mt(o);return function(){var e=arguments;switch(e.length){case 0:return!t.call(this);case 1:return!t.call(this,e[0]);case 2:return!t.call(this,e[0],e[1]);case 3:return!t.call(this,e[0],e[1],e[2])}return!t.apply(this,e)}}Ia.Cache=Xn;var ja=wi((function(t,e){var n=(e=1==e.length&&Ya(e[0])?Ee(e[0],Ze(co())):Ee(mr(e,1),Ze(co()))).length;return Qr((function(r){for(var i=-1,o=xn(r.length,n);++i<o;)r[i]=e[i].call(this,r[i]);return Pe(t,this,r)}))})),Ua=Qr((function(t,e){var n=cn(e,uo(Ua));return Ji(t,u,i,e,n)})),Ba=Qr((function(t,e){var n=cn(e,uo(Ba));return Ji(t,c,i,e,n)})),za=io((function(t,e){return Ji(t,f,i,i,i,e)}));function Wa(t,e){return t===e||t!=t&&e!=e}var Va=qi(Ar),Ha=qi((function(t,e){return t>=e})),Ka=Er(function(){return arguments}())?Er:function(t){return is(t)&&Nt.call(t,"callee")&&!Xt.call(t,"callee")},Ya=r.isArray,qa=me?Ze(me):function(t){return is(t)&&Or(t)==D};function Xa(t){return null!=t&&ns(t.length)&&!ts(t)}function $a(t){return is(t)&&Xa(t)}var Za=Le||mh,Qa=be?Ze(be):function(t){return is(t)&&Or(t)==x};function Ja(t){if(!is(t))return!1;var e=Or(t);return e==w||"[object DOMException]"==e||"string"==typeof t.message&&"string"==typeof t.name&&!ss(t)}function ts(t){if(!rs(t))return!1;var e=Or(t);return e==S||e==C||"[object AsyncFunction]"==e||"[object Proxy]"==e}function es(t){return"number"==typeof t&&t==ys(t)}function ns(t){return"number"==typeof t&&t>-1&&t%1==0&&t<=d}function rs(t){var e=typeof t;return null!=t&&("object"==e||"function"==e)}function is(t){return null!=t&&"object"==typeof t}var os=xe?Ze(xe):function(t){return is(t)&&yo(t)==P};function as(t){return"number"==typeof t||is(t)&&Or(t)==k}function ss(t){if(!is(t)||Or(t)!=O)return!1;var e=Yt(t);if(null===e)return!0;var n=Nt.call(e,"constructor")&&e.constructor;return"function"==typeof n&&n instanceof n&&Gt.call(n)==Ut}var hs=we?Ze(we):function(t){return is(t)&&Or(t)==T};var us=Se?Ze(Se):function(t){return is(t)&&yo(t)==M};function cs(t){return"string"==typeof t||!Ya(t)&&is(t)&&Or(t)==F}function ls(t){return"symbol"==typeof t||is(t)&&Or(t)==R}var fs=Ce?Ze(Ce):function(t){return is(t)&&ns(t.length)&&!!ae[Or(t)]};var ps=qi(Ur),ds=qi((function(t,e){return t<=e}));function gs(t){if(!t)return[];if(Xa(t))return cs(t)?dn(t):Fi(t);if(te&&t[te])return function(t){for(var e,n=[];!(e=t.next()).done;)n.push(e.value);return n}(t[te]());var e=yo(t);return(e==P?hn:e==M?ln:Ws)(t)}function vs(t){return t?(t=ms(t))===p||t===-1/0?17976931348623157e292*(t<0?-1:1):t==t?t:0:0===t?t:0}function ys(t){var e=vs(t),n=e%1;return e==e?n?e-n:e:0}function _s(t){return t?ur(ys(t),0,v):0}function ms(t){if("number"==typeof t)return t;if(ls(t))return g;if(rs(t)){var e="function"==typeof t.valueOf?t.valueOf():t;t=rs(e)?e+"":e}if("string"!=typeof t)return 0===t?t:+t;t=$e(t);var n=yt.test(t);return n||mt.test(t)?ce(t.slice(2),n?2:8):vt.test(t)?g:+t}function bs(t){return Ri(t,Gs(t))}function xs(t){return null==t?"":li(t)}var ws=Di((function(t,e){if(ko(e)||Xa(e))Ri(e,Ds(e),t);else for(var n in e)Nt.call(e,n)&&rr(t,n,e[n])})),Ss=Di((function(t,e){Ri(e,Gs(e),t)})),Cs=Di((function(t,e,n,r){Ri(e,Gs(e),t,r)})),Ps=Di((function(t,e,n,r){Ri(e,Ds(e),t,r)})),ks=io(hr);var Os=Qr((function(t,e){t=Ot(t);var n=-1,r=e.length,o=r>2?e[2]:i;for(o&&wo(e[0],e[1],o)&&(r=1);++n<r;)for(var a=e[n],s=Gs(a),h=-1,u=s.length;++h<u;){var c=s[h],l=t[c];(l===i||Wa(l,Et[c])&&!Nt.call(t,c))&&(t[c]=a[c])}return t})),As=Qr((function(t){return t.push(i,eo),Pe(Is,i,t)}));function Ts(t,e,n){var r=null==t?i:Pr(t,e);return r===i?n:r}function Ms(t,e){return null!=t&&_o(t,e,Mr)}var Fs=Wi((function(t,e,n){null!=e&&"function"!=typeof e.toString&&(e=jt.call(e)),t[e]=n}),rh(ah)),Rs=Wi((function(t,e,n){null!=e&&"function"!=typeof e.toString&&(e=jt.call(e)),Nt.call(t,e)?t[e].push(n):t[e]=[n]}),co),Es=Qr(Rr);function Ds(t){return Xa(t)?Qn(t):Lr(t)}function Gs(t){return Xa(t)?Qn(t,!0):jr(t)}var Ns=Di((function(t,e,n){Vr(t,e,n)})),Is=Di((function(t,e,n,r){Vr(t,e,n,r)})),Ls=io((function(t,e){var n={};if(null==t)return n;var r=!1;e=Ee(e,(function(e){return e=xi(e,t),r||(r=e.length>1),e})),Ri(t,ao(t),n),r&&(n=cr(n,7,no));for(var i=e.length;i--;)pi(n,e[i]);return n}));var js=io((function(t,e){return null==t?{}:function(t,e){return Yr(t,e,(function(e,n){return Ms(t,n)}))}(t,e)}));function Us(t,e){if(null==t)return{};var n=Ee(ao(t),(function(t){return[t]}));return e=co(e),Yr(t,n,(function(t,n){return e(t,n[0])}))}var Bs=Qi(Ds),zs=Qi(Gs);function Ws(t){return null==t?[]:Qe(t,Ds(t))}var Vs=Li((function(t,e,n){return e=e.toLowerCase(),t+(n?Hs(e):e)}));function Hs(t){return Js(xs(t).toLowerCase())}function Ks(t){return(t=xs(t))&&t.replace(xt,rn).replace(Jt,"")}var Ys=Li((function(t,e,n){return t+(n?"-":"")+e.toLowerCase()})),qs=Li((function(t,e,n){return t+(n?" ":"")+e.toLowerCase()})),Xs=Ii("toLowerCase");var $s=Li((function(t,e,n){return t+(n?"_":"")+e.toLowerCase()}));var Zs=Li((function(t,e,n){return t+(n?" ":"")+Js(e)}));var Qs=Li((function(t,e,n){return t+(n?" ":"")+e.toUpperCase()})),Js=Ii("toUpperCase");function th(t,e,n){return t=xs(t),(e=n?i:e)===i?function(t){return re.test(t)}(t)?function(t){return t.match(ee)||[]}(t):function(t){return t.match(lt)||[]}(t):t.match(e)||[]}var eh=Qr((function(t,e){try{return Pe(t,i,e)}catch(t){return Ja(t)?t:new Ct(t)}})),nh=io((function(t,e){return Oe(e,(function(e){e=Uo(e),sr(t,e,Ra(t[e],t))})),t}));function rh(t){return function(){return t}}var ih=Bi(),oh=Bi(!0);function ah(t){return t}function sh(t){return Ir("function"==typeof t?t:cr(t,1))}var hh=Qr((function(t,e){return function(n){return Rr(n,t,e)}})),uh=Qr((function(t,e){return function(n){return Rr(t,n,e)}}));function ch(t,e,n){var r=Ds(e),i=Cr(e,r);null!=n||rs(e)&&(i.length||!r.length)||(n=e,e=t,t=this,i=Cr(e,Ds(e)));var o=!(rs(n)&&"chain"in n&&!n.chain),a=ts(t);return Oe(i,(function(n){var r=e[n];t[n]=r,a&&(t.prototype[n]=function(){var e=this.__chain__;if(o||e){var n=t(this.__wrapped__),i=n.__actions__=Fi(this.__actions__);return i.push({func:r,args:arguments,thisArg:t}),n.__chain__=e,n}return r.apply(t,De([this.value()],arguments))})})),t}function lh(){}var fh=Hi(Ee),ph=Hi(Te),dh=Hi(Ie);function gh(t){return So(t)?He(Uo(t)):function(t){return function(e){return Pr(e,t)}}(t)}var vh=Yi(),yh=Yi(!0);function _h(){return[]}function mh(){return!1}var bh=Vi((function(t,e){return t+e}),0),xh=$i("ceil"),wh=Vi((function(t,e){return t/e}),1),Sh=$i("floor");var Ch,Ph=Vi((function(t,e){return t*e}),1),kh=$i("round"),Oh=Vi((function(t,e){return t-e}),0);return zn.after=function(t,e){if("function"!=typeof e)throw new Mt(o);return t=ys(t),function(){if(--t<1)return e.apply(this,arguments)}},zn.ary=Ma,zn.assign=ws,zn.assignIn=Ss,zn.assignInWith=Cs,zn.assignWith=Ps,zn.at=ks,zn.before=Fa,zn.bind=Ra,zn.bindAll=nh,zn.bindKey=Ea,zn.castArray=function(){if(!arguments.length)return[];var t=arguments[0];return Ya(t)?t:[t]},zn.chain=ga,zn.chunk=function(t,e,n){e=(n?wo(t,e,n):e===i)?1:bn(ys(e),0);var o=null==t?0:t.length;if(!o||e<1)return[];for(var a=0,s=0,h=r(ge(o/e));a<o;)h[s++]=oi(t,a,a+=e);return h},zn.compact=function(t){for(var e=-1,n=null==t?0:t.length,r=0,i=[];++e<n;){var o=t[e];o&&(i[r++]=o)}return i},zn.concat=function(){var t=arguments.length;if(!t)return[];for(var e=r(t-1),n=arguments[0],i=t;i--;)e[i-1]=arguments[i];return De(Ya(n)?Fi(n):[n],mr(e,1))},zn.cond=function(t){var e=null==t?0:t.length,n=co();return t=e?Ee(t,(function(t){if("function"!=typeof t[1])throw new Mt(o);return[n(t[0]),t[1]]})):[],Qr((function(n){for(var r=-1;++r<e;){var i=t[r];if(Pe(i[0],this,n))return Pe(i[1],this,n)}}))},zn.conforms=function(t){return function(t){var e=Ds(t);return function(n){return lr(n,t,e)}}(cr(t,1))},zn.constant=rh,zn.countBy=_a,zn.create=function(t,e){var n=Wn(t);return null==e?n:ar(n,e)},zn.curry=function t(e,n,r){var o=Ji(e,8,i,i,i,i,i,n=r?i:n);return o.placeholder=t.placeholder,o},zn.curryRight=function t(e,n,r){var o=Ji(e,h,i,i,i,i,i,n=r?i:n);return o.placeholder=t.placeholder,o},zn.debounce=Da,zn.defaults=Os,zn.defaultsDeep=As,zn.defer=Ga,zn.delay=Na,zn.difference=Wo,zn.differenceBy=Vo,zn.differenceWith=Ho,zn.drop=function(t,e,n){var r=null==t?0:t.length;return r?oi(t,(e=n||e===i?1:ys(e))<0?0:e,r):[]},zn.dropRight=function(t,e,n){var r=null==t?0:t.length;return r?oi(t,0,(e=r-(e=n||e===i?1:ys(e)))<0?0:e):[]},zn.dropRightWhile=function(t,e){return t&&t.length?gi(t,co(e,3),!0,!0):[]},zn.dropWhile=function(t,e){return t&&t.length?gi(t,co(e,3),!0):[]},zn.fill=function(t,e,n,r){var o=null==t?0:t.length;return o?(n&&"number"!=typeof n&&wo(t,e,n)&&(n=0,r=o),function(t,e,n,r){var o=t.length;for((n=ys(n))<0&&(n=-n>o?0:o+n),(r=r===i||r>o?o:ys(r))<0&&(r+=o),r=n>r?0:_s(r);n<r;)t[n++]=e;return t}(t,e,n,r)):[]},zn.filter=function(t,e){return(Ya(t)?Me:_r)(t,co(e,3))},zn.flatMap=function(t,e){return mr(ka(t,e),1)},zn.flatMapDeep=function(t,e){return mr(ka(t,e),p)},zn.flatMapDepth=function(t,e,n){return n=n===i?1:ys(n),mr(ka(t,e),n)},zn.flatten=qo,zn.flattenDeep=function(t){return(null==t?0:t.length)?mr(t,p):[]},zn.flattenDepth=function(t,e){return(null==t?0:t.length)?mr(t,e=e===i?1:ys(e)):[]},zn.flip=function(t){return Ji(t,512)},zn.flow=ih,zn.flowRight=oh,zn.fromPairs=function(t){for(var e=-1,n=null==t?0:t.length,r={};++e<n;){var i=t[e];r[i[0]]=i[1]}return r},zn.functions=function(t){return null==t?[]:Cr(t,Ds(t))},zn.functionsIn=function(t){return null==t?[]:Cr(t,Gs(t))},zn.groupBy=Sa,zn.initial=function(t){return(null==t?0:t.length)?oi(t,0,-1):[]},zn.intersection=$o,zn.intersectionBy=Zo,zn.intersectionWith=Qo,zn.invert=Fs,zn.invertBy=Rs,zn.invokeMap=Ca,zn.iteratee=sh,zn.keyBy=Pa,zn.keys=Ds,zn.keysIn=Gs,zn.map=ka,zn.mapKeys=function(t,e){var n={};return e=co(e,3),wr(t,(function(t,r,i){sr(n,e(t,r,i),t)})),n},zn.mapValues=function(t,e){var n={};return e=co(e,3),wr(t,(function(t,r,i){sr(n,r,e(t,r,i))})),n},zn.matches=function(t){return zr(cr(t,1))},zn.matchesProperty=function(t,e){return Wr(t,cr(e,1))},zn.memoize=Ia,zn.merge=Ns,zn.mergeWith=Is,zn.method=hh,zn.methodOf=uh,zn.mixin=ch,zn.negate=La,zn.nthArg=function(t){return t=ys(t),Qr((function(e){return Hr(e,t)}))},zn.omit=Ls,zn.omitBy=function(t,e){return Us(t,La(co(e)))},zn.once=function(t){return Fa(2,t)},zn.orderBy=function(t,e,n,r){return null==t?[]:(Ya(e)||(e=null==e?[]:[e]),Ya(n=r?i:n)||(n=null==n?[]:[n]),Kr(t,e,n))},zn.over=fh,zn.overArgs=ja,zn.overEvery=ph,zn.overSome=dh,zn.partial=Ua,zn.partialRight=Ba,zn.partition=Oa,zn.pick=js,zn.pickBy=Us,zn.property=gh,zn.propertyOf=function(t){return function(e){return null==t?i:Pr(t,e)}},zn.pull=ta,zn.pullAll=ea,zn.pullAllBy=function(t,e,n){return t&&t.length&&e&&e.length?qr(t,e,co(n,2)):t},zn.pullAllWith=function(t,e,n){return t&&t.length&&e&&e.length?qr(t,e,i,n):t},zn.pullAt=na,zn.range=vh,zn.rangeRight=yh,zn.rearg=za,zn.reject=function(t,e){return(Ya(t)?Me:_r)(t,La(co(e,3)))},zn.remove=function(t,e){var n=[];if(!t||!t.length)return n;var r=-1,i=[],o=t.length;for(e=co(e,3);++r<o;){var a=t[r];e(a,r,t)&&(n.push(a),i.push(r))}return Xr(t,i),n},zn.rest=function(t,e){if("function"!=typeof t)throw new Mt(o);return Qr(t,e=e===i?e:ys(e))},zn.reverse=ra,zn.sampleSize=function(t,e,n){return e=(n?wo(t,e,n):e===i)?1:ys(e),(Ya(t)?tr:ti)(t,e)},zn.set=function(t,e,n){return null==t?t:ei(t,e,n)},zn.setWith=function(t,e,n,r){return r="function"==typeof r?r:i,null==t?t:ei(t,e,n,r)},zn.shuffle=function(t){return(Ya(t)?er:ii)(t)},zn.slice=function(t,e,n){var r=null==t?0:t.length;return r?(n&&"number"!=typeof n&&wo(t,e,n)?(e=0,n=r):(e=null==e?0:ys(e),n=n===i?r:ys(n)),oi(t,e,n)):[]},zn.sortBy=Aa,zn.sortedUniq=function(t){return t&&t.length?ui(t):[]},zn.sortedUniqBy=function(t,e){return t&&t.length?ui(t,co(e,2)):[]},zn.split=function(t,e,n){return n&&"number"!=typeof n&&wo(t,e,n)&&(e=n=i),(n=n===i?v:n>>>0)?(t=xs(t))&&("string"==typeof e||null!=e&&!hs(e))&&!(e=li(e))&&sn(t)?Si(dn(t),0,n):t.split(e,n):[]},zn.spread=function(t,e){if("function"!=typeof t)throw new Mt(o);return e=null==e?0:bn(ys(e),0),Qr((function(n){var r=n[e],i=Si(n,0,e);return r&&De(i,r),Pe(t,this,i)}))},zn.tail=function(t){var e=null==t?0:t.length;return e?oi(t,1,e):[]},zn.take=function(t,e,n){return t&&t.length?oi(t,0,(e=n||e===i?1:ys(e))<0?0:e):[]},zn.takeRight=function(t,e,n){var r=null==t?0:t.length;return r?oi(t,(e=r-(e=n||e===i?1:ys(e)))<0?0:e,r):[]},zn.takeRightWhile=function(t,e){return t&&t.length?gi(t,co(e,3),!1,!0):[]},zn.takeWhile=function(t,e){return t&&t.length?gi(t,co(e,3)):[]},zn.tap=function(t,e){return e(t),t},zn.throttle=function(t,e,n){var r=!0,i=!0;if("function"!=typeof t)throw new Mt(o);return rs(n)&&(r="leading"in n?!!n.leading:r,i="trailing"in n?!!n.trailing:i),Da(t,e,{leading:r,maxWait:e,trailing:i})},zn.thru=va,zn.toArray=gs,zn.toPairs=Bs,zn.toPairsIn=zs,zn.toPath=function(t){return Ya(t)?Ee(t,Uo):ls(t)?[t]:Fi(jo(xs(t)))},zn.toPlainObject=bs,zn.transform=function(t,e,n){var r=Ya(t),i=r||Za(t)||fs(t);if(e=co(e,4),null==n){var o=t&&t.constructor;n=i?r?new o:[]:rs(t)&&ts(o)?Wn(Yt(t)):{}}return(i?Oe:wr)(t,(function(t,r,i){return e(n,t,r,i)})),n},zn.unary=function(t){return Ma(t,1)},zn.union=ia,zn.unionBy=oa,zn.unionWith=aa,zn.uniq=function(t){return t&&t.length?fi(t):[]},zn.uniqBy=function(t,e){return t&&t.length?fi(t,co(e,2)):[]},zn.uniqWith=function(t,e){return e="function"==typeof e?e:i,t&&t.length?fi(t,i,e):[]},zn.unset=function(t,e){return null==t||pi(t,e)},zn.unzip=sa,zn.unzipWith=ha,zn.update=function(t,e,n){return null==t?t:di(t,e,bi(n))},zn.updateWith=function(t,e,n,r){return r="function"==typeof r?r:i,null==t?t:di(t,e,bi(n),r)},zn.values=Ws,zn.valuesIn=function(t){return null==t?[]:Qe(t,Gs(t))},zn.without=ua,zn.words=th,zn.wrap=function(t,e){return Ua(bi(e),t)},zn.xor=ca,zn.xorBy=la,zn.xorWith=fa,zn.zip=pa,zn.zipObject=function(t,e){return _i(t||[],e||[],rr)},zn.zipObjectDeep=function(t,e){return _i(t||[],e||[],ei)},zn.zipWith=da,zn.entries=Bs,zn.entriesIn=zs,zn.extend=Ss,zn.extendWith=Cs,ch(zn,zn),zn.add=bh,zn.attempt=eh,zn.camelCase=Vs,zn.capitalize=Hs,zn.ceil=xh,zn.clamp=function(t,e,n){return n===i&&(n=e,e=i),n!==i&&(n=(n=ms(n))==n?n:0),e!==i&&(e=(e=ms(e))==e?e:0),ur(ms(t),e,n)},zn.clone=function(t){return cr(t,4)},zn.cloneDeep=function(t){return cr(t,5)},zn.cloneDeepWith=function(t,e){return cr(t,5,e="function"==typeof e?e:i)},zn.cloneWith=function(t,e){return cr(t,4,e="function"==typeof e?e:i)},zn.conformsTo=function(t,e){return null==e||lr(t,e,Ds(e))},zn.deburr=Ks,zn.defaultTo=function(t,e){return null==t||t!=t?e:t},zn.divide=wh,zn.endsWith=function(t,e,n){t=xs(t),e=li(e);var r=t.length,o=n=n===i?r:ur(ys(n),0,r);return(n-=e.length)>=0&&t.slice(n,o)==e},zn.eq=Wa,zn.escape=function(t){return(t=xs(t))&&Z.test(t)?t.replace(X,on):t},zn.escapeRegExp=function(t){return(t=xs(t))&&ot.test(t)?t.replace(it,"\\$&"):t},zn.every=function(t,e,n){var r=Ya(t)?Te:vr;return n&&wo(t,e,n)&&(e=i),r(t,co(e,3))},zn.find=ma,zn.findIndex=Ko,zn.findKey=function(t,e){return je(t,co(e,3),wr)},zn.findLast=ba,zn.findLastIndex=Yo,zn.findLastKey=function(t,e){return je(t,co(e,3),Sr)},zn.floor=Sh,zn.forEach=xa,zn.forEachRight=wa,zn.forIn=function(t,e){return null==t?t:br(t,co(e,3),Gs)},zn.forInRight=function(t,e){return null==t?t:xr(t,co(e,3),Gs)},zn.forOwn=function(t,e){return t&&wr(t,co(e,3))},zn.forOwnRight=function(t,e){return t&&Sr(t,co(e,3))},zn.get=Ts,zn.gt=Va,zn.gte=Ha,zn.has=function(t,e){return null!=t&&_o(t,e,Tr)},zn.hasIn=Ms,zn.head=Xo,zn.identity=ah,zn.includes=function(t,e,n,r){t=Xa(t)?t:Ws(t),n=n&&!r?ys(n):0;var i=t.length;return n<0&&(n=bn(i+n,0)),cs(t)?n<=i&&t.indexOf(e,n)>-1:!!i&&Be(t,e,n)>-1},zn.indexOf=function(t,e,n){var r=null==t?0:t.length;if(!r)return-1;var i=null==n?0:ys(n);return i<0&&(i=bn(r+i,0)),Be(t,e,i)},zn.inRange=function(t,e,n){return e=vs(e),n===i?(n=e,e=0):n=vs(n),function(t,e,n){return t>=xn(e,n)&&t<bn(e,n)}(t=ms(t),e,n)},zn.invoke=Es,zn.isArguments=Ka,zn.isArray=Ya,zn.isArrayBuffer=qa,zn.isArrayLike=Xa,zn.isArrayLikeObject=$a,zn.isBoolean=function(t){return!0===t||!1===t||is(t)&&Or(t)==b},zn.isBuffer=Za,zn.isDate=Qa,zn.isElement=function(t){return is(t)&&1===t.nodeType&&!ss(t)},zn.isEmpty=function(t){if(null==t)return!0;if(Xa(t)&&(Ya(t)||"string"==typeof t||"function"==typeof t.splice||Za(t)||fs(t)||Ka(t)))return!t.length;var e=yo(t);if(e==P||e==M)return!t.size;if(ko(t))return!Lr(t).length;for(var n in t)if(Nt.call(t,n))return!1;return!0},zn.isEqual=function(t,e){return Dr(t,e)},zn.isEqualWith=function(t,e,n){var r=(n="function"==typeof n?n:i)?n(t,e):i;return r===i?Dr(t,e,i,n):!!r},zn.isError=Ja,zn.isFinite=function(t){return"number"==typeof t&&Ke(t)},zn.isFunction=ts,zn.isInteger=es,zn.isLength=ns,zn.isMap=os,zn.isMatch=function(t,e){return t===e||Gr(t,e,fo(e))},zn.isMatchWith=function(t,e,n){return n="function"==typeof n?n:i,Gr(t,e,fo(e),n)},zn.isNaN=function(t){return as(t)&&t!=+t},zn.isNative=function(t){if(Po(t))throw new Ct("Unsupported core-js use. Try https://npms.io/search?q=ponyfill.");return Nr(t)},zn.isNil=function(t){return null==t},zn.isNull=function(t){return null===t},zn.isNumber=as,zn.isObject=rs,zn.isObjectLike=is,zn.isPlainObject=ss,zn.isRegExp=hs,zn.isSafeInteger=function(t){return es(t)&&t>=-9007199254740991&&t<=d},zn.isSet=us,zn.isString=cs,zn.isSymbol=ls,zn.isTypedArray=fs,zn.isUndefined=function(t){return t===i},zn.isWeakMap=function(t){return is(t)&&yo(t)==E},zn.isWeakSet=function(t){return is(t)&&"[object WeakSet]"==Or(t)},zn.join=function(t,e){return null==t?"":_n.call(t,e)},zn.kebabCase=Ys,zn.last=Jo,zn.lastIndexOf=function(t,e,n){var r=null==t?0:t.length;if(!r)return-1;var o=r;return n!==i&&(o=(o=ys(n))<0?bn(r+o,0):xn(o,r-1)),e==e?function(t,e,n){for(var r=n+1;r--;)if(t[r]===e)return r;return r}(t,e,o):Ue(t,We,o,!0)},zn.lowerCase=qs,zn.lowerFirst=Xs,zn.lt=ps,zn.lte=ds,zn.max=function(t){return t&&t.length?yr(t,ah,Ar):i},zn.maxBy=function(t,e){return t&&t.length?yr(t,co(e,2),Ar):i},zn.mean=function(t){return Ve(t,ah)},zn.meanBy=function(t,e){return Ve(t,co(e,2))},zn.min=function(t){return t&&t.length?yr(t,ah,Ur):i},zn.minBy=function(t,e){return t&&t.length?yr(t,co(e,2),Ur):i},zn.stubArray=_h,zn.stubFalse=mh,zn.stubObject=function(){return{}},zn.stubString=function(){return""},zn.stubTrue=function(){return!0},zn.multiply=Ph,zn.nth=function(t,e){return t&&t.length?Hr(t,ys(e)):i},zn.noConflict=function(){return pe._===this&&(pe._=Bt),this},zn.noop=lh,zn.now=Ta,zn.pad=function(t,e,n){t=xs(t);var r=(e=ys(e))?pn(t):0;if(!e||r>=e)return t;var i=(e-r)/2;return Ki(ye(i),n)+t+Ki(ge(i),n)},zn.padEnd=function(t,e,n){t=xs(t);var r=(e=ys(e))?pn(t):0;return e&&r<e?t+Ki(e-r,n):t},zn.padStart=function(t,e,n){t=xs(t);var r=(e=ys(e))?pn(t):0;return e&&r<e?Ki(e-r,n)+t:t},zn.parseInt=function(t,e,n){return n||null==e?e=0:e&&(e=+e),Sn(xs(t).replace(at,""),e||0)},zn.random=function(t,e,n){if(n&&"boolean"!=typeof n&&wo(t,e,n)&&(e=n=i),n===i&&("boolean"==typeof e?(n=e,e=i):"boolean"==typeof t&&(n=t,t=i)),t===i&&e===i?(t=0,e=1):(t=vs(t),e===i?(e=t,t=0):e=vs(e)),t>e){var r=t;t=e,e=r}if(n||t%1||e%1){var o=Cn();return xn(t+o*(e-t+ue("1e-"+((o+"").length-1))),e)}return $r(t,e)},zn.reduce=function(t,e,n){var r=Ya(t)?Ge:Ye,i=arguments.length<3;return r(t,co(e,4),n,i,dr)},zn.reduceRight=function(t,e,n){var r=Ya(t)?Ne:Ye,i=arguments.length<3;return r(t,co(e,4),n,i,gr)},zn.repeat=function(t,e,n){return e=(n?wo(t,e,n):e===i)?1:ys(e),Zr(xs(t),e)},zn.replace=function(){var t=arguments,e=xs(t[0]);return t.length<3?e:e.replace(t[1],t[2])},zn.result=function(t,e,n){var r=-1,o=(e=xi(e,t)).length;for(o||(o=1,t=i);++r<o;){var a=null==t?i:t[Uo(e[r])];a===i&&(r=o,a=n),t=ts(a)?a.call(t):a}return t},zn.round=kh,zn.runInContext=t,zn.sample=function(t){return(Ya(t)?Jn:Jr)(t)},zn.size=function(t){if(null==t)return 0;if(Xa(t))return cs(t)?pn(t):t.length;var e=yo(t);return e==P||e==M?t.size:Lr(t).length},zn.snakeCase=$s,zn.some=function(t,e,n){var r=Ya(t)?Ie:ai;return n&&wo(t,e,n)&&(e=i),r(t,co(e,3))},zn.sortedIndex=function(t,e){return si(t,e)},zn.sortedIndexBy=function(t,e,n){return hi(t,e,co(n,2))},zn.sortedIndexOf=function(t,e){var n=null==t?0:t.length;if(n){var r=si(t,e);if(r<n&&Wa(t[r],e))return r}return-1},zn.sortedLastIndex=function(t,e){return si(t,e,!0)},zn.sortedLastIndexBy=function(t,e,n){return hi(t,e,co(n,2),!0)},zn.sortedLastIndexOf=function(t,e){if(null==t?0:t.length){var n=si(t,e,!0)-1;if(Wa(t[n],e))return n}return-1},zn.startCase=Zs,zn.startsWith=function(t,e,n){return t=xs(t),n=null==n?0:ur(ys(n),0,t.length),e=li(e),t.slice(n,n+e.length)==e},zn.subtract=Oh,zn.sum=function(t){return t&&t.length?qe(t,ah):0},zn.sumBy=function(t,e){return t&&t.length?qe(t,co(e,2)):0},zn.template=function(t,e,n){var r=zn.templateSettings;n&&wo(t,e,n)&&(e=i),t=xs(t),e=Cs({},e,r,to);var o,a,s=Cs({},e.imports,r.imports,to),h=Ds(s),u=Qe(s,h),c=0,l=e.interpolate||wt,f="__p += '",p=At((e.escape||wt).source+"|"+l.source+"|"+(l===tt?dt:wt).source+"|"+(e.evaluate||wt).source+"|$","g"),d="//# sourceURL="+(Nt.call(e,"sourceURL")?(e.sourceURL+"").replace(/\s/g," "):"lodash.templateSources["+ ++oe+"]")+"\n";t.replace(p,(function(e,n,r,i,s,h){return r||(r=i),f+=t.slice(c,h).replace(St,an),n&&(o=!0,f+="' +\n__e("+n+") +\n'"),s&&(a=!0,f+="';\n"+s+";\n__p += '"),r&&(f+="' +\n((__t = ("+r+")) == null ? '' : __t) +\n'"),c=h+e.length,e})),f+="';\n";var g=Nt.call(e,"variable")&&e.variable;if(g){if(ft.test(g))throw new Ct("Invalid `variable` option passed into `_.template`")}else f="with (obj) {\n"+f+"\n}\n";f=(a?f.replace(H,""):f).replace(K,"$1").replace(Y,"$1;"),f="function("+(g||"obj")+") {\n"+(g?"":"obj || (obj = {});\n")+"var __t, __p = ''"+(o?", __e = _.escape":"")+(a?", __j = Array.prototype.join;\nfunction print() { __p += __j.call(arguments, '') }\n":";\n")+f+"return __p\n}";var v=eh((function(){return Pt(h,d+"return "+f).apply(i,u)}));if(v.source=f,Ja(v))throw v;return v},zn.times=function(t,e){if((t=ys(t))<1||t>d)return[];var n=v,r=xn(t,v);e=co(e),t-=v;for(var i=Xe(r,e);++n<t;)e(n);return i},zn.toFinite=vs,zn.toInteger=ys,zn.toLength=_s,zn.toLower=function(t){return xs(t).toLowerCase()},zn.toNumber=ms,zn.toSafeInteger=function(t){return t?ur(ys(t),-9007199254740991,d):0===t?t:0},zn.toString=xs,zn.toUpper=function(t){return xs(t).toUpperCase()},zn.trim=function(t,e,n){if((t=xs(t))&&(n||e===i))return $e(t);if(!t||!(e=li(e)))return t;var r=dn(t),o=dn(e);return Si(r,tn(r,o),en(r,o)+1).join("")},zn.trimEnd=function(t,e,n){if((t=xs(t))&&(n||e===i))return t.slice(0,gn(t)+1);if(!t||!(e=li(e)))return t;var r=dn(t);return Si(r,0,en(r,dn(e))+1).join("")},zn.trimStart=function(t,e,n){if((t=xs(t))&&(n||e===i))return t.replace(at,"");if(!t||!(e=li(e)))return t;var r=dn(t);return Si(r,tn(r,dn(e))).join("")},zn.truncate=function(t,e){var n=30,r="...";if(rs(e)){var o="separator"in e?e.separator:o;n="length"in e?ys(e.length):n,r="omission"in e?li(e.omission):r}var a=(t=xs(t)).length;if(sn(t)){var s=dn(t);a=s.length}if(n>=a)return t;var h=n-pn(r);if(h<1)return r;var u=s?Si(s,0,h).join(""):t.slice(0,h);if(o===i)return u+r;if(s&&(h+=u.length-h),hs(o)){if(t.slice(h).search(o)){var c,l=u;for(o.global||(o=At(o.source,xs(gt.exec(o))+"g")),o.lastIndex=0;c=o.exec(l);)var f=c.index;u=u.slice(0,f===i?h:f)}}else if(t.indexOf(li(o),h)!=h){var p=u.lastIndexOf(o);p>-1&&(u=u.slice(0,p))}return u+r},zn.unescape=function(t){return(t=xs(t))&&$.test(t)?t.replace(q,vn):t},zn.uniqueId=function(t){var e=++It;return xs(t)+e},zn.upperCase=Qs,zn.upperFirst=Js,zn.each=xa,zn.eachRight=wa,zn.first=Xo,ch(zn,(Ch={},wr(zn,(function(t,e){Nt.call(zn.prototype,e)||(Ch[e]=t)})),Ch),{chain:!1}),zn.VERSION="4.17.21",Oe(["bind","bindKey","curry","curryRight","partial","partialRight"],(function(t){zn[t].placeholder=zn})),Oe(["drop","take"],(function(t,e){Kn.prototype[t]=function(n){n=n===i?1:bn(ys(n),0);var r=this.__filtered__&&!e?new Kn(this):this.clone();return r.__filtered__?r.__takeCount__=xn(n,r.__takeCount__):r.__views__.push({size:xn(n,v),type:t+(r.__dir__<0?"Right":"")}),r},Kn.prototype[t+"Right"]=function(e){return this.reverse()[t](e).reverse()}})),Oe(["filter","map","takeWhile"],(function(t,e){var n=e+1,r=1==n||3==n;Kn.prototype[t]=function(t){var e=this.clone();return e.__iteratees__.push({iteratee:co(t,3),type:n}),e.__filtered__=e.__filtered__||r,e}})),Oe(["head","last"],(function(t,e){var n="take"+(e?"Right":"");Kn.prototype[t]=function(){return this[n](1).value()[0]}})),Oe(["initial","tail"],(function(t,e){var n="drop"+(e?"":"Right");Kn.prototype[t]=function(){return this.__filtered__?new Kn(this):this[n](1)}})),Kn.prototype.compact=function(){return this.filter(ah)},Kn.prototype.find=function(t){return this.filter(t).head()},Kn.prototype.findLast=function(t){return this.reverse().find(t)},Kn.prototype.invokeMap=Qr((function(t,e){return"function"==typeof t?new Kn(this):this.map((function(n){return Rr(n,t,e)}))})),Kn.prototype.reject=function(t){return this.filter(La(co(t)))},Kn.prototype.slice=function(t,e){t=ys(t);var n=this;return n.__filtered__&&(t>0||e<0)?new Kn(n):(t<0?n=n.takeRight(-t):t&&(n=n.drop(t)),e!==i&&(n=(e=ys(e))<0?n.dropRight(-e):n.take(e-t)),n)},Kn.prototype.takeRightWhile=function(t){return this.reverse().takeWhile(t).reverse()},Kn.prototype.toArray=function(){return this.take(v)},wr(Kn.prototype,(function(t,e){var n=/^(?:filter|find|map|reject)|While$/.test(e),r=/^(?:head|last)$/.test(e),o=zn[r?"take"+("last"==e?"Right":""):e],a=r||/^find/.test(e);o&&(zn.prototype[e]=function(){var e=this.__wrapped__,s=r?[1]:arguments,h=e instanceof Kn,u=s[0],c=h||Ya(e),l=function(t){var e=o.apply(zn,De([t],s));return r&&f?e[0]:e};c&&n&&"function"==typeof u&&1!=u.length&&(h=c=!1);var f=this.__chain__,p=!!this.__actions__.length,d=a&&!f,g=h&&!p;if(!a&&c){e=g?e:new Kn(this);var v=t.apply(e,s);return v.__actions__.push({func:va,args:[l],thisArg:i}),new Hn(v,f)}return d&&g?t.apply(this,s):(v=this.thru(l),d?r?v.value()[0]:v.value():v)})})),Oe(["pop","push","shift","sort","splice","unshift"],(function(t){var e=Ft[t],n=/^(?:push|sort|unshift)$/.test(t)?"tap":"thru",r=/^(?:pop|shift)$/.test(t);zn.prototype[t]=function(){var t=arguments;if(r&&!this.__chain__){var i=this.value();return e.apply(Ya(i)?i:[],t)}return this[n]((function(n){return e.apply(Ya(n)?n:[],t)}))}})),wr(Kn.prototype,(function(t,e){var n=zn[e];if(n){var r=n.name+"";Nt.call(En,r)||(En[r]=[]),En[r].push({name:e,func:n})}})),En[zi(i,2).name]=[{name:"wrapper",func:i}],Kn.prototype.clone=function(){var t=new Kn(this.__wrapped__);return t.__actions__=Fi(this.__actions__),t.__dir__=this.__dir__,t.__filtered__=this.__filtered__,t.__iteratees__=Fi(this.__iteratees__),t.__takeCount__=this.__takeCount__,t.__views__=Fi(this.__views__),t},Kn.prototype.reverse=function(){if(this.__filtered__){var t=new Kn(this);t.__dir__=-1,t.__filtered__=!0}else(t=this.clone()).__dir__*=-1;return t},Kn.prototype.value=function(){var t=this.__wrapped__.value(),e=this.__dir__,n=Ya(t),r=e<0,i=n?t.length:0,o=function(t,e,n){var r=-1,i=n.length;for(;++r<i;){var o=n[r],a=o.size;switch(o.type){case"drop":t+=a;break;case"dropRight":e-=a;break;case"take":e=xn(e,t+a);break;case"takeRight":t=bn(t,e-a)}}return{start:t,end:e}}(0,i,this.__views__),a=o.start,s=o.end,h=s-a,u=r?s:a-1,c=this.__iteratees__,l=c.length,f=0,p=xn(h,this.__takeCount__);if(!n||!r&&i==h&&p==h)return vi(t,this.__actions__);var d=[];t:for(;h--&&f<p;){for(var g=-1,v=t[u+=e];++g<l;){var y=c[g],_=y.iteratee,m=y.type,b=_(v);if(2==m)v=b;else if(!b){if(1==m)continue t;break t}}d[f++]=v}return d},zn.prototype.at=ya,zn.prototype.chain=function(){return ga(this)},zn.prototype.commit=function(){return new Hn(this.value(),this.__chain__)},zn.prototype.next=function(){this.__values__===i&&(this.__values__=gs(this.value()));var t=this.__index__>=this.__values__.length;return{done:t,value:t?i:this.__values__[this.__index__++]}},zn.prototype.plant=function(t){for(var e,n=this;n instanceof Vn;){var r=zo(n);r.__index__=0,r.__values__=i,e?o.__wrapped__=r:e=r;var o=r;n=n.__wrapped__}return o.__wrapped__=t,e},zn.prototype.reverse=function(){var t=this.__wrapped__;if(t instanceof Kn){var e=t;return this.__actions__.length&&(e=new Kn(this)),(e=e.reverse()).__actions__.push({func:va,args:[ra],thisArg:i}),new Hn(e,this.__chain__)}return this.thru(ra)},zn.prototype.toJSON=zn.prototype.valueOf=zn.prototype.value=function(){return vi(this.__wrapped__,this.__actions__)},zn.prototype.first=zn.prototype.head,te&&(zn.prototype[te]=function(){return this}),zn}();pe._=yn,(r=function(){return yn}.call(e,n,e,t))===i||(t.exports=r)}.call(this)},7418:t=>{"use strict";var e=Object.getOwnPropertySymbols,n=Object.prototype.hasOwnProperty,r=Object.prototype.propertyIsEnumerable;function i(t){if(null==t)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(t)}t.exports=function(){try{if(!Object.assign)return!1;var t=new String("abc");if(t[5]="de","5"===Object.getOwnPropertyNames(t)[0])return!1;for(var e={},n=0;n<10;n++)e["_"+String.fromCharCode(n)]=n;if("0123456789"!==Object.getOwnPropertyNames(e).map((function(t){return e[t]})).join(""))return!1;var r={};return"abcdefghijklmnopqrst".split("").forEach((function(t){r[t]=t})),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},r)).join("")}catch(t){return!1}}()?Object.assign:function(t,o){for(var a,s,h=i(t),u=1;u<arguments.length;u++){for(var c in a=Object(arguments[u]))n.call(a,c)&&(h[c]=a[c]);if(e){s=e(a);for(var l=0;l<s.length;l++)r.call(a,s[l])&&(h[s[l]]=a[s[l]])}}return h}},2703:(t,e,n)=>{"use strict";var r=n(414);function i(){}function o(){}o.resetWarningCache=i,t.exports=function(){function t(t,e,n,i,o,a){if(a!==r){var s=new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");throw s.name="Invariant Violation",s}}function e(){return t}t.isRequired=t;var n={array:t,bool:t,func:t,number:t,object:t,string:t,symbol:t,any:t,arrayOf:e,element:t,elementType:t,instanceOf:e,node:t,objectOf:e,oneOf:e,oneOfType:e,shape:e,exact:e,checkPropTypes:o,resetWarningCache:i};return n.PropTypes=n,n}},5697:(t,e,n)=>{t.exports=n(2703)()},414:t=>{"use strict";t.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},2408:(t,e,n)=>{"use strict";var r=n(7418),i=60103,o=60106;e.Fragment=60107,e.StrictMode=60108,e.Profiler=60114;var a=60109,s=60110,h=60112;e.Suspense=60113;var u=60115,c=60116;if("function"==typeof Symbol&&Symbol.for){var l=Symbol.for;i=l("react.element"),o=l("react.portal"),e.Fragment=l("react.fragment"),e.StrictMode=l("react.strict_mode"),e.Profiler=l("react.profiler"),a=l("react.provider"),s=l("react.context"),h=l("react.forward_ref"),e.Suspense=l("react.suspense"),u=l("react.memo"),c=l("react.lazy")}var f="function"==typeof Symbol&&Symbol.iterator;function p(t){for(var e="https://reactjs.org/docs/error-decoder.html?invariant="+t,n=1;n<arguments.length;n++)e+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+t+"; visit "+e+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var d={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},g={};function v(t,e,n){this.props=t,this.context=e,this.refs=g,this.updater=n||d}function y(){}function _(t,e,n){this.props=t,this.context=e,this.refs=g,this.updater=n||d}v.prototype.isReactComponent={},v.prototype.setState=function(t,e){if("object"!=typeof t&&"function"!=typeof t&&null!=t)throw Error(p(85));this.updater.enqueueSetState(this,t,e,"setState")},v.prototype.forceUpdate=function(t){this.updater.enqueueForceUpdate(this,t,"forceUpdate")},y.prototype=v.prototype;var m=_.prototype=new y;m.constructor=_,r(m,v.prototype),m.isPureReactComponent=!0;var b={current:null},x=Object.prototype.hasOwnProperty,w={key:!0,ref:!0,__self:!0,__source:!0};function S(t,e,n){var r,o={},a=null,s=null;if(null!=e)for(r in void 0!==e.ref&&(s=e.ref),void 0!==e.key&&(a=""+e.key),e)x.call(e,r)&&!w.hasOwnProperty(r)&&(o[r]=e[r]);var h=arguments.length-2;if(1===h)o.children=n;else if(1<h){for(var u=Array(h),c=0;c<h;c++)u[c]=arguments[c+2];o.children=u}if(t&&t.defaultProps)for(r in h=t.defaultProps)void 0===o[r]&&(o[r]=h[r]);return{$$typeof:i,type:t,key:a,ref:s,props:o,_owner:b.current}}function C(t){return"object"==typeof t&&null!==t&&t.$$typeof===i}var P=/\/+/g;function k(t,e){return"object"==typeof t&&null!==t&&null!=t.key?function(t){var e={"=":"=0",":":"=2"};return"$"+t.replace(/[=:]/g,(function(t){return e[t]}))}(""+t.key):e.toString(36)}function O(t,e,n,r,a){var s=typeof t;"undefined"!==s&&"boolean"!==s||(t=null);var h=!1;if(null===t)h=!0;else switch(s){case"string":case"number":h=!0;break;case"object":switch(t.$$typeof){case i:case o:h=!0}}if(h)return a=a(h=t),t=""===r?"."+k(h,0):r,Array.isArray(a)?(n="",null!=t&&(n=t.replace(P,"$&/")+"/"),O(a,e,n,"",(function(t){return t}))):null!=a&&(C(a)&&(a=function(t,e){return{$$typeof:i,type:t.type,key:e,ref:t.ref,props:t.props,_owner:t._owner}}(a,n+(!a.key||h&&h.key===a.key?"":(""+a.key).replace(P,"$&/")+"/")+t)),e.push(a)),1;if(h=0,r=""===r?".":r+":",Array.isArray(t))for(var u=0;u<t.length;u++){var c=r+k(s=t[u],u);h+=O(s,e,n,c,a)}else if("function"==typeof(c=function(t){return null===t||"object"!=typeof t?null:"function"==typeof(t=f&&t[f]||t["@@iterator"])?t:null}(t)))for(t=c.call(t),u=0;!(s=t.next()).done;)h+=O(s=s.value,e,n,c=r+k(s,u++),a);else if("object"===s)throw e=""+t,Error(p(31,"[object Object]"===e?"object with keys {"+Object.keys(t).join(", ")+"}":e));return h}function A(t,e,n){if(null==t)return t;var r=[],i=0;return O(t,r,"","",(function(t){return e.call(n,t,i++)})),r}function T(t){if(-1===t._status){var e=t._result;e=e(),t._status=0,t._result=e,e.then((function(e){0===t._status&&(e=e.default,t._status=1,t._result=e)}),(function(e){0===t._status&&(t._status=2,t._result=e)}))}if(1===t._status)return t._result;throw t._result}var M={current:null};function F(){var t=M.current;if(null===t)throw Error(p(321));return t}var R={ReactCurrentDispatcher:M,ReactCurrentBatchConfig:{transition:0},ReactCurrentOwner:b,IsSomeRendererActing:{current:!1},assign:r};e.Children={map:A,forEach:function(t,e,n){A(t,(function(){e.apply(this,arguments)}),n)},count:function(t){var e=0;return A(t,(function(){e++})),e},toArray:function(t){return A(t,(function(t){return t}))||[]},only:function(t){if(!C(t))throw Error(p(143));return t}},e.Component=v,e.PureComponent=_,e.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=R,e.cloneElement=function(t,e,n){if(null==t)throw Error(p(267,t));var o=r({},t.props),a=t.key,s=t.ref,h=t._owner;if(null!=e){if(void 0!==e.ref&&(s=e.ref,h=b.current),void 0!==e.key&&(a=""+e.key),t.type&&t.type.defaultProps)var u=t.type.defaultProps;for(c in e)x.call(e,c)&&!w.hasOwnProperty(c)&&(o[c]=void 0===e[c]&&void 0!==u?u[c]:e[c])}var c=arguments.length-2;if(1===c)o.children=n;else if(1<c){u=Array(c);for(var l=0;l<c;l++)u[l]=arguments[l+2];o.children=u}return{$$typeof:i,type:t.type,key:a,ref:s,props:o,_owner:h}},e.createContext=function(t,e){return void 0===e&&(e=null),(t={$$typeof:s,_calculateChangedBits:e,_currentValue:t,_currentValue2:t,_threadCount:0,Provider:null,Consumer:null}).Provider={$$typeof:a,_context:t},t.Consumer=t},e.createElement=S,e.createFactory=function(t){var e=S.bind(null,t);return e.type=t,e},e.createRef=function(){return{current:null}},e.forwardRef=function(t){return{$$typeof:h,render:t}},e.isValidElement=C,e.lazy=function(t){return{$$typeof:c,_payload:{_status:-1,_result:t},_init:T}},e.memo=function(t,e){return{$$typeof:u,type:t,compare:void 0===e?null:e}},e.useCallback=function(t,e){return F().useCallback(t,e)},e.useContext=function(t,e){return F().useContext(t,e)},e.useDebugValue=function(){},e.useEffect=function(t,e){return F().useEffect(t,e)},e.useImperativeHandle=function(t,e,n){return F().useImperativeHandle(t,e,n)},e.useLayoutEffect=function(t,e){return F().useLayoutEffect(t,e)},e.useMemo=function(t,e){return F().useMemo(t,e)},e.useReducer=function(t,e,n){return F().useReducer(t,e,n)},e.useRef=function(t){return F().useRef(t)},e.useState=function(t){return F().useState(t)},e.version="17.0.1"},7294:(t,e,n)=>{"use strict";t.exports=n(2408)}},e={};function n(r){var i=e[r];if(void 0!==i)return i.exports;var o=e[r]={id:r,loaded:!1,exports:{}};return t[r].call(o.exports,o,o.exports,n),o.loaded=!0,o.exports}n.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return n.d(e,{a:e}),e},n.d=(t,e)=>{for(var r in e)n.o(e,r)&&!n.o(t,r)&&Object.defineProperty(t,r,{enumerable:!0,get:e[r]})},n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),n.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),n.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.nmd=t=>(t.paths=[],t.children||(t.children=[]),t);var r={};return(()=>{"use strict";function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function e(t,n){return(e=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,n)}function i(t){return(i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function o(t,e){return!e||"object"!==i(e)&&"function"!=typeof e?function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t):e}function a(t){return(a=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function s(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}n.r(r),n.d(r,{Number:()=>m,default:()=>b});var h=n(7294),u=n(5697),c=n.n(u),l=n(185),f=n.n(l),p=n(6486);const d="hqw_index_2ey7B",g="hqw_index_3fbEq",v="hqw_index_21XIS";function y(t){var e=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}();return function(){var n,r=a(t);if(e){var i=a(this).constructor;n=Reflect.construct(r,arguments,i)}else n=r.apply(this,arguments);return o(this,n)}}var _=function(n){!function(t,n){if("function"!=typeof n&&null!==n)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(n&&n.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),n&&e(t,n)}(s,n);var r,i,o,a=y(s);function s(){var t;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,s),(t=a.call(this)).$canvas=(0,h.createRef)(),t.$hideToolsDiv=(0,h.createRef)(),t}return r=s,(i=[{key:"init",value:function(){this.qingxie=5*this.containerHeight/300,this.numWidth=130*this.containerHeight/300,this.containerWidth=this.props.num.length*(this.numWidth+10*this.qingxie),this.numHight=25*this.containerHeight/300}},{key:"componentDidMount",value:function(){console.log("this.$hideToolsDiv",this.props.num),this.containerHeight=this.$hideToolsDiv.current.offsetHeight,this.init(),this.stage=new(f().Stage)({container:this.$canvas.current,width:this.containerWidth,height:this.containerHeight}),this.layer=new(f().Layer),this.layer.destroy(),this.getNumbers(),this.stage.add(this.layer)}},{key:"getNumbers",value:function(){for(var t=this,e=this.props.num.length,n=[],r=0;r<e;r++)n.push(this.props.num.charAt(r));(0,p.each)(n,(function(e,n){var r=t.createNum(e);r.move({x:t.numWidth*n+10*t.qingxie*n,y:0}),t.layer.add(r)}))}},{key:"createNum",value:function(t){var e=new(f().Group);switch(this.createOrginHeng(),this.createOrginShu(),this.createShu(),this.createHeng(),t){case"0":e.add(this.shu1),e.add(this.shu2),e.add(this.shu3),e.add(this.shu4),e.add(this.heng1),e.add(this.heng3);break;case"1":e.add(this.shu2),e.add(this.shu4);break;case"2":e.add(this.shu2),e.add(this.shu3),e.add(this.heng1),e.add(this.heng2),e.add(this.heng3);break;case"3":e.add(this.shu2),e.add(this.shu4),e.add(this.heng1),e.add(this.heng2),e.add(this.heng3);break;case"4":e.add(this.shu1),e.add(this.shu2),e.add(this.shu4),e.add(this.heng2);break;case"5":e.add(this.shu1),e.add(this.shu4),e.add(this.heng1),e.add(this.heng2),e.add(this.heng3);break;case"6":e.add(this.shu1),e.add(this.shu3),e.add(this.shu4),e.add(this.heng1),e.add(this.heng2),e.add(this.heng3);break;case"7":e.add(this.shu2),e.add(this.shu4),e.add(this.heng1);break;case"8":e.add(this.shu1),e.add(this.shu2),e.add(this.shu3),e.add(this.shu4),e.add(this.heng1),e.add(this.heng2),e.add(this.heng3);break;case"9":e.add(this.shu1),e.add(this.shu2),e.add(this.shu4),e.add(this.heng1),e.add(this.heng2),e.add(this.heng3);break;case"-":e.add(this.heng2)}return e}},{key:"createShu",value:function(){this.shu1=this.orginShu.clone({x:this.orginShu.x()+this.qingxie,y:this.orginShu.y()}),this.shu2=this.orginShu.clone({x:this.shu1.x()+this.numWidth-this.qingxie,y:this.orginShu.y()}),this.shu3=this.orginShu.clone({x:this.orginShu.x()-2*this.qingxie,y:this.orginShu.y()+this.numWidth+this.qingxie}),this.shu4=this.orginShu.clone({x:this.shu3.x()+this.numWidth-this.qingxie,y:this.shu3.y()})}},{key:"createHeng",value:function(){this.heng1=this.orginHeng.clone({x:0+4*this.qingxie,y:0}),this.heng2=this.orginHeng.clone({x:0+this.qingxie,y:this.numWidth+this.qingxie}),this.heng3=this.orginHeng.clone({x:2*-this.qingxie,y:2*this.numWidth+this.qingxie})}},{key:"createOrginHeng",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},e=t.x||0,n=t.y||0,r={x:e,y:n+this.numHight/2},i={x:e+this.numWidth/5+this.qingxie,y:n},o={x:e+.8*this.numWidth+this.qingxie,y:n},a={x:e+this.numWidth,y:n+this.numHight/2},s={x:e+.8*this.numWidth-this.qingxie,y:n+this.numHight},h={x:e+this.numWidth/5-this.qingxie,y:n+this.numHight};this.orginHeng=new(f().Shape)({x:0,y:0,sceneFunc:function(t){t.beginPath(),t.moveTo(r.x,r.y),t.lineTo(i.x,i.y),t.lineTo(o.x,o.y),t.lineTo(a.x,a.y),t.lineTo(s.x,s.y),t.lineTo(h.x,h.y),t.closePath(),t.fillStrokeShape(this)},offset:{x:-20*this.containerHeight/300,y:0},opacity:this.props.opacity,fill:this.props.color})}},{key:"createOrginShu",value:function(){this.orginHeng||this.createOrginHeng(),this.orginShu=this.orginHeng.clone(),this.orginShu.offsetY(this.numHight),this.orginShu.move({x:50*this.containerHeight/300,y:-4*this.containerHeight/300}),this.orginShu.scaleY(-1),this.orginShu.rotation(95)}},{key:"componentDidUpdate",value:function(){console.log("this.props.num",this.props.num),this.containerHeight=this.$hideToolsDiv.current.offsetHeight,this.init(),this.stage.width(this.containerWidth),this.stage.height(this.containerHeight),this.layer.destroy(),this.getNumbers(),this.stage.add(this.layer)}},{key:"render",value:function(){return h.createElement("div",{className:d},h.createElement("div",{className:g,ref:this.$canvas}),h.createElement("div",{className:v,style:{fontSize:"".concat(this.props.fontSize,"px"),color:"red"},ref:this.$hideToolsDiv},this.props.num))}}])&&t(r.prototype,i),o&&t(r,o),s}(h.Component);s(_,"propTypes",{color:c().string,num:c().string||c().number,fontSize:c().oneOfType([c().string,c().number]),opacity:c().number}),s(_,"defaultProps",{color:"black",num:"9",fontSize:"14",opacity:1});const m=_,b=_})(),r})()}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,